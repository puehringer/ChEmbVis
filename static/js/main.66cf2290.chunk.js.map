{"version":3,"sources":["components/StructureCardGrid.tsx","components/ranking/LineupWrapper.tsx","components/ranking/StructureImageRenderer.ts","components/ranking/StructureImageColumn.ts","components/StructureCard.tsx","components/LoadingPage.tsx","CollectionContext.tsx","components/HorizontalCollapse.tsx","components/form/InterpolationForm.tsx","components/FileUploadModal.tsx","App.tsx","InterpolationPage.tsx","components/PlotComponent.tsx","components/ButtonWithUpload.tsx","components/JSMEModal.tsx","components/UseStructureInputAddon.tsx","components/CurveEditorModal.tsx","components/form/MSOForm.tsx","components/form/ComputeEmbeddingsForm.tsx","components/form/SubstructureMatchingForm.tsx","components/form/TanimotoForm.tsx","components/GridItemOptions.tsx","components/Grid.tsx","components/ParallelCoordinatesPlot.tsx","components/LocalNeighborhoodPlot.tsx","components/GroupFlowSankeyPlot.tsx","ClusterSidePanel.tsx","components/ScatterPlot.tsx","components/form/MatchedMolecularPairsForm.tsx","components/form/NeighborSamplingForm.tsx","components/form/RecomputeEmbeddingsForm.tsx","components/form/StonedSelfiesForm.tsx","components/PlotSelect.tsx","components/PlotSelectJaccardExtension.tsx","components/PlotSelectNNDiffExtension.tsx","components/PlotSelectKNNExtension.tsx","components/PlotSelectClusterExtension.tsx","components/PlotSelectEvalExtension.tsx","components/form/ProjectionSettingsForm.tsx","components/ProjectionSettingsModal.tsx","EmbeddingPage.tsx","reportWebVitals.ts","index.tsx","utils/api.tsx","utils/hooks.tsx","components/form/DetailsSummaryWrapper.tsx","components/form/FormWrapper.tsx","utils/index.ts","components/StructureImage.tsx","utils/constants.ts","interfaces.tsx"],"names":["StructureCardGridUnwrapped","collections","structureCardProps","tableClass","renderTopForm","setSelected","selected","setFiltered","initialMode","React","cardSize","setCardSize","mode","setMode","external","setExternal","counter","setCounter","gridSize","className","style","height","type","title","onClick","c","role","disabled","marginRight","onSelectionSet","lineup","rankings","selectionColumn","find","col","SelectionColumn","getSortCriteria","length","isSortedByMe","asc","sortByMe","display","gridTemplateColumns","gridAutoRows","gridGap","map","collection","data","flat","structure","i","full","structures","undefined","StructureCardGrid","buildDefaultRanking","rankingBuilder","buildRanking","supportTypes","allColumns","LineupWrapper","getRankingBuilders","adjustRankings","align","innerProps","divRef","lineupRef","rankingRef","indexMapRef","disableLineUpSelectionListener","setSelectedRef","useSyncedRef","setFilteredRef","onSelectionSetRef","mergedData","reduce","acc","cur","forEach","d","push","_dataset","name","_particle","current","destroy","rankingBuilders","b","builder","animated","castArray","ranking","aggregationStrategy","propagateAggregationState","registerColumnType","StructureImageColumn","registerRenderer","StructureImageRenderer","livePreviews","filter","sidePanel","deriveColors","dynamicHeight","defaultHeight","padding","deriveColumns","column","buildStringColumn","label","renderer","width","build","mergedDataProperties","properties","propertyWithMostEntries","Object","keys","lazyColumns","key","getOwnPropertyDescriptor","propertiesBuilder","includes","propertiesColumns","columns","console","log","groupRenderer","buildTaggle","imageColumn","getRenderer","error","debouncedWidthChanged","debounce","prev","Math","min","max","update","debouncedFilterChanged","hasSubstructureMatch","then","matches","validSmiles","entries","counts","smiles","setFilter","valid","Set","filterMissing","catch","e","on","Column","EVENT_WIDTH_CHANGED","StringColumn","EVENT_FILTER_CHANGED","rowsToSelection","rows","LineUp","EVENT_SELECTION_CHANGED","a","view","getSelection","disableTrigger","LocalDataProvider","EVENT_ADD_COLUMN","index","columnName","desc","toLowerCase","lazy","createdColumnDesc","createdColumn","getFirstRanking","insertAfter","create","markDirty","EVENT_ORDER_CHANGED","oldSelection","newSelection","isEqual","slice","sort","getRankings","set","Map","structureColumn","flatColumns","setAlign","selectedIndices","values","p","get","setSelection","ref","flex","fontSize","template","svgToImageSrc","svg","btoa","svgToCSSBackground","ERenderMode","CELL","GROUP","n","renderMissingDOM","v","images","backgroundImage","value","getValue","abortAble","Promise","resolve","setTimeout","image","getImageURL","getFilter","getAlign","href","context","group","tasks","groupRows","getReducedImages","Array","from","row","getLabel","res","structureFilter","this","isFiltered","has","size","fire","EVENT_DIRTY_VALUES","EVENT_DIRTY","StructureCard","enableModeSwitch","_enableModeSwitch","showProperties","singleMode","setSingleMode","Boolean","s","toLocaleString","LoadingPage","children","loading","loadingText","fallback","flexDirection","overflow","animation","CollectionContext","HorizontalCollapse","position","collapsed","setCollapsed","oppositePosition","window","dispatchEvent","Event","collapseButton","top","InterpolationForm","open","setCollection","setStructures","setLoading","useNameInput","setName","nameInput","onSubmit","validStructures","interpolateStructures","serverCollection","htmlFor","id","onChange","currentTarget","split","join","curr","aria-hidden","FileUploadModal","setOpen","onSave","input","setInput","handleClose","handleSave","show","onHide","Header","closeButton","Title","Body","files","text","substr","Footer","variant","App","importFileModalShow","setImportFileModalShow","EActiveTabs","EMBEDDING","activeTab","setActiveTab","_setCollections","registry","setRegistry","interpolationStructures","setInterpolationStructures","getRegistry","setCollections","injectEval","object","func","injectGetter","eval","injectJaccard","embeddingName1","embeddingName2","nn","nn1","nearest_neighbors","nn2","Error","xIndices","knn_ind","yIndices","x","injectNNDiff","embeddingName","property","method","knn_particles","ARRAY_DISTANCE_METRICS","injectCluster","cluster","clusters","startsWith","isProxySymbol","Proxy","obj","prop","propertyValue","lookup","particle","abs","nearestNeighbors","distance_metric","knn_dist","interpolationCollection","setInterpolationCollection","Provider","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Link","active","onSelect","INTERPOLATION","target","downloadJSONFile","JSON","parse","InterpolationPage","useState","optionsCollapsed","setOptionsCollapsed","marginLeft","scaffold","PlotComponent","plotComponentFactory","Plotly","PLOTLY_CONFIG","displaylogo","responsive","showLink","ButtonWithUpload","onUploadData","onUploadResult","uploadModalOpen","setUploadModalOpen","Dropdown","as","ButtonGroup","drop","Button","Menu","Item","JSMEModal","initialSmiles","setSmiles","showJSME","setShowJSME","bodyRef","timeout","clearTimeout","Modal","getBoundingClientRect","options","src","UseStructureInputAddon","selection","setValue","editorOpen","setEditorOpen","VIEWBOX_SIZE","CurveEditorModal","initialPoints","points","setPoints","setMin","setMax","inputMin","setInputMin","inputMax","setInputMax","y","toString","extent","minimum","maximum","scales","scaleLinear","domain","range","clamp","alignItems","flexFlow","justifyContent","preventDefault","stopPropagation","valueAsNumber","viewBoxSize","curveType","DEFAULT_CURVE_TYPES","MSOForm","availableObjectives","addCollection","msoStartingStructure","setMsoStartingStructure","nrOfParticles","setNrOfParticles","nrOfIterations","setNrOfIterations","nrOfSwarms","setNrOfSwarms","vMin","setVMin","vMax","setVMax","inertiaWeight","setInertiaWeight","phi1","setPhi1","phi2","setPhi2","phi3","setPhi3","selectedObjective","setSelectedObjective","objectives","setObjectives","desirabilityCurveObjective","setDesirabilityCurveObjective","FormWrapper","runMSO","iterations","num_swarms","num_part","v_min","v_max","inertia_weight","msoCollection","desirability","o","required","overflowX","objective","additional_args","description","step","weight","placeholder","aria-describedby","Alert","ComputeEmbeddingsForm","cdddInput","setCdddInput","additional","result","header","skipEmptyLines","dynamicTyping","transformHeader","trim","toLocaleLowerCase","transform","field","meta","fields","rest","embeddings","embedStructures","include_embedding","newCollection","additionalProperties","original_structure","DEFAULT_COLLECTION","SubstructureMatchingForm","smarts","setSmarts","computeSubstructures","all","results","validity","TanimotoForm","similarityRef","setSimilarityRef","similaryFP","setSimilarityFP","getTanimotoSimilarity","tanimoto","reference","embedding","availableEmbeddings","pow","GridItemOptions","gridOptions","onClose","onSettings","renderInfo","enableMove","zIndex","left","cursor","OverlayTrigger","trigger","placement","overlay","Popover","SizedGridLayout","WidthProvider","GridLayout","Grid","_children","layout","setLayout","isArray","validChildren","missingLayout","l","h","w","props","draggableHandle","cols","rowHeight","verticalCompact","compactType","onLayoutChange","ParallelCoordinatesPlot","filterSelection","figureState","setFigureState","enabledProperties","setEnabledProperties","colorProperty","setColorProperty","constraintRange","setConstraintRange","filteredCollections","hidden","availableProperties","filtered","frames","autosize","colorway","DEFAULT_COLORWAY","line","showscale","colorscale","color","fill","dimensions","order","minValue","maxValue","reverse","constraintrange","menuPosition","isMulti","openMenuOnClick","closeMenuOnSelect","formatOptionLabel","option","maxWidth","isClearable","allSelected","config","onRestyle","dim","every","some","onUpdate","figure","newOrdering","LocalNeighborhoodPlot","hover","setHover","referenceEmbedding","setReferenceEmbedding","enabledEmbeddings","setEnabledEmbeddings","allAvailableProperties","filteredAvailableEmbeddings","sortBy","distanceColumn","NumberColumn","Infinity","indexOccurances","selectionCollections","originalParticle","Occurances","indexOf","setSelectedFromLineup","normalizedDistances","fromEntries","normalizeArray","referenceIndexToDist","referenceNN","plotDataLines","previousKey","previousValue","previousInd","ind","previousX","showlegend","legendgroup","opacity","plotDataSelection","selectedXValues","NaN","isNaN","marker","plotDataScatter","toNumber","dist","hoverinfo","customdata","selectedpoints","coloraxis","getPointsFromEvent","StructureImage","dragmode","hovermode","legend","orientation","colorbar","titleside","thickness","outlinewidth","lenmode","len","yanchor","scene","aspectmode","margin","r","t","yaxis","categoryorder","categoryarray","onSelected","onHover","onUnhover","LAYOUT","GroupFlowSankeyPlot","setSelectionCollections","valueIndex","labels","valueLookup","clear","matrix","assignments","next","currentIndex","link","source","toValues","particles","to","arrangement","node","backgroundColor","isDisabled","hoveredPoints","ClusterSidePanel","setVisibleNeighborhoodSamplings","selectedParticles","concat","hoverOrSelected","lastHoverOrSelected","setHoverOrLastSelected","selectionCollection","visibleProjectionModels","setVisibleProjectionModels","recomputeEmbeddings","setRecomputeEmbeddings","removeFromOriginal","setRemoveFromOriginal","includeNeighbors","setIncludeNeighbors","newCollectionLoading","setNewCollectionLoading","showStructures","setShowStructures","rankingSelection","setRankingSelection","heatmapData","setHeatmapData","heatmapLoading","setHeatmapLoading","heatmapHover","setHeatmapHover","heatmapHoverIndices","setHeatmapHoverIndices","parallelCoordinatesCollections","setParallelCoordinatesCollections","structuresToShow","filteredParticles","groupByLodash","model","dialogClassName","visibility","gap","pointIndex","z","originalZ","emptyZ","xanchor","pad","xaxis","scaleanchor","visible","autorange","displayModeBar","Tabs","defaultActiveKey","unmountOnExit","Tab","eventKey","projections","downloadCSVFile","selectedWithEmbeddings","cdddSimilarities","selectedStructures","tanimotoSimilaritiesRaw","tanimotoSimilarities","reversescale","zmin","zmax","neighbors","cloneDeepWith","stack","oldCollections","checked","TRAJECTORY_TRACE_NAME","ScatterPlot","xAccessor","yAccessor","debouncedHover","innerHover","setInnerHover","setHoverRef","traces","connectBy","delete","isHover","knnHoverFields","isKNNHover","selectedInstancesByConnectBy","allInstances","allSizes","allColors","lineOpacityScaling","scaleSymlog","hoverColor","darker","lineColor","copy","sizeScaling","groups","groupBy","instances","lodashGet","instanceScaler","_","allBorderColors","shape","existing","annotatedCollections","plotOptions","colorBy","opacityBy","sizeBy","constantOpacity","colorExtent","opacityExtent","sizeExtent","toExtent","sizeref","bgcolor","existingData","indices","extendedParticles","ys","cmin","cmax","symbol","sizemin","sizemax","transforms","styles","localeCompare","stringify","particleIndex","handledIndices","curveNumber","add","onDeselect","MatchedMolecularPairsForm","setStructure","substructure","setSubstructure","minVariableSize","setMinVariableSize","maxVariableSize","setMaxVariableSize","minConstantSize","setMinConstantSize","minRadius","setMinRadius","minPairs","setMinPairs","rel","getMatchedMolecularPairs","min_variable_size","max_variable_size","min_constant_size","min_radius","min_pairs","embeddedCollection","NeighborSamplingForm","setVisible","setMethod","nr","setNr","scale","setScale","computeNeighborSamples","getNeighborSamples","similarity","neighborhoodSimilarity","sqrt","sample","floor","border","RecomputeEmbeddingsForm","setFrom","projection","setProjection","setTo","recomputeProjections","computeProjectionsWithModels","recomputedParticles","toName","newTo","newFrom","collectionsWithProjections","collectionsWithEmbeddings","StonedSelfiesForm","randomSamples","setRandomSamples","maxMutations","setMaxMutations","getStonedSelfies","random_samples","max_mutations","PlotSelect","inline","multi","setOption","availableNearestNeighbors","availableClusters","extensions","whiteSpace","minWidth","menu","base","onCreateOption","additionalOptions","component","PlotSelectJaccardExtension","jaccardEmb1","jaccardEmb2","jaccardNN","PlotSelectNNDiffExtension","emb","PlotSelectKNNExtension","PlotSelectClusterExtension","PlotSelectEvalExtension","ProjectionSettingsForm","setConfig","availableProjections","availableOpacityProperties","availableConnectByProperties","uniqueId","colorCoding","ProjectionSettingsModal","oldConfig","EmbeddingPage","allParticles","visibleNeighborhoodSamplings","enabledProjections","setEnabledProjections","editProjection","setEditProjection","_setSelection","_setParticleSelected","setPlotOptions","customX","setCustomX","customY","setCustomY","customPlotSettings","setCustomPlotSettings","showSelectedOnly","setShowSelectedOnly","visibleCollections","latentSpaceCollections","latentX","latentY","gutterSize","sizes","paddingLeft","onDragEnd","paddingRight","setter","newConfig","pickBy","bottom","toUpperCase","newOption","toFixed","handleWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","fetchRaw","url","fetch","headers","redirect","body","stringifyWithoutCycles","ok","json","message","statusText","fetchJSON","fetchText","maxSamples","encodeURIComponent","models","fingerprint","samples","valueRef","Tooltip","anchor","setNode","setPosition","setFromEvent","throttle","clientX","clientY","addEventListener","removeEventListener","useMousePosition","container","createElement","pointerEvents","appendChild","removeChild","initialValue","uniqueRef","currentName","replaceAll","nameAlreadyTaken","pattern","DetailsSummaryWrapper","lead","setError","reportValidity","dismissible","list","def","parseFloat","getter","downloadFile","blob","URL","createObjectURL","download","click","Blob","valueCreator","cache","defineProperty","configurable","enumerable","setSrc","alt","onLoad","onError","euclidean_difference","mean","mean_rel_diff","mean_rel_diff_log10","log10","max_difference","min_difference","Symbol"],"mappings":"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","file":"static/js/main.66cf2290.chunk.js","sourcesContent":["import { SelectionColumn } from \"lineupjs\";\nimport * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../interfaces\";\nimport { ExternalViewPortal } from \"./ExternalViewPortal\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureCard } from \"./StructureCard\";\n\nconst StructureCardGridUnwrapped = <T extends IParticle>({\n  collections,\n  structureCardProps,\n  tableClass,\n  renderTopForm,\n  setSelected,\n  selected,\n  setFiltered,\n  initialMode = \"table\",\n}: {\n  collections: ICollection<T>[];\n  setCollections?(collections: ICollection<T>[]): void;\n  structureCardProps?: (structure: T, index: number) => React.HTMLAttributes<HTMLDivElement>;\n  tableClass?: string;\n  renderTopForm?: React.ReactNode;\n  selected?: IParticleSelection;\n  setSelected?: (selected: IParticleSelection) => void;\n  setFiltered?: (selected: IParticleSelection) => void;\n  initialMode?: \"table\" | \"grid\";\n}) => {\n  const [cardSize, setCardSize] = React.useState<\"large\" | \"medium\" | \"small\">(\"small\");\n  const [mode, setMode] = React.useState<\"table\" | \"grid\">(initialMode);\n  const [external, setExternal] = React.useState<boolean>(false);\n  const [counter, setCounter] = React.useState<number>(0);\n\n  const gridSize = cardSize === \"large\" ? \"12rem\" : cardSize === \"medium\" ? \"9em\" : \"6em\";\n\n  return (\n    // <ExternalViewPortal active={external} onWindowClosed={() => setExternal(false)}>\n      <div className=\"d-flex flex-column\" style={{ height: \"100%\" }}>\n        <form className=\"row mb-2 mt-2\">\n          <div className=\"col flex-row d-flex\">\n            {renderTopForm}\n          </div>\n          <div className=\"col d-flex justify-content-end\">\n            <button\n              type=\"button\"\n              title=\"Force update ranking\"\n              className={`btn btn-sm btn-light ms-2 me-2`}\n              onClick={() => setCounter((c) => c+1)}\n            >\n              <i className=\"fas fa-fw fa-sync-alt\" />\n            </button>\n            {!external ? (\n              <button\n                type=\"button\"\n                title=\"Open as new window\"\n                className={`btn btn-sm btn-light ms-2 me-2`}\n                onClick={() => setExternal(true)}\n              >\n                <i className=\"fas fa-fw fa-external-link-square-alt\" />\n              </button>\n            ) : null}\n            <div className=\"btn-group btn-group-sm ms-2 me-2\" role=\"group\">\n              <button\n                type=\"button\"\n                className={`btn btn-light ${mode === \"table\" ? \"active\" : \"\"}`}\n                onClick={() => setMode(\"table\")}\n              >\n                <i className=\"fas fa-fw fa-table\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${mode === \"grid\" ? \"active\" : \"\"}`}\n                onClick={() => setMode(\"grid\")}\n              >\n                <i className=\"fas fa-fw fa-th\" />\n              </button>\n            </div>\n            <div className=\"btn-group btn-group-sm ms-2\" role=\"group\">\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"large\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"large\")}\n              >\n                <i className=\"fas fa-fw fa-grip-vertical\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"medium\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"medium\")}\n              >\n                <i className=\"fas fa-fw fa-th\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"small\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"small\")}\n              >\n                <i className=\"fas fa-fw fa-grip-vertical\" style={{ marginRight: \"0.15em\" }} />\n                <i className=\"fas fa-fw fa-grip-vertical\" />\n              </button>\n            </div>\n          </div>\n        </form>\n        <LineupWrapper\n          key={counter}\n          collections={collections}\n          setSelected={setSelected}\n          selected={selected}\n          setFiltered={setFiltered}\n          className={`lineup-wrapper ${mode !== \"table\" ? \"d-none\" : \"\"} ${tableClass || \"\"}`}\n          onSelectionSet={(lineup, rankings) => {\n            const selectionColumn = rankings?.[0].find((col) => col instanceof SelectionColumn);\n            // Only sort by the selection column if it was not changed\n            if (rankings[0]?.getSortCriteria().length === 0 || selectionColumn?.isSortedByMe()?.asc) {\n              // Trigger it twice to force a resort in lineup, otherwise it does not reapply the sort.\n              selectionColumn?.sortByMe(true);\n              selectionColumn?.sortByMe(false);\n            }\n          }}\n        />\n        {mode === \"grid\" ? (\n          <div\n            style={{\n              display: mode !== \"grid\" ? \"none\" : \"grid\",\n              gridTemplateColumns: `repeat(auto-fill, minmax(${gridSize}, 1fr))`,\n              gridAutoRows: \"auto\",\n              gridGap: \"1rem\",\n            }}\n          >\n            {collections\n              .map((collection) => collection.data)\n              .flat()\n              .map((structure, i, full) => (\n                <StructureCard\n                  key={i}\n                  structure={structure}\n                  structures={i > 0 ? [structure, full[i - 1]] : undefined}\n                  {...(structureCardProps?.(structure, i) || {})}\n                />\n              ))}\n          </div>\n        ) : null}\n      </div>\n    // </ExternalViewPortal>\n  );\n};\n\nexport const StructureCardGrid = React.memo(StructureCardGridUnwrapped) as typeof StructureCardGridUnwrapped;\n","import * as React from \"react\";\nimport LineUp, {\n  builder,\n  buildRanking,\n  buildStringColumn,\n  Column,\n  IColumnDesc,\n  LocalDataProvider,\n  Taggle,\n  Ranking,\n  StringColumn,\n  IStringFilter,\n  RankingBuilder,\n} from \"lineupjs\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport debounce from \"lodash.debounce\";\nimport { useSyncedRef } from \"../../utils/hooks\";\nimport { StructureImageRenderer } from \"./StructureImageRenderer\";\nimport { StructureImageColumn } from \"./StructureImageColumn\";\nimport { hasSubstructureMatch } from \"../../utils/api\";\nimport isEqual from \"lodash.isequal\";\nimport castArray from \"lodash.castarray\";\n\nexport const buildDefaultRanking = () => {\n  const rankingBuilder = buildRanking();\n  rankingBuilder.supportTypes();\n  rankingBuilder.allColumns();\n  return rankingBuilder;\n};\n\nexport const LineupWrapper = ({\n  collections,\n  getRankingBuilders = buildDefaultRanking,\n  adjustRankings,\n  setSelected,\n  align,\n  selected,\n  setFiltered,\n  onSelectionSet,\n  ...innerProps\n}: {\n  collections: ICollection[];\n  getRankingBuilders?: () => RankingBuilder | RankingBuilder[];\n  align?: string;\n  adjustRankings?: (lineup: Taggle, rankings: Ranking[]) => void;\n  setSelected?: (selection: IParticleSelection) => void;\n  selected?: IParticleSelection;\n  setFiltered?: (filtered: IParticleSelection) => void;\n  onSelectionSet?: (lineup: Taggle, rankings: Ranking[]) => void;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const divRef = React.useRef<HTMLDivElement>(null);\n  const lineupRef = React.useRef<Taggle | null>(null);\n  const rankingRef = React.useRef<Ranking[] | null>(null);\n  const indexMapRef = React.useRef<Map<IParticle, number> | null>(null);\n  const disableLineUpSelectionListener = React.useRef<boolean>(false);\n\n  const setSelectedRef = useSyncedRef(setSelected);\n  const setFilteredRef = useSyncedRef(setFiltered);\n  const onSelectionSetRef = useSyncedRef(onSelectionSet);\n\n  // Reduce the collections to an array of objects with a dataset property\n  const mergedData = React.useMemo(\n    () =>\n      collections.reduce<(IParticle & { _dataset: string; _particle: IParticle } & Record<string, unknown>)[]>((acc, cur) => {\n        cur.data.forEach((d) =>\n          acc.push({\n            ...d,\n            _dataset: cur.name,\n            _particle: d,\n          })\n        );\n        return acc;\n      }, []),\n    [collections]\n  );\n\n  React.useEffect(() => {\n    lineupRef.current?.destroy();\n\n    const DEFAULT_HEIGHT = 18;\n    let height = 36;\n\n    const rankingBuilders = getRankingBuilders();\n\n    const b = builder(mergedData).animated(false);\n    castArray(rankingBuilders).forEach((builder) => b.ranking(builder));\n    b.aggregationStrategy(\"group+item+top\")\n      .propagateAggregationState(true)\n      .registerColumnType(\"structureImage\", StructureImageColumn)\n      .registerRenderer(\"structureImage\", new StructureImageRenderer())\n      .livePreviews({\n        filter: false,\n      })\n      .sidePanel(true, true)\n      .deriveColors()\n      .dynamicHeight(() => ({\n        defaultHeight: DEFAULT_HEIGHT,\n        height: () => height,\n        padding: () => 0,\n      }));\n\n    b.deriveColumns(\"_dataset\");\n\n    // Use image column as link and text instead\n    // b.column(\n    //   buildStringColumn(\"structure\")\n    //     .label(\"Structure\")\n    //     // eslint-disable-next-line no-template-curly-in-string\n    //     .pattern(\"https://pubchem.ncbi.nlm.nih.gov/#query=${value}\")\n    //     .build([])\n    // );\n\n    b.column({\n      ...buildStringColumn(\"structure\")\n        .label(\"Structure\")\n        .renderer(\"structureImage\", \"structureImage\")\n        .width(height * 3)\n        .build([]),\n      type: \"structureImage\",\n    });\n\n    // TODO: I really don't like that, but Lineup infers the columns by the *first* entry in the data.\n    // So here we move the object with the most properties to the first position. We should probably create a \"merged\" object for that.\n    // https://github.com/lineupjs/lineupjs/blob/develop/src/provider/utils.ts#L268-L269\n    const mergedDataProperties = mergedData.map(({ properties = {} }) => properties);\n    const propertyWithMostEntries =\n      mergedDataProperties.reduce<Record<string, unknown> | null>((acc, cur) => {\n        return !acc || Object.keys(acc!).length < Object.keys(cur).length ? cur : acc;\n      }, null) || {};\n\n    const lazyColumns = Object.keys(propertyWithMostEntries).filter(\n      (key) => Object.getOwnPropertyDescriptor(propertyWithMostEntries, key)![\"get\"]\n    );\n    const eagerColumns = Object.keys(propertyWithMostEntries).filter((key) => !lazyColumns.includes(key));\n    // console.log(propertyWithMostEntries, lazyColumns, eagerColumns);\n    // The properties are a nested object, so we derive it using the builder and then inject the 'properties.' in the column.\n    const propertiesBuilder = builder([propertyWithMostEntries, ...mergedDataProperties]).deriveColumns();\n    // lazyColumns.forEach((col) =>\n    //   propertiesBuilder.column(buildNumberColumn(col).custom(\"visible\", false).custom(\"lazy\", true).build([]))\n    // );\n\n    // @ts-ignore\n    const propertiesColumns = (propertiesBuilder.columns as IColumnDesc[]).map(\n      // @ts-ignore\n      (col) => ({ ...col, column: `properties.${col.column}` })\n    );\n    console.log(propertiesColumns);\n    propertiesColumns.forEach((col) => b.column(col));\n\n    // Change the default renderer of the embedding column\n    // TODO: Adjust to multiple embeddings\n    // b.deriveColumns(\"embedding\");\n    // @ts-ignore\n    (b.columns as IColumnDesc[]).forEach((col) => {\n      // Patch the default renderer for all numbers columns\n      if (col.type === \"numbers\") {\n        col.renderer = \"histogram\"; // verticalbar is nice but slow..\n        col.groupRenderer = \"histogram\"; // verticalbar is nice but slow..\n      }\n      if (col.type === \"number\") {\n        col.groupRenderer = \"histogram\"; // boxplot is nice but slow..\n      }\n    });\n\n    // Build the ranking\n    const lineup = b.buildTaggle(divRef.current!);\n\n    // Lookup the image column\n    const imageColumn: StructureImageColumn | null = lineup.data.find(\n      (col) => col.getRenderer() === \"structureImage\"\n    ) as StructureImageColumn | null;\n    if (!imageColumn) {\n      console.error(\"Column with image renderer not found. Autoresizing disabled.\");\n    }\n    const debouncedWidthChanged = debounce((prev, cur) => {\n      // Adjust the height according to the image column\n      height = Math.min(Math.max(DEFAULT_HEIGHT, (cur - 0) / 3), 150);\n      lineup.update();\n    }, 500);\n\n    const debouncedFilterChanged = debounce((prev, cur: IStringFilter) => {\n      const filter = typeof cur?.filter === \"string\" ? cur?.filter : null;\n      if (imageColumn && filter) {\n        hasSubstructureMatch(\n          mergedData.map((d) => d.structure),\n          filter\n        )\n          .then((matches) => {\n            // TODO: Race condition check\n            const validSmiles = Object.entries(matches.counts)\n              .filter(([smiles, count]) => count > 0)\n              .map(([smiles, count]) => smiles);\n            imageColumn.setFilter({\n              filter,\n              valid: new Set(validSmiles),\n              filterMissing: true,\n            });\n          })\n          .catch((e) => {\n            console.error(e);\n            imageColumn.setFilter(null);\n          });\n      }\n    }, 1000);\n    imageColumn?.on(Column.EVENT_WIDTH_CHANGED, debouncedWidthChanged);\n    imageColumn?.on(StringColumn.EVENT_FILTER_CHANGED, debouncedFilterChanged);\n\n    const rowsToSelection = (rows: any[]) => {\n      return rows.reduce<{ [key: string]: IParticle[] }>((acc, cur) => {\n        if (!acc[cur._dataset]) {\n          acc[cur._dataset] = [];\n        }\n        acc[cur._dataset].push(cur._particle);\n        return acc;\n      }, {});\n    };\n\n    // Listen to selection\n    lineup.on(LineUp.EVENT_SELECTION_CHANGED, async () => {\n      if (!disableLineUpSelectionListener.current) {\n        const data = rowsToSelection(await lineup.data.view(lineup.getSelection()));\n        setSelectedRef.current?.(Object.entries(data).length === 0 ? null : data);\n      }\n    });\n\n    let disableTrigger = false;\n    lineup.data.on(LocalDataProvider.EVENT_ADD_COLUMN, (col, index) => {\n      if (disableTrigger) {\n        return;\n      }\n      const columnName = col.desc.label.toLowerCase();\n      // @ts-ignore\n      if (col.desc.lazy) {\n        console.log(col);\n        console.log(\"Clicked on lazy column\", col);\n        propertiesBuilder.deriveColumns(columnName);\n        // @ts-ignore\n        const createdColumnDesc = (propertiesBuilder.columns as IColumnDesc[])\n          // @ts-ignore\n          .filter((col) => col.column === columnName && !col.lazy)\n          .map(\n            // @ts-ignore\n            (col) => ({ ...col, column: `properties.${col.column}` })\n          )?.[0];\n        console.log(createdColumnDesc);\n        disableTrigger = true;\n        const createdColumn = lineup.data.getFirstRanking().insertAfter(lineup.data.create(createdColumnDesc)!, col);\n        disableTrigger = false;\n        createdColumn?.markDirty(\"all\");\n        lineup.update();\n      }\n    });\n\n    lineup.data.on(LocalDataProvider.EVENT_ORDER_CHANGED, async (oldSelection, newSelection) => {\n      if (newSelection.length === mergedData.length) {\n        setFilteredRef?.current?.(null);\n      } else if (!isEqual(oldSelection.slice().sort(), newSelection.slice().sort())) {\n        // If we actually filtered the table\n        setFilteredRef?.current?.(rowsToSelection(await lineup.data.view(newSelection)));\n      }\n    });\n\n    // @ts-ignore\n    lineupRef.current = lineup;\n    rankingRef.current = lineup.data.getRankings();\n\n    adjustRankings?.(lineupRef.current, rankingRef.current);\n\n    indexMapRef.current = mergedData.reduce((acc, cur, i) => {\n      acc.set(cur._particle, i);\n      return acc;\n    }, new Map());\n\n    return () => {\n      lineupRef.current?.destroy();\n    };\n  }, [collections, mergedData, setFilteredRef, setSelectedRef, getRankingBuilders, adjustRankings]);\n\n  React.useEffect(() => {\n    lineupRef.current?.data.getRankings().forEach((ranking) => {\n      const structureColumn = ranking.flatColumns.find((col) => col instanceof StructureImageColumn) as StructureImageColumn | undefined;\n      structureColumn?.setAlign(align || null);\n    })\n  }, [align]);\n\n  React.useEffect(() => {\n    if (lineupRef.current && rankingRef.current && indexMapRef.current) {\n      disableLineUpSelectionListener.current = true;\n      if (!selected) {\n        lineupRef.current.setSelection([]);\n      } else if (!isEqual(selected, lineupRef.current.getSelection())) {\n        const selectedIndices = Object.values(selected)\n          .flat()\n          .map((p) => indexMapRef.current!.get(p)!);\n        lineupRef.current.setSelection(selectedIndices);\n      }\n      onSelectionSetRef.current?.(lineupRef.current, rankingRef.current);\n      disableLineUpSelectionListener.current = false;\n    }\n  }, [selected, onSelectionSetRef]);\n\n  return (\n    <div\n      {...(innerProps || {})}\n      ref={divRef}\n      style={{\n        ...(innerProps?.style || {}),\n        flex: 1,\n        fontSize: \"smaller\",\n      }}\n    ></div>\n  );\n};\n","import {\n  ICellRendererFactory,\n  ERenderMode,\n  ICellRenderer,\n  IDataRow,\n  IRenderContext,\n  IGroupCellRenderer,\n  IOrderedGroup,\n  renderMissingDOM,\n} from \"lineupjs\";\nimport { getImageURL, getReducedImages } from \"../../utils/api\";\nimport { StructureImageColumn } from \"./StructureImageColumn\";\nimport { abortAble } from \"lineupengine\";\n\nconst template =\n  '<a target=\"_blank\" rel=\"noopener\" style=\"background-size: contain; background-position: center; background-repeat: no-repeat;\"></a>';\n\nexport function svgToImageSrc(svg: string): string {\n  return `data:image/svg+xml;base64,${btoa(svg)}`;\n}\n\nexport function svgToCSSBackground(svg: string): string {\n  return `url('${svgToImageSrc(svg)}')`;\n}\n\nexport class StructureImageRenderer implements ICellRendererFactory {\n  readonly title: string = \"Chemical Structure\";\n\n  canRender(col: StructureImageColumn, mode: ERenderMode): boolean {\n    return col instanceof StructureImageColumn && (mode === ERenderMode.CELL || mode === ERenderMode.GROUP);\n  }\n\n  create(col: StructureImageColumn): ICellRenderer {\n    return {\n      template,\n      update: (n: HTMLLinkElement, d: IDataRow) => {\n        if (!renderMissingDOM(n, col, d)) {\n          if(d.v.images?.[0]) {\n            n.style.backgroundImage = svgToCSSBackground(d.v.images[0]);\n            return;\n          }\n          const value = col.getValue(d)!;\n          // Load aysnc to avoid triggering\n          return abortAble(new Promise((resolve) => setTimeout(() => resolve(value), 500))).then((image) => {\n            if (typeof image === \"symbol\") {\n              return;\n            }\n            n.style.backgroundImage = `url('${getImageURL(value, col.getFilter()?.filter, col.getAlign())}')`;\n            n.title = value;\n            n.href = `https://pubchem.ncbi.nlm.nih.gov/#query=${value}`;\n          });\n        }\n      },\n    };\n  }\n\n  createGroup(col: StructureImageColumn, context: IRenderContext): IGroupCellRenderer {\n    return {\n      template,\n      update: (n: HTMLImageElement, group: IOrderedGroup) => {\n        context.tasks.groupRows(col, group, \"StructureImageRendererGroup\", (rows) => {\n          return abortAble(getReducedImages(Array.from(rows.map((row) => col.getLabel(row))))).then((res: any) => {\n            n.style.backgroundImage = res ? svgToCSSBackground(res) : \"\";\n          });\n        });\n      },\n    };\n  }\n}\n","import { StringColumn, IDataRow, IStringFilter, Column } from \"lineupjs\";\nimport { isEqual } from \"lodash\";\n\nexport interface IStructureFilter extends IStringFilter {\n  filter: string;\n  valid: Set<string>;\n}\n\nexport class StructureImageColumn extends StringColumn {\n  protected structureFilter: IStructureFilter | null = null;\n  protected align: string | null = null;\n\n  filter(row: IDataRow): boolean {\n    if (!this.isFiltered()) {\n      return true;\n    }\n    return this.structureFilter!.valid.has(this.getLabel(row));\n  }\n\n  isFiltered(): boolean {\n    return this.structureFilter != null && this.structureFilter.valid?.size > 0;\n  }\n\n  getFilter() {\n    return this.structureFilter!;\n  }\n\n  setFilter(filter: IStructureFilter | null) {\n    if (isEqual(filter, this.structureFilter)) {\n      return;\n    }\n\n    this.fire(\n      [StringColumn.EVENT_FILTER_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY],\n      this.structureFilter,\n      (this.structureFilter = filter)\n    );\n  }\n\n  getAlign(): string | null {\n    return this.align;\n  }\n\n  setAlign(structure: string | null): void {\n    if (isEqual(structure, this.align)) {\n      return;\n    }\n    \n    this.fire(\n      [Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY],\n      (this.align = structure)\n    );\n  }\n}\n","import * as React from \"react\";\nimport { IParticle } from \"../interfaces\";\nimport { StructureImage } from \"./StructureImage\";\n\nexport const StructureCard = React.memo(\n  ({\n    structure,\n    structures,\n    enableModeSwitch: _enableModeSwitch = true,\n    showProperties = true,\n    ...innerProps\n  }: {\n    structure: IParticle;\n    structures?: IParticle[];\n    enableModeSwitch?: boolean;\n    showProperties?: boolean;\n  } & React.HTMLAttributes<HTMLDivElement>) => {\n    const [singleMode, setSingleMode] = React.useState<boolean>(true);\n    const enableModeSwitch = _enableModeSwitch && Boolean(structures);\n\n    return (\n      <div {...innerProps} className={`card structure-card ${innerProps?.className || \"\"}`}>\n        <StructureImage\n          role={enableModeSwitch ? \"button\" : undefined}\n          title={enableModeSwitch ? \"Switch molecule view\" : undefined}\n          onClick={enableModeSwitch ? () => setSingleMode(!singleMode) : undefined}\n          className=\"card-img-top\"\n          // TODO: Support proper switching between all images\n          structure={singleMode || !enableModeSwitch ? structure.structure : structures!.map((s) => s.structure)}\n          image={singleMode || !enableModeSwitch ? structure.images?.[singleMode ? 0 : 1] : undefined}\n        />\n        <div className=\"card-body\" style={{ padding: \"0.25rem\" }}>\n          <h5 className=\"card-title text-truncate\">{structure.structure}</h5>\n          <div className=\"card-text\">\n            {showProperties\n              ? Object.entries(structure?.properties || {}).map(([key, value]) => (\n                  <div className=\"text-truncate\" title={`${key} ${value?.toLocaleString()}`}>\n                    <strong>{key}</strong> {value?.toLocaleString()}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport function LoadingPage({\n  children = null,\n  loading,\n  loadingText,\n  fallback = null,\n}: {\n  children?: React.ReactNode;\n  loading: boolean;\n  loadingText?: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  if (!loading && children) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ flexDirection: \"column\", flex: 1, overflow: \"auto\" }}\n    >\n      {loading ? (\n        <>\n          <Spinner animation=\"border\" className=\"mb-1\" />\n          {loadingText}\n        </>\n      ) : (\n        fallback\n      )}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { ICollection } from './interfaces';\n\nexport const CollectionContext = React.createContext<ICollection[]>([]);\n","import * as React from \"react\";\n\nexport function HorizontalCollapse({\n  label,\n  position,\n  collapsed,\n  setCollapsed,\n  children,\n  size,\n}: {\n  label: string;\n  position: \"left\" | \"right\";\n  collapsed: boolean;\n  size: string;\n  setCollapsed: React.Dispatch<React.SetStateAction<boolean>>;\n  children: React.ReactNode;\n}) {\n  //   const [collapsed, setCollapsed] = React.useState<boolean>(true);\n\n  const oppositePosition = position === \"right\" ? \"start\" : \"end\";\n\n  React.useEffect(() => {\n    // Trigger a resize for plotly\n    window.dispatchEvent(new Event(\"resize\"));\n  }, [collapsed]);\n\n  const collapseButton = (\n    <button\n      onClick={() => {\n        setCollapsed((collapsed) => !collapsed);\n      }}\n      style={\n        {\n          //   zIndex: 1000,\n          // position: \"absolute\",\n          // top: 0,\n          // right: collapsed ? (position === 'right' ? 0 : undefined) : 0,\n          // // [position]: collapsed ? 0 : undefined,\n          // // [oppositePosition]: collapsed ? undefined : 0,\n        }\n      }\n      className=\"btn btn-sm btn-outline-primary\"\n    >\n      <i className={`fas fa-fw fa-long-arrow-alt-${collapsed ? (position === \"right\" ? \"up\" : \"down\") : position}`}></i>{\" \"}\n      {collapsed ? label : null}\n    </button>\n  );\n\n  return (\n    <>\n      {collapsed ? (\n        <div>\n          <div\n            style={{\n              position: \"absolute\",\n              top: 50,\n              //   [oppositePosition]: '100%',\n              [position]: 0,\n              whiteSpace: \"nowrap\",\n              transform: `rotate(270deg) translate(${position === \"right\" ? \"0, -100%\" : \"-100%, 0\"})`,\n              transformOrigin: `${position} 0`,\n              zIndex: 1000,\n            }}\n          >\n            {collapseButton}\n          </div>\n        </div>\n      ) : null}\n      {collapsed ? null : (\n        <div\n          className={`${size} ${collapsed ? \"\" : `border-${oppositePosition}`}`}\n          style={{ position: \"relative\", height: \"100%\", overflow: \"auto\" }}\n        >\n          <div className=\"sticky-top\">\n            {collapseButton}\n            {children}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { ICollection, IInterpolatedParticle } from \"../../interfaces\";\nimport { interpolateStructures } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { StructureImage } from \"../StructureImage\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const InterpolationForm = ({\n    open,\n  setCollection,\n  structures,\n  setStructures,\n  loading,\n  setLoading,\n}: {\n  open?: boolean;\n  setCollection(collection: ICollection<IInterpolatedParticle>): void;\n  structures?: string[];\n  setStructures?(structures: string[]): void;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"interpolationNameInput\", \"Interpolated\");\n\n  return (\n    <FormWrapper\n      open={open}\n      title=\"Interpolate between Structures\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const validStructures = structures?.filter(Boolean);\n        if (validStructures && validStructures.length > 0) {\n          setLoading(true);\n          const serverCollection = await interpolateStructures(validStructures, 100);\n          setCollection({\n            name,\n            ...serverCollection,\n          });\n          setName(\"\");\n        }\n        setLoading(false);\n      }}\n    >\n          {nameInput}\n          <div className=\"mb-3\">\n            <label htmlFor=\"inpolationStructures\">Structures (newline separated)</label>\n            <textarea\n              className=\"form-control form-control-sm\"\n              id=\"inpolationStructures\"\n              rows={3}\n              onChange={(e) => setStructures?.(e.currentTarget.value.split(\"\\n\"))}\n              value={structures?.join(\"\\n\") || \"\"}\n            />\n          </div>\n          <div className=\"text-center\">\n            {structures && structures.length > 0\n              ? structures\n                  .map<React.ReactNode>((structure) => (\n                    <StructureImage key={structure} structure={structure} width=\"70px\" height=\"70px\" />\n                  ))\n                  .reduce((prev, curr, i) => [\n                    prev,\n                    <i key={i} className=\"fas  fa-fw fa-long-arrow-alt-end ms-2 me-2\" />,\n                    curr,\n                  ])\n              : null}\n          </div>\n          <div className=\"text-end\">\n            <button className=\"btn btn-primary\" type=\"submit\" disabled={loading}>\n              {loading ? (\n                <>\n                  <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading...\n                </>\n              ) : (\n                <>Compute Interpolation</>\n              )}\n            </button>\n          </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\n\nexport function FileUploadModal({\n  open,\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  setOpen?(show: boolean): void;\n  onSave?(value: string | null): void;\n}) {\n  const [input, setInput] = React.useState<string>(\"\");\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(input || null);\n  }, [onSave, input]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Upload dataset</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <form>\n            <div className=\"mb-3\">\n              <label htmlFor=\"customFileInput\">Either upload a file</label>\n                <input\n                  type=\"file\"\n                  className=\"form-control\"\n                  id=\"customFileInput\"\n                  onChange={(e) => {\n                    const files = Array.from(e.currentTarget.files || []);\n                    if (files.length === 1) {\n                      files[0].text().then((res) => {\n                        setInput(res);\n                      });\n                    }\n                  }}\n                />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"customFileTextarea\">Or paste the content</label>\n              <textarea\n                id=\"customFileTextarea\"\n                className=\"form-control\"\n                onChange={(e) => setInput(e.currentTarget.value)}\n                value={input.substr(0, 1000)}\n              />\n            </div>\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Upload\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { InterpolationPage } from \"./InterpolationPage\";\nimport { Navbar, Container, Form, Button, Nav } from \"react-bootstrap\";\nimport { EActiveTabs, ICollection, IInterpolatedParticle, INearestNeighbors, IParticle, IRegistry } from \"./interfaces\";\nimport { EmbeddingPage } from \"./EmbeddingPage\";\nimport { downloadJSONFile, injectGetter } from \"./utils\";\nimport { ARRAY_DISTANCE_METRICS, isProxySymbol } from \"./utils/constants\";\nimport { getRegistry } from \"./utils/api\";\nimport { FileUploadModal } from \"./components/FileUploadModal\";\nimport { CollectionContext } from \"./CollectionContext\";\n\nfunction App() {\n  const [importFileModalShow, setImportFileModalShow] = React.useState<boolean>(false);\n  const [activeTab, setActiveTab] = React.useState<EActiveTabs>(EActiveTabs.EMBEDDING);\n  const [collections, _setCollections] = React.useState<ICollection[]>([]);\n  const [registry, setRegistry] = React.useState<IRegistry | null>(null);\n  const [interpolationStructures, setInterpolationStructures] = React.useState<string[]>([\n    \"NC1CC1C(=O)c1ccc2ccccc2c1\",\n    \"O=C(CN1C(=O)CSc2ccc(S(=O)C3CC3)cc21)NCc1cccnc1\",\n  ]);\n\n  React.useEffect(() => {\n    getRegistry()\n      .then((registry) => setRegistry(registry))\n      .catch((e) => {\n        console.error(\"Error initializing registry\", e);\n      });\n  }, []);\n\n  const setCollections = React.useCallback(\n    (collections: ICollection[]) => {\n      collections.forEach((collection) => {\n        collection.data.forEach((p, i) => {\n          p.index = i;\n          p.collection = collection.name;\n        });\n        collection.data.forEach((p, i) => {\n          // Remove jaccard distances\n          Object.keys(p.properties)\n            .filter((key) => key.toLowerCase().startsWith(\"jaccard_\") || key.toLowerCase().startsWith(\"nn_diff_\"))\n            .forEach((key) => delete p.properties[key]);\n\n          Object.entries(p.nearest_neighbors || {}).forEach(([nnKey, nn]) => {\n            // Inject the actual particles into the nearest neighbors collection\n            nn.knn_particles = nn.knn_ind.map((i) => collection.data[i]);\n          });\n\n          function injectEval(p: IParticle, object: any, key: string, func: string) {\n            injectGetter(object, key, () => {\n              try {\n                return eval(func);\n              } catch {\n                return null;\n              }\n            });\n          }\n\n          function injectJaccard(object: any, key: string, embeddingName1: string, embeddingName2: string, nn: number) {\n            const nn1 = p.nearest_neighbors?.[embeddingName1];\n            const nn2 = p.nearest_neighbors?.[embeddingName2];\n            if (nn1 && nn2) {\n              injectGetter(object, key, () => {\n                const xIndices = nn1.knn_ind.slice(0, nn);\n                const yIndices = new Set(nn2.knn_ind.slice(0, nn));\n                return xIndices.filter((x) => yIndices.has(x)).length / xIndices.length;\n              });\n            } else {\n              throw Error(`Could not inject jaccard getter: ${embeddingName1} or ${embeddingName2} are undefined.`);\n            }\n          }\n\n          function injectNNDiff(\n            object: any,\n            key: string,\n            embeddingName: string,\n            property: string,\n            method: string,\n            nn: number\n          ) {\n            const nn1 = p.nearest_neighbors?.[embeddingName];\n            const value = p.properties[property];\n            if (nn1 && typeof value === \"number\") {\n              const values = nn1.knn_particles.slice(0, nn).map((p) => (p.properties[property] as number) || 0);\n              injectGetter(object, key, () => ARRAY_DISTANCE_METRICS[method]?.(value, values));\n            } else {\n              throw Error(`Could not inject nn_diff getter: ${embeddingName} is undefined or value is not a number.`);\n            }\n          }\n\n          function injectCluster(\n            object: any,\n            key: string,\n            embeddingName: string,\n          ) {\n            const cluster = p.clusters?.[embeddingName];\n            if (cluster) {\n              injectGetter(object, key, () => cluster.label);\n            } else {\n              throw Error(`Could not inject cluster getter: ${embeddingName} is undefined.`);\n            }\n          }\n\n          if (p.nearest_neighbors && !p.nearest_neighbors[isProxySymbol]) {\n            p.nearest_neighbors = new Proxy(p.nearest_neighbors, {\n              get: function (obj, prop) {\n                if (prop === isProxySymbol) {\n                  return true;\n                }\n\n                if (typeof prop === \"symbol\") {\n                  return undefined;\n                }\n\n                // console.log(\"Nearest neighbor\", obj, prop);\n                if (prop.startsWith(\"property=\") && !(prop in obj)) {\n                  const [key, property] = prop.split(\"=\");\n                  const propertyValue = p.properties[property];\n                  if (typeof propertyValue === \"number\") {\n                    const lookup = new Map(\n                      collection.data.map((particle) => [\n                        particle,\n                        Math.abs(propertyValue - (particle.properties[property]! as number)),\n                      ])\n                    );\n                    const nearestNeighbors = collection.data\n                      .sort((a, b) => lookup.get(a)! - lookup.get(b)!)\n                      .slice(1, 51);\n\n                    obj[prop] = {\n                      distance_metric: \"absolute_property_difference\",\n                      knn_dist: nearestNeighbors.map((n) => lookup.get(n)),\n                      knn_ind: nearestNeighbors.map((n) => n.index),\n                      knn_particles: nearestNeighbors,\n                    } as INearestNeighbors;\n                    // injectGetter(obj, prop, () => {})\n                  } else if (typeof propertyValue === \"string\") {\n                    const nearestNeighbors = collection.data.filter(\n                      (particle) => p !== particle && particle.properties[property] === propertyValue\n                    );\n\n                    obj[prop] = {\n                      distance_metric: \"string_equality\",\n                      knn_dist: nearestNeighbors.map((n) => 0),\n                      knn_ind: nearestNeighbors.map((n) => n.index),\n                      knn_particles: nearestNeighbors,\n                    } as INearestNeighbors;\n                  }\n                }\n                return obj[prop];\n              },\n            });\n          }\n\n          if (!p.properties[isProxySymbol]) {\n            p.properties = new Proxy(p.properties, {\n              get: function (obj, prop) {\n                if (prop === isProxySymbol) {\n                  return true;\n                }\n\n                if (typeof prop === \"symbol\") {\n                  return undefined;\n                }\n\n                try {\n                  if (prop.startsWith(\"eval=\") && !(prop in obj)) {\n                    // Pattern: eval=<URL encoded function>\n                    const [key, func] = prop.split(\"=\");\n                    injectEval(p, obj, prop, func);\n                  }\n\n                  if (prop.startsWith(\"jaccard=\") && !(prop in obj)) {\n                    // Pattern: jaccard=<emb1>=<emb2>=<nn>\n                    const [key, emb1, emb2, nn] = prop.split(\"=\");\n                    injectJaccard(obj, prop, emb1, emb2, +nn);\n                  }\n\n                  if (prop.startsWith(\"nn_diff=\") && !(prop in obj)) {\n                    // Pattern: nn_diff=<emb>=<prop>=<method>=<nn>\n                    const [key, emb, property, method, nn] = prop.split(\"=\");\n                    injectNNDiff(obj, prop, emb, property, method, +nn);\n                  }\n\n                  if (prop.startsWith(\"cluster=\") && !(prop in obj)) {\n                    // Pattern: cluster=<emb>\n                    const [key, emb] = prop.split(\"=\");\n                    injectCluster(obj, prop, emb);\n                  }\n                } catch (e) {\n                  console.error(`Error injecting ${prop} getter`, e);\n                }\n\n                return obj[prop];\n              },\n            });\n          }\n        });\n      });\n\n      _setCollections(collections);\n    },\n    [_setCollections]\n  );\n\n  const interpolationCollection = React.useMemo(\n    () => collections.find((c) => c.name === \"Interpolated\") as ICollection<IInterpolatedParticle> | undefined,\n    [collections]\n  );\n\n  const setInterpolationCollection = React.useCallback(\n    (collection: ICollection<IInterpolatedParticle>) => {\n      _setCollections((collections) => [...collections.filter((c) => c.name !== \"Interpolated\"), collection]);\n    },\n    [_setCollections]\n  );\n\n  return (\n    <CollectionContext.Provider value={collections}>\n      <div className=\"vh-100 d-flex flex-column\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Container>\n          <Navbar.Brand href=\"#home\">ChEmbVis</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <Nav className=\"me-auto\">\n                <Nav.Link\n                  href=\"#\"\n                  active={activeTab === EActiveTabs.EMBEDDING}\n                  onSelect={() => setActiveTab(EActiveTabs.EMBEDDING)}\n                >\n                  Embedding\n                </Nav.Link>\n                <Nav.Link\n                  href=\"#\"\n                  active={activeTab === EActiveTabs.INTERPOLATION}\n                  onSelect={() => setActiveTab(EActiveTabs.INTERPOLATION)}\n                >\n                  Interpolation\n                </Nav.Link>\n                <Nav.Link href=\"/datasets/\" target=\"_blank\" active={false}>\n                  Datasets\n                </Nav.Link>\n              </Nav>\n            </Nav>\n            <Form>\n              <Button\n                onClick={() => {\n                  setImportFileModalShow(true);\n                }}\n              >\n                Import\n              </Button>\n              <Button\n                className=\"ms-2\"\n                disabled={collections.length === 0}\n                onClick={() => {\n                  downloadJSONFile(collections, \"export\");\n                }}\n              >\n                Export\n              </Button>\n            </Form>\n          </Navbar.Collapse>\n  </Container>\n        </Navbar>\n        <FileUploadModal\n          open={importFileModalShow}\n          setOpen={setImportFileModalShow}\n          onSave={(value) => {\n            if (value) {\n              try {\n                setCollections(JSON.parse(value));\n                setImportFileModalShow(false);\n              } catch (e) {\n                console.error(\"Error parsing imported file.\");\n              }\n            }\n          }}\n        />\n        <div className=\"container-fluid mt-2\" style={{ flex: 1, overflow: \"auto\" }}>\n          <div className=\"row\" style={{ height: \"100%\", overflow: \"auto\", position: \"relative\" }}>\n            {activeTab === EActiveTabs.EMBEDDING ? (\n              <EmbeddingPage\n                registry={registry}\n                collections={collections}\n                setCollections={setCollections}\n                interpolationStructures={interpolationStructures}\n                setInterpolationStructures={setInterpolationStructures}\n                setActiveTab={setActiveTab}\n              />\n            ) : null}\n            {activeTab === EActiveTabs.INTERPOLATION ? (\n              <InterpolationPage\n                collection={interpolationCollection}\n                setCollection={setInterpolationCollection}\n                structures={interpolationStructures}\n                setStructures={(structures: string[]) => setInterpolationStructures(structures)}\n              />\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </CollectionContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { LoadingPage } from \"./components/LoadingPage\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { ICollection, IInterpolatedParticle } from \"./interfaces\";\nimport { HorizontalCollapse } from \"./components/HorizontalCollapse\";\nimport { InterpolationForm } from \"./components/form/InterpolationForm\";\n\nexport function InterpolationPage({\n  structures,\n  setStructures,\n  collection,\n  setCollection,\n}: {\n  structures?: string[];\n  setStructures?(structures: string[]): void;\n  collection?: ICollection<IInterpolatedParticle>;\n  setCollection(collection: ICollection<IInterpolatedParticle>): void;\n}) {\n  const [optionsCollapsed, setOptionsCollapsed] = React.useState<boolean>(false);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  return (\n    <>\n      <HorizontalCollapse\n        label=\"Options\"\n        position=\"left\"\n        size=\"col-md-2\"\n        collapsed={optionsCollapsed}\n        setCollapsed={setOptionsCollapsed}\n      >\n        <InterpolationForm open={true} setCollection={setCollection} loading={loading} setLoading={setLoading} setStructures={setStructures} structures={structures} />\n      </HorizontalCollapse>\n      <div\n        // className=\"col-md-10\"\n        style={{\n          display: \"flex\",\n          flex: 1,\n          flexDirection: \"column\",\n          overflow: \"auto\",\n          marginLeft: 33,\n        }}\n      >\n        <LoadingPage loading={loading} fallback=\"Please select structures for interpolation\">\n          {collection && collection.data.length > 0 ? (\n            <StructureCardGrid\n              collections={[collection]}\n              tableClass=\"main-ranking\"\n              structureCardProps={(structure) => ({\n                className: structure.scaffold ? \"border-primary\" : \"\"\n              })}\n            />\n          ) : null}\n        </LoadingPage>\n      </div>\n    </>\n  );\n}\n","import plotComponentFactory from \"react-plotly.js/factory\";\n// Only use Plotly Geo to reduce bundle size significantly\n// @ts-ignore\nimport Plotly from \"plotly.js-dist\";\n// Solution for using plotly.js-dist with react-plotly.js: https://github.com/plotly/react-plotly.js/issues/143\nexport const PlotComponent = plotComponentFactory(Plotly);\n\nexport const PLOTLY_CONFIG = {\n    displaylogo: false,\n    responsive: true,\n    showLink: false,\n    // showEditInChartStudio: true,\n    // plotlyServerURL: \"https://chart-studio.plotly.com\"\n};","import * as React from \"react\";\nimport { Dropdown, Button, ButtonGroup } from \"react-bootstrap\";\nimport { FileUploadModal } from \"./FileUploadModal\";\n\nexport function ButtonWithUpload({\n  loading,\n  disabled,\n  text,\n  onUploadData,\n  onUploadResult,\n}: {\n  loading?: boolean;\n  disabled?: boolean;\n  text: string;\n  onUploadData?(data: string | null): boolean | void;\n  onUploadResult?(data: string | null): boolean | void;\n}) {\n  const [uploadModalOpen, setUploadModalOpen] = React.useState<\"result\" | \"data\" | null>(null);\n  return (\n    <>\n      <FileUploadModal\n        open={Boolean(uploadModalOpen)}\n        setOpen={(open) => setUploadModalOpen(null)}\n        onSave={(value) => {\n          if (\n            (uploadModalOpen === \"result\" ? onUploadResult : uploadModalOpen === \"data\" ? onUploadData : null)?.(value)\n          ) {\n            setUploadModalOpen(null);\n          }\n        }}\n      />\n      <Dropdown as={ButtonGroup} drop=\"end\">\n        <Button variant=\"primary\" type=\"submit\" disabled={loading || disabled}>\n          {loading ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\" /> Loading...\n            </>\n          ) : (\n            text\n          )}\n        </Button>\n        {onUploadData || onUploadResult ? (\n          <>\n            <Dropdown.Toggle split variant=\"primary\" disabled={loading} />\n            <Dropdown.Menu>\n              {onUploadData ? (\n                <Dropdown.Item\n                  onClick={() => {\n                    setUploadModalOpen(\"data\");\n                  }}\n                >\n                  Upload data\n                </Dropdown.Item>\n              ) : null}\n              {onUploadResult ? (\n                <Dropdown.Item\n                  onClick={() => {\n                    setUploadModalOpen(\"result\");\n                  }}\n                >\n                  Upload precomputed result\n                </Dropdown.Item>\n              ) : null}\n            </Dropdown.Menu>\n          </>\n        ) : null}\n      </Dropdown>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\n// @ts-ignore\nimport { Jsme } from \"jsme-react\";\n\nexport function JSMEModal({\n  open,\n  initialSmiles = \"\",\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  initialSmiles?: string;\n  setOpen?(show: boolean): void;\n  onSave?(value: string | null): void;\n}) {\n  const [smiles, setSmiles] = React.useState<string>(initialSmiles);\n  const [showJSME, setShowJSME] = React.useState<boolean>(false);\n  const bodyRef = React.useRef<HTMLDivElement>(null);\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(smiles || null);\n  }, [onSave, smiles]);\n\n  React.useEffect(() => {\n    if (open) {\n      const timeout = setTimeout(() => {\n        setShowJSME(true);\n      }, 200);\n      return () => clearTimeout(timeout);\n    } else {\n      setShowJSME(false);\n    }\n  }, [open]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Draw molecule</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div ref={bodyRef}></div>\n          {showJSME ? (\n            <Jsme\n              height=\"600px\"\n              width={`${bodyRef.current?.getBoundingClientRect().width || 600}px`}\n              options=\"star\"\n              // src=\"/jsme/jsme.nocache.js\"\n              // Load the distribution from the official \"CDN\".\n              src=\"https://jsme-editor.github.io/dist/jsme/jsme.nocache.js\"\n              smiles={initialSmiles || undefined}\n              onChange={setSmiles}\n            />\n          ) : null}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { IParticle, IParticleSelection } from \"../interfaces\";\nimport { JSMEModal } from \"./JSMEModal\";\n\nexport function UseStructureInputAddon({\n  value,\n  selection,\n  setValue,\n}: {\n  value: string;\n  selection?: IParticleSelection;\n  setValue: (structure: string) => void;\n}) {\n  const selected = React.useMemo<IParticle | undefined>(\n    () => Object.values(selection || {}).find((s) => s.length > 0)?.[0],\n    [selection]\n  );\n  const [editorOpen, setEditorOpen] = React.useState<boolean>(false);\n\n  return (\n    <>\n      <JSMEModal\n        open={editorOpen}\n        setOpen={setEditorOpen}\n        initialSmiles={value}\n        onSave={(smiles) => {\n          if (smiles) {\n            setValue(smiles);\n          }\n          setEditorOpen(false);\n        }}\n      />\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          title=\"Use selected structure as input\"\n          disabled={!selected}\n          onClick={() => (selected ? setValue(selected.structure) : undefined)}\n        >\n          <i className=\"fas fa-mouse-pointer\"></i>\n        </button>\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          title=\"Draw structure\"\n          onClick={() => setEditorOpen(true)}\n        >\n          <i className=\"fas fa-draw-polygon\"></i>\n        </button>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { CurveEditor, DEFAULT_CURVE_TYPES, IPoint } from \"visyn_component_curve_editor\";\n// Include style for default styling\nimport \"visyn_component_curve_editor/dist/curveEditor.css\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent } from \"d3-array\";\n\nconst MARGIN_BOTTOM = 50;\nconst MARGIN_RIGHT = 50;\n\nconst VIEWBOX_SIZE: [number, number] = [600, 400];\n\nexport function CurveEditorModal({\n  open,\n  initialPoints = [],\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  initialPoints?: { x: number; y: number }[];\n  setOpen?(show: boolean): void;\n  onSave?(value: { x: number; y: number }[]): void;\n}) {\n  const [points, setPoints] = React.useState<IPoint[]>([]);\n  const [min, setMin] = React.useState<number>(0);\n  const [max, setMax] = React.useState<number>(1);\n  const [inputMin, setInputMin] = React.useState<number>(min);\n  const [inputMax, setInputMax] = React.useState<number>(max);\n\n  React.useEffect(() => {\n    setInputMin(min);\n    setInputMax(max);\n  }, [min, max]);\n\n  React.useEffect(() => {\n    setPoints(initialPoints.map(({ x, y }, i) => ({ id: i.toString(), x, y })));\n    const [minimum, maximum] = extent(initialPoints.map(({ x }) => x));\n    setMin(minimum ?? 0);\n    setMax(maximum ?? 1);\n  }, [initialPoints]);\n\n  const scales = React.useMemo(() => {\n    return {\n      x: scaleLinear()\n        .domain([min, max])\n        .range([0, VIEWBOX_SIZE[0] - 2 * MARGIN_RIGHT])\n        .clamp(true),\n      y: scaleLinear()\n        .domain([0, 1])\n        .range([VIEWBOX_SIZE[1] - 2 * MARGIN_BOTTOM, 0])\n        .clamp(true),\n    };\n  }, [min, max]);\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(points.map(({ x, y }) => ({ x, y })));\n  }, [onSave, points]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Draw desirability</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <form\n            className=\"row mb-2\"\n            style={{ alignItems: \"baseline\", flexFlow: \"row\", justifyContent: \"center\" }}\n            onSubmit={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setMin(inputMin);\n              setMax(inputMax);\n            }}\n          >\n            <div className=\"col mb-3 me-4\">\n              <label htmlFor=\"curveMinInput\">Minimum</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm ms-2\"\n                id=\"curveMinInput\"\n                value={inputMin}\n                onChange={(e) => setInputMin(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"col mb-3 me-4\">\n              <label htmlFor=\"curveMaxInput\">Maximum</label>\n              <input\n                type=\"number\"\n                className=\"form-control  form-control-sm ms-2\"\n                id=\"curveMaxInput\"\n                value={inputMax}\n                onChange={(e) => setInputMax(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"col\">\n              <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                Apply\n              </button>\n            </div>\n          </form>\n          <CurveEditor\n            points={points}\n            setPoints={setPoints}\n            scales={scales}\n            viewBoxSize={VIEWBOX_SIZE}\n            curveType={DEFAULT_CURVE_TYPES[\"Linear\"]}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { ICollection, IObjective, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { runMSO } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { Alert } from \"react-bootstrap\";\nimport { CurveEditorModal } from \"../CurveEditorModal\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const MSOForm = ({\n  availableObjectives,\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  availableObjectives?: IObjective[];\n  addCollection(collection: ICollection): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"msoNameInput\", \"MSO\");\n  const [msoStartingStructure, setMsoStartingStructure] = React.useState<string>(\"\");\n  const [nrOfParticles, setNrOfParticles] = React.useState<number>(50);\n  const [nrOfIterations, setNrOfIterations] = React.useState<number>(10);\n  const [nrOfSwarms, setNrOfSwarms] = React.useState<number>(5);\n  const [vMin, setVMin] = React.useState<number>(-0.6);\n  const [vMax, setVMax] = React.useState<number>(0.6);\n  const [inertiaWeight, setInertiaWeight] = React.useState<number>(0.9);\n  const [phi1, setPhi1] = React.useState<number>(2.0);\n  const [phi2, setPhi2] = React.useState<number>(2.0);\n  const [phi3, setPhi3] = React.useState<number>(2.0);\n  const [selectedObjective, setSelectedObjective] = React.useState<any | null>();\n  const [objectives, setObjectives] = React.useState<IObjective[]>([]);\n  const [desirabilityCurveObjective, setDesirabilityCurveObjective] = React.useState<IObjective | null>(null);\n\n  return (\n    <FormWrapper\n      title=\"Molecular Swarm Optimization\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const msoCollection = await runMSO({\n          structure: msoStartingStructure,\n          iterations: nrOfIterations,\n          num_swarms: nrOfSwarms,\n          num_part: nrOfParticles,\n          v_min: vMin,\n          v_max: vMax,\n          inertia_weight: inertiaWeight,\n          phi1,\n          phi2,\n          phi3,\n          objectives,\n        });\n\n        addCollection({ ...msoCollection, name });\n        setName(\"\");\n      }}\n    >\n      {desirabilityCurveObjective ? (\n        <CurveEditorModal\n          open={desirabilityCurveObjective != null}\n          initialPoints={desirabilityCurveObjective.desirability}\n          setOpen={(open) => (open ? null : setDesirabilityCurveObjective(null))}\n          onSave={(points) => {\n            setObjectives(\n              objectives.map((o) => (o === desirabilityCurveObjective ? { ...o, desirability: points } : o))\n            );\n            setDesirabilityCurveObjective(null);\n          }}\n        />\n      ) : null}\n      {nameInput}\n      {availableObjectives ? (\n        <>\n          <div className=\"mb-3\">\n            <label htmlFor=\"msoObjectivesSelect\">Objectives</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"msoObjectivesSelect\"\n                value={selectedObjective?.name}\n                onChange={(e) => {\n                  setSelectedObjective(availableObjectives.find((o) => o.name === e.currentTarget.value));\n                }}\n              >\n                <option value=\"\">Choose...</option>\n                {availableObjectives.map((o) => (\n                  <option key={o.name} value={o.name}>{o.name}</option>\n                ))}\n              </select>\n              <input\n                type=\"number\"\n                className=\"form-control-plaintext form-control-sm\"\n                required\n                value={objectives.length}\n                onChange={() => null}\n                min={1}\n                style={{\n                  flex: \"0 0 1px\",\n                }}\n              />\n                <button\n                  disabled={!selectedObjective}\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={() => setObjectives([...objectives, selectedObjective])}\n                >\n                  Add\n                </button>\n            </div>\n            <small id=\"msoObjectivesSelect\" className=\"form-text text-muted\">\n              Objectives define the optimization goal of MSO\n            </small>\n          </div>\n          <div className=\"mb-3\" style={{ overflowX: \"hidden\" }}>\n            {objectives.map((objective) => (\n              <details key={objective.name} className=\"mb-1\" open={Boolean(objective.additional_args)}>\n                <summary className=\"text-truncate\">\n                  {objective.name}{\" \"}\n                  <div className=\"btn-group btn-group-sm ms-2 me-2 float-end\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-light\"\n                      title=\"Adjust desirability curve\"\n                      onClick={() => {\n                        setDesirabilityCurveObjective(objective);\n                      }}\n                    >\n                      <i className=\"fas fa-fw fa-bezier-curve\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-danger\"\n                      title=\"Delete objective\"\n                      onClick={() => {\n                        setObjectives(objectives.filter((o) => o !== objective));\n                      }}\n                    >\n                      <i className=\"fas fa-fw fa-times\" />\n                    </button>\n                  </div>\n                </summary>\n                <small title={objective.description} className=\"text-truncate\">\n                  {objective.description}\n                </small>\n                <div className=\"d-flex\" title=\"Relative weight of objective\">\n                  {/* <label for=\"formControlRange\" className=\"form-label\">Example Range input</label> */}\n                  <input\n                    type=\"range\"\n                    className=\"form-range me-2\"\n                    min={1}\n                    max={100}\n                    step={1}\n                    value={objective.weight}\n                    onChange={(e) => {\n                      setObjectives(\n                        objectives.map((o) => (o === objective ? { ...o, weight: e.currentTarget.valueAsNumber } : o))\n                      );\n                    }}\n                  />\n                  {objective.weight}%\n                </div>\n                {Object.entries(objective.additional_args || {}).map(([key, value]) => {\n                  const setValue = (value: string) =>\n                    setObjectives(\n                      objectives.map((o) =>\n                        o === objective\n                          ? {\n                              ...o,\n                              additional_args: {\n                                ...o.additional_args,\n                                [key]: value,\n                              },\n                            }\n                          : o\n                      )\n                    );\n\n                  return (\n                    <div key={key} className=\"input-group input-group-sm\">\n                      {key === \"query\" ? (\n                        <UseStructureInputAddon value={value} selection={selection} setValue={setValue} />\n                      ) : null}\n                      <input\n                        key={key}\n                        type=\"text\"\n                        className=\"form-control form-control-sm\"\n                        placeholder={key}\n                        value={value}\n                        required={true}\n                        onChange={(e) => setValue(e.currentTarget.value)}\n                      />\n                    </div>\n                  );\n                })}\n                <hr />\n              </details>\n            ))}\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"startingStructureInput\">Starting structure</label>\n            <div className=\"input-group input-group-sm\">\n              <UseStructureInputAddon\n                value={msoStartingStructure}\n                selection={selection}\n                setValue={setMsoStartingStructure}\n              />\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm\"\n                id=\"startingStructureInput\"\n                aria-describedby=\"startingStructureInputHelp\"\n                required\n                value={msoStartingStructure}\n                onChange={(e) => setMsoStartingStructure(e.currentTarget.value)}\n              />\n            </div>\n            <small id=\"startingStructureInputHelp\" className=\"form-text text-muted\"></small>\n          </div>\n          <details>\n            <summary>Advanced Settings</summary>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfSwarmsInput\">Swarms</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfSwarmsInput\"\n                value={nrOfSwarms}\n                required\n                min={1}\n                onChange={(e) => setNrOfSwarms(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfParticlesInput\">Particles</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfParticlesInput\"\n                value={nrOfParticles}\n                required\n                min={1}\n                onChange={(e) => setNrOfParticles(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfIterationsInput\">Iterations</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfIterationsInput\"\n                value={nrOfIterations}\n                required\n                min={1}\n                onChange={(e) => setNrOfIterations(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"vMinInput\">Min Velocity</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"vMinInput\"\n                value={vMin}\n                required\n                step={0.1}\n                onChange={(e) => setVMin(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"vMaxInput\">Max Velocity</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"vMaxInput\"\n                value={vMax}\n                required\n                step={0.1}\n                onChange={(e) => setVMax(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"inertiaWeightInput\">Inertia Weight</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"inertiaWeightInput\"\n                value={inertiaWeight}\n                required\n                step={0.1}\n                onChange={(e) => setInertiaWeight(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi1Input\">Phi 1</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi1Input\"\n                value={phi1}\n                required\n                step={0.1}\n                onChange={(e) => setPhi1(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi2Input\">Phi 2</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi2Input\"\n                value={phi2}\n                required\n                step={0.1}\n                onChange={(e) => setPhi2(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi3Input\">Phi 3</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi3Input\"\n                value={phi3}\n                required\n                step={0.1}\n                onChange={(e) => setPhi3(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n          </details>\n          <div className=\"text-end\">\n            <ButtonWithUpload\n              loading={loading}\n              text=\"Run MSO\"\n              onUploadResult={(value) => {\n                if (value) {\n                  addCollection({ data: JSON.parse(value), name: \"MSO\" });\n                  return true;\n                }\n              }}\n            />\n          </div>\n        </>\n      ) : (\n        <Alert variant=\"info\">\n          <p>No objectives are available.</p>\n        </Alert>\n      )}\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { DEFAULT_COLLECTION, ICollection } from \"../../interfaces\";\nimport { embedStructures } from \"../../utils/api\";\nimport { useNameInput } from \"../../utils/hooks\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { parse } from 'papaparse';\n\nexport const ComputeEmbeddingsForm = ({\n  addCollection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"cdddNameInput\", \"\");\n  const [cdddInput, setCdddInput] = React.useState<string>(\"\");\n\n  return (\n    <FormWrapper\n      title=\"Compute Embeddings\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const structures: Parameters<typeof embedStructures>[0]['structures'] = [];\n        const additional: { [key: string]: {[key: string]: string | number | boolean} } = {};\n\n        const result = parse<{\n          smiles: string;\n          [key: string]: string | number | boolean;\n        }>(cdddInput, {\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          transformHeader: (header) => {\n            if(['smiles', 'structure', 'structures'].includes(header.trim().toLocaleLowerCase())) {\n              return 'smiles';\n            }\n            return header.trim();\n          },\n          transform: (value, field) => {\n            if(field.toString().startsWith('emb_')) {\n              // Any value starting with emb_ will be parsed as JSON, such that [1.1, 1.2, 1.3] is a valid string\n              return JSON.parse(value);\n            }\n            return value;\n          }\n        });\n\n        if(!result.meta.fields?.includes('smiles')) {\n          throw Error('No header named \"smiles\" found. Please include a header called \"smiles\" in the column of the structure.');\n        }\n\n        result.data.filter((d) => d.smiles).forEach(({smiles, ...rest}) => {\n          const embeddings: {[key: string]: number[]} = {};\n          Object.keys(rest).filter((key) => key.startsWith('emb_')).forEach((key) => {\n            embeddings[key] = rest[key] as any as number[];\n            delete rest[key];\n          })\n\n          structures.push({\n            smiles,\n            embeddings\n          });\n          additional[smiles] = rest;\n        })\n\n        const newCollection = await embedStructures({\n          structures,\n          include_embedding: false\n        });\n\n        newCollection.data = newCollection.data.map((particle) => {\n          const additionalProperties = additional[particle.original_structure!];\n          // Inject the additional properties if there are any\n          if (additionalProperties) {\n            particle.properties = {\n              ...(particle.properties || {}),\n              ...additionalProperties,\n            };\n          }\n          return particle;\n        });\n        addCollection({\n          name,\n          ...newCollection,\n        });\n        setName(\"\");\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"cdddTextarea\">Structures to convert</label>\n        <textarea\n          className=\"form-control form-control-sm\"\n          id=\"cdddTextarea\"\n          rows={3}\n          onChange={(e) => setCdddInput(e.currentTarget.value)}\n          value={cdddInput}\n        />\n        <small id=\"cdddTextareaHelp\" className=\"form-text text-muted\">\n          Any CSV file format with a header \"smiles\" is valid. You can add additional properties as columns, which will be shown in the visualizations and ranking. \n          Additionally, any column starting with \"emb_\" will be parsed as JSON (value has to be an array like \"[1.2, 1.3, 1.5, ...]\") and used as precomputed embedding.\n        </small>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload\n          loading={loading}\n          text=\"Compute\"\n          onUploadData={(value) => {\n            setCdddInput(value || \"\");\n            return true;\n          }}\n          onUploadResult={(value) => {\n            if (value) {\n              addCollection({\n                data: JSON.parse(value),\n                name: DEFAULT_COLLECTION,\n              });\n              return true;\n            }\n          }}\n        />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { hasSubstructureMatch } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\n\nexport const SubstructureMatchingForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [smarts, setSmarts] = React.useState<string>(\"\");\n\n  const computeSubstructures = async () => {\n    return Promise.all(\n      collections.map(({ data }) =>\n        hasSubstructureMatch(\n          data.map(({ structure }) => structure),\n          smarts\n        )\n      )\n    ).then((results) => {\n      setCollections(\n        collections.map((c, i) => {\n          return {\n            ...c,\n            data: c.data.map((p) => ({\n              ...p,\n              properties: {\n                ...(p.properties || {}),\n                [`Has ${smarts}`]: Boolean(results[i].validity[p.structure]),\n                [`Count ${smarts}`]: results[i].counts[p.structure] ?? 0,\n              },\n            })),\n            selection: null,\n          };\n        })\n      );\n    });\n  };\n\n  return (\n    <FormWrapper\n      title=\"Substructure Matching\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={computeSubstructures}\n    >\n      <div className=\"mb-3\">\n        <label htmlFor=\"smartsStructureInput\">Substructure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={smarts} selection={selection} setValue={setSmarts} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"smartsStructureInput\"\n            aria-describedby=\"smartsStructureInput\"\n            value={smarts}\n            onChange={(e) => setSmarts(e.currentTarget.value)}\n          />\n        </div>\n        <small id=\"smartsStructureInputHelp\" className=\"form-text text-muted\">\n          Use a SMILES or SMARTS query\n        </small>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!smarts} text=\"Compute Substructure Matches\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getTanimotoSimilarity } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\n\nexport const TanimotoForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [similarityRef, setSimilarityRef] = React.useState<string>(\"\");\n  const [similaryFP, setSimilarityFP] = React.useState<string>(\"ecfp4\");\n\n  const computeTanimotoSimilarity = () => {\n\n    if(similaryFP === \"embeddings\") {\n      setCollections(collections.map((c) => {\n        const reference: IParticle = Object.values(selection || {})?.[0]?.[0];\n        if(!reference || !reference.embedding || Object.entries(reference.embedding).length === 0) {\n          throw Error('This type of similarity requires an active selection (with precomputed embeddings)');\n        }\n        const availableEmbeddings = Object.keys(reference.embedding);\n          \n        return {\n          ...c,\n          data: c.data.map((p) => ({\n            ...p,\n            properties: {\n              ...(p.properties || {}),\n              ...(availableEmbeddings.reduce((acc, cur) => ({...acc, [`${cur} Distance ${similarityRef}`]: p.embedding?.[cur]?.reduce((acc, x, i) => {\n                const y = reference.embedding![cur][i];\n                // TODO: Implement other distance metrics (VAE requires different one...)\n                return acc - Math.pow(x - y, 2);\n              }, 0)}), {})),\n            },\n          })),\n          selection: null,\n        };\n      }));\n      return;\n    }\n\n    return Promise.all(\n      collections.map(async ({ data }) =>\n        getTanimotoSimilarity(\n          data.map((s) => s.structure),\n          similarityRef,\n          similaryFP\n        )\n      )\n    ).then((results) => {\n      setCollections(\n        collections.map((c, i) => {\n          return {\n            ...c,\n            data: c.data.map((p) => ({\n              ...p,\n              properties: {\n                ...(p.properties || {}),\n                [`${similaryFP} Distance ${similarityRef}`]: results[i].tanimoto[p.structure],\n              },\n            })),\n            selection: null,\n          };\n        })\n      );\n    });\n  };\n\n  return (\n    <FormWrapper\n      title=\"Tanimoto Similarity\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={computeTanimotoSimilarity}\n    >\n      <div className=\"mb-3\">\n        <label htmlFor=\"similarityRefStructureInput\">Reference structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={similarityRef} selection={selection} setValue={setSimilarityRef} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"similarityRefStructureInput\"\n            aria-describedby=\"similarityRefStructureInput\"\n            value={similarityRef}\n            onChange={(e) => setSimilarityRef(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3\">\n        <label htmlFor=\"similarityFingerprintInput\">Fingerprint</label>\n        <select\n          className=\"form-control form-control-sm\"\n          id=\"similarityFingerprintInput\"\n          value={similaryFP}\n          onChange={(e) => setSimilarityFP(e.currentTarget.value)}\n        >\n          <option value=\"ecfp2\">ECFP2 (Morgan Fingerprint)</option>\n          <option value=\"ecfp4\">ECFP4 (Morgan Fingerprint)</option>\n          <option value=\"cddd\">Descriptors from CDDD (ChEMBL only)</option>\n          <option value=\"embeddings\">Embeddings</option>\n        </select>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!similarityRef} text=\"Compute Similarity\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { OverlayTrigger, Popover } from \"react-bootstrap\";\nimport { Layout } from \"react-grid-layout\";\n\nexport const GridItemOptions = React.memo(\n  ({\n    gridOptions,\n    key,\n    children,\n    onClose,\n    onSettings,\n    renderInfo,\n    enableMove = true,\n  }: {\n    gridOptions?: Partial<Layout>;\n    key: string;\n    children: React.ReactNode;\n    onClose?(): void;\n    onSettings?(): void;\n    renderInfo?(): React.ReactNode;\n    enableMove?: boolean;\n  }) => (\n    <>\n      {enableMove ? (\n        <i\n          className=\"fas fa-fw fa-arrows-alt react-grid-item-hidden react-grid-item-drag-handle\"\n          title=\"Move\"\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 5,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n        {renderInfo ? (\n        <OverlayTrigger\n          trigger={[\"hover\", \"focus\"]}\n          placement=\"auto\"\n          overlay={\n            <Popover id={key}>\n              <Popover.Header as=\"h3\">Projection information</Popover.Header>\n              <Popover.Body>\n                {renderInfo()}\n              </Popover.Body>\n            </Popover>\n          }\n        >\n          <i\n            className=\"fas fa-fw fa-info-circle react-grid-item-hidden\"\n            style={{\n              position: \"absolute\",\n              zIndex: 1,\n              top: 3,\n              left: 30,\n              cursor: \"pointer\",\n            }}\n          />\n        </OverlayTrigger>\n      ) : null}\n      {onSettings ? (\n        <i\n          className=\"fas fa-fw fa-cog react-grid-item-hidden\"\n          title=\"Change settings\"\n          onClick={onSettings}\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 55,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n      {onClose ? (\n        <i\n          className=\"fas fa-fw fa-times react-grid-item-hidden\"\n          title=\"Close\"\n          onClick={onClose}\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 80,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n      {children}\n    </>\n  )\n);\n","import * as React from \"react\";\nimport GridLayout, { WidthProvider, Layout } from \"react-grid-layout\";\n\nconst SizedGridLayout = WidthProvider(GridLayout);\n\ndeclare type GridChild = React.ReactElement<{\n  key: Layout[\"i\"];\n  gridOptions?: Partial<Layout>;\n}>;\n\nexport const Grid = ({ children: _children }: { children: GridChild | GridChild[] }) => {\n  const [layout, setLayout] = React.useState<Layout[] | null>();\n\n  const children = React.useMemo(() => (!_children || Array.isArray(_children) ? _children.flat() : [_children]).filter((c) => c?.key), [\n    _children,\n  ]);\n\n  React.useEffect(() => {\n    const validChildren = children.filter((c) => c?.key != null);\n    const missingLayout = validChildren.filter((c) => !layout?.find((l) => l.i === c.key));\n\n    if (missingLayout.length > 0) {\n      setLayout([\n        ...(layout?.filter((l) => validChildren.find((c) => c.key === l.i)) || []),\n        ...missingLayout.map((c, i) => ({\n          // @ts-ignore\n          i: c.key as string,\n          h: 15,\n          w: 6,\n          x: i % 2 === 0 ? 0 : 6,\n          y: 1,\n          ...(c?.props?.gridOptions || {}),\n        })),\n      ]);\n    }\n  }, [children, layout]);\n\n  return layout ? (\n    <SizedGridLayout\n      draggableHandle=\".react-grid-item-drag-handle\"\n      cols={12}\n      rowHeight={10}\n      className=\"flex-fill\"\n      // preventCollision={true}\n      verticalCompact={true}\n      layout={layout}\n      compactType=\"horizontal\"\n      onLayoutChange={(layout) => {\n        window.dispatchEvent(new Event(\"resize\"));\n        setLayout(layout);\n      }}\n    >\n      {children.map((c) => (\n        <div key={c.key}>{c}</div>\n      ))}\n    </SizedGridLayout>\n  ) : null;\n};\n","import * as React from \"react\";\nimport { Figure } from \"react-plotly.js\";\nimport { ICollection, IParticleSelection } from \"../interfaces\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { max, min } from \"d3-array\";\nimport Select, { OptionsType } from \"react-select\";\nimport isEqual from \"lodash.isequal\";\nimport { GridItemOptions } from \"./GridItemOptions\";\nimport { Grid } from \"./Grid\";\nimport { DEFAULT_COLORWAY } from \"../utils/constants\";\n\nexport interface IParallelCoordinatesPlotProps {\n  collections: ICollection[];\n  selection: IParticleSelection;\n  setSelection(selected: IParticleSelection): void;\n  /**\n   * Currently filtered selection. If passed, only the coordinates of filtered items are shown.\n   */\n  filterSelection?: IParticleSelection;\n}\n\ninterface ISelectOption {\n  label: string;\n  value: string;\n  order: \"asc\" | \"desc\";\n}\n\nexport const ParallelCoordinatesPlot = React.memo(({ collections, selection, setSelection, filterSelection }: IParallelCoordinatesPlotProps) => {\n  const [figureState, setFigureState] = React.useState<Figure | null>(null);\n  const [enabledProperties, setEnabledProperties] = React.useState<OptionsType<ISelectOption>>([]);\n  const [colorProperty, setColorProperty] = React.useState<ISelectOption | null>(null);\n  // const [selection, setSelection] = React.useState<IParticleSelection | null>(null);\n  const [constraintRange, setConstraintRange] = React.useState<{ [key: string]: [number, number][] } | null>(null);\n\n  const filteredCollections = React.useMemo(() => collections.filter((c) => !c.hidden), [collections]);\n  const availableProperties = React.useMemo(\n    () =>\n      Array.from(\n        new Set(\n          filteredCollections\n            .map((c) =>\n              Object.keys(c.data[0]?.properties || {})\n                // TODO: Find other condition\n                // .filter(([key, value]) => typeof value === \"number\")\n                // .map(([key, value]) => key)\n            )\n            .flat()\n        )\n      ),\n    [filteredCollections]\n  );\n\n  React.useEffect(() => {\n    // Cleanup\n    // setFilterSelection(null);\n    setConstraintRange(null);\n    // setSelection(null);\n  }, [filteredCollections, enabledProperties]);\n\n  React.useEffect(() => {\n    setFigureState((figureState) => {\n      if (enabledProperties.length < 2) {\n        return null;\n      }\n\n      const filtered = Object.values(filterSelection || {}).flat();\n      const all = filtered.length > 0 ? filtered : filteredCollections.map((c) => c.data).flat();\n\n      const newFigureState: Figure = {\n        frames: [],\n        layout: {\n          ...(figureState?.layout || {}),\n          autosize: true,\n          colorway: DEFAULT_COLORWAY\n        },\n        data: [\n          {\n            // @ts-ignore\n            type: \"parcoords\",\n            line: {\n              //   // TODO Make semi-transparent,\n              // @ts-ignore\n              showscale: colorProperty ? true : false,\n              // If we don't have a numeric scale, use a color map for the filteredCollections instead\n              colorscale: colorProperty ? \"Portland\" : filteredCollections.map((c, i) => [i, DEFAULT_COLORWAY[i]]),\n              color: colorProperty ? all.map((p) => p.properties![colorProperty.value] as number) : filteredCollections.map((c, i) => Array(c.data.length).fill(i.toString())).flat(),\n            },\n            // @ts-ignore\n            dimensions: [\n              ...enabledProperties.map(({ value, order }) => {\n                const values = all.map((p) => p.properties![value] as number);\n                const minValue = min(values);\n                const maxValue = max(values);\n                if (minValue == null || maxValue == null) {\n                  return null;\n                }\n                const range = [Math.min(0, minValue), maxValue];\n\n                return {\n                  range: order === \"desc\" ? range : range.reverse(),\n                  constraintrange: constraintRange?.[value],\n                  values,\n                  label: value,\n                };\n              }),\n            ],\n          },\n        ],\n      };\n      return newFigureState;\n    });\n  }, [filteredCollections, filterSelection, enabledProperties, constraintRange, colorProperty]);\n\n  return (\n    <div className=\"d-flex flex-column flex-fill\">\n      <form>\n        <div className=\"row\">\n          <div className=\"col-md-10 mb-3\">\n            <label htmlFor=\"propertiesSelect\">Properties</label>\n            <Select<ISelectOption, true>\n              menuPosition=\"fixed\"\n              isMulti\n              className=\"mb-3\"\n              name=\"propertiesSelect\"\n              value={enabledProperties}\n              onChange={(e) => {\n                setEnabledProperties(e);\n              }}\n              options={availableProperties.map((p) => ({\n                value: p,\n                label: p,\n                order: \"desc\",\n              }))}\n              openMenuOnClick={false}\n              closeMenuOnSelect={false}\n              formatOptionLabel={(option, meta) => {\n                if (meta.context === \"value\") {\n                  return (\n                    <div className=\"d-flex flex-row align-items-center\">\n                      <span title={option.label} className=\"text-truncate\" style={{ maxWidth: 150 }}>\n                        {option.label}\n                      </span>\n                      <i\n                        role=\"button\"\n                        title=\"Change axis order\"\n                        className={`fas fa-fw fa-sort-amount-${option.order === \"asc\" ? \"up-alt\" : \"down\"} ms-1 me-1 `}\n                        onClick={(e) => {\n                          setEnabledProperties(\n                            enabledProperties.map((p) =>\n                              p === option\n                                ? {\n                                    ...p,\n                                    order: p.order === \"asc\" ? \"desc\" : \"asc\",\n                                  }\n                                : p\n                            )\n                          );\n                        }}\n                      />\n                    </div>\n                  );\n                }\n                return option.label;\n              }}\n            />\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <label htmlFor=\"colorBySelect\">Color By</label>\n            <Select<ISelectOption, false>\n              menuPosition=\"fixed\"\n              className=\"mb-3\"\n              name=\"colorBySelect\"\n              value={colorProperty}\n              isClearable={true}\n              onChange={(e) => {\n                setColorProperty(e);\n              }}\n              options={availableProperties.map((p) => ({\n                value: p,\n                label: p,\n                order: \"desc\",\n              }))}\n            />\n          </div>\n        </div>\n      </form>\n\n      {figureState ? (\n        <>\n          <Grid>\n            <GridItemOptions\n              enableMove={false}\n              key=\"parcoordsGridItem\"\n              gridOptions={{\n                w: 12,\n                h: 25,\n                y: 0,\n                x: 0,\n              }}\n            >\n            <i\n              className=\"fas fa-fw fa-sync-alt react-grid-item-hidden\"\n              title=\"Sync global selection with plot (up to 1000)\"\n              onClick={() => {\n                const allSelected = Object.values(selection || {}).flat();\n                if (allSelected.length <= 1000) {\n                  // If we have below a certain threshold of items, we can create the constraint range for each individual one\n                  setConstraintRange(\n                    enabledProperties.reduce((acc, { value }) => {\n                      return {\n                        ...acc,\n                        [value]: allSelected.map((p) => p.properties![value] as number).map((v) => [v, v + 0.0001]),\n                      };\n                    }, {})\n                  );\n                } else {\n                  setConstraintRange(null);\n                  // TODO: Check if current range is sufficient for current selection\n                  // setConstraintRange((currentRange) => {\n                  //   const allIncluded = allSelected.every((p) => Object.entries(currentRange || {}).every(([key, allRanges]) => {\n                  //     return allRanges.some(\n                  //       (range) => p.properties?.[key]! >= range[0] && p.properties?.[key]! <= range[1]\n                  //     );\n                  //   }));\n                  //   return allIncluded ? currentRange : null;\n                  // });\n                }\n              }}\n              style={{\n                position: \"absolute\",\n                zIndex: 1,\n                top: 3,\n                left: 55,\n                cursor: \"pointer\",\n              }}\n            />\n            <i\n              className=\"fas fa-fw fa-ban react-grid-item-hidden\"\n              title=\"Clear selection\"\n              onClick={() => {\n                setConstraintRange(null);\n              }}\n              style={{\n                position: \"absolute\",\n                zIndex: 1,\n                top: 3,\n                left: 80,\n                cursor: \"pointer\",\n              }}\n            />\n              <PlotComponent\n                style={{\n                  width: \"99%\",\n                  height: \"100%\",\n                }}\n                data={figureState.data}\n                layout={figureState.layout}\n                config={PLOTLY_CONFIG}\n                onRestyle={() => {\n                  // @ts-ignore\n                  const filter: { [key: string]: [number, number][] } = figureState.data[0].dimensions\n                    // @ts-ignore\n                    .filter((dim) => dim?.constraintrange)\n                    .reduce(\n                      // @ts-ignore\n                      (acc, cur) =>\n                        cur.constraintrange?.length > 0 ? { ...acc, [cur.label]: typeof cur.constraintrange[0] === 'number' ? [cur.constraintrange] : cur.constraintrange } : acc,\n                      {}\n                    );\n\n                  if (Object.entries(filter).length > 0) {\n                    const valid = filteredCollections.reduce(\n                      (acc, c) => ({\n                        ...acc,\n                        [c.name]: c.data.filter((p) =>\n                          Object.entries(filter).every(([key, allRanges]) => {\n                            return allRanges.some(\n                              (range) => p.properties?.[key]! >= range[0] && p.properties?.[key]! <= range[1]\n                            );\n                          })\n                        ),\n                      }),\n                      {}\n                    );\n                    setConstraintRange(filter);\n                    setSelection(Object.entries(valid).length > 0 ? valid : null);\n                  } else {\n                    setConstraintRange(null);\n                    setSelection(null);\n                  }\n                }}\n                onUpdate={(figure) => {\n                  // Synchronize ordering of parallel coordinates with select\n                  // @ts-ignore\n                  const newOrdering: string[] = figure.data?.[0].dimensions.filter(Boolean).map((d) => d.label);\n                  if (\n                    newOrdering &&\n                    !isEqual(\n                      newOrdering,\n                      enabledProperties.map((e) => e.value)\n                    )\n                  ) {\n                    setEnabledProperties(\n                      newOrdering.map((value) => enabledProperties.find((e) => e.value === value)!).filter(Boolean)\n                    );\n                  }\n                  // Inline save the figure to save the zoom\n                  //   figureState.data = figure.data;\n                  //   figureState.frames = figure.frames;\n                  //   figureState.layout = figure.layout;\n                }}\n              />\n            </GridItemOptions>\n          </Grid>\n        </>\n      ) : (\n        <p>Please select at least 2 properties from the dropdown.</p>\n      )}\n    </div>\n  );\n});\n","import { buildRanking, NumberColumn, Ranking, Taggle } from \"lineupjs\";\nimport * as React from \"react\";\nimport Select from \"react-select/creatable\";\nimport { ICollection, INearestNeighbors, IParticle, IParticleSelection } from \"../interfaces\";\nimport { normalizeArray, toNumber } from \"../utils\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureImageColumn } from \"./ranking/StructureImageColumn\";\nimport { StructureImage } from \"./StructureImage\";\n\nfunction getKNNByMetric(\n  particles: IParticle[],\n  reference: IParticle,\n  getter: (particle: IParticle) => number\n): INearestNeighbors {\n  const values = particles.map((particle) => getter(particle));\n  const referenceValue = getter(reference);\n  const difference = values\n    .map((value, index) => ({ diff: Math.abs(value - referenceValue), index }))\n    .sort((a, b) => a.diff - b.diff)\n    .slice(0, 50);\n  return {\n    distance_metric: \"absolute_difference\",\n    knn_ind: difference.map(({ index }) => index),\n    knn_dist: difference.map(({ diff }) => diff),\n    knn_particles: difference.map(({ index }) => particles[index]),\n  };\n}\n\nexport function LocalNeighborhoodPlot({\n  selected,\n  collection,\n}: //   setHover,\n//   hover,\n{\n  selected: IParticle | null | undefined;\n  collection: ICollection | null | undefined;\n  setHover(hover: IParticle | null): void;\n  hover: IParticle | null;\n}) {\n  const [hover, setHover] = React.useState<IParticle | null>(null);\n  const [selection, setSelection] = React.useState<Set<IParticle>>(new Set());\n  const [referenceEmbedding, setReferenceEmbedding] = React.useState<string>(\"\");\n  const [enabledEmbeddings, setEnabledEmbeddings] = React.useState<string[]>([]);\n\n  React.useEffect(() => {\n    setHover(null);\n    setSelection(new Set());\n  }, [selected]);\n\n  const allAvailableProperties = React.useMemo(() => Object.keys(selected?.properties || {}), [selected]);\n  /* const allAvailableEmbeddings = React.useMemo(\n    () =>\n      Object.entries({\n        ...(selected?.nearest_neighbors || {}),\n        // TODO: Enable to allow properties as \"distance\"\n        // ...Object.fromEntries(\n        //   collection && selected\n        //     ? allAvailableProperties\n        //         .filter(([key, value]) => typeof value === \"number\")\n        //         .map(([key, value]) => [\n        //           key,\n        //           getKNNByMetric(collection.data, selected, (p) => p.properties[key] as number),\n        //         ])\n        //     : []\n        // ),\n      }),\n    [selected, collection, allAvailableProperties]\n  ); */\n\n  const filteredAvailableEmbeddings = React.useMemo(\n    () =>\n      enabledEmbeddings.length === 0 || !selected\n        ? []\n        : enabledEmbeddings\n            .map((e) => [e, selected.nearest_neighbors?.[e]!] as [string, INearestNeighbors])\n            .filter(([key, value]) => key && value),\n    [enabledEmbeddings, selected]\n  );\n\n  const getRankingBuilders = React.useCallback(() => {\n    // For each available embedding, create a ranking\n    return filteredAvailableEmbeddings.map(([key, value], i) => {\n      const rankingBuilder = buildRanking();\n      // rankingBuilder.column('_rank');\n      rankingBuilder.column(\"structure\");\n      if (i === 0) {\n        rankingBuilder.column(\"Occurances\");\n      }\n      rankingBuilder.column(`Distance_${key}`);\n      rankingBuilder.sortBy(`Distance_${key}`);\n      // rankingBuilder.allColumns();\n      return rankingBuilder;\n    });\n  }, [filteredAvailableEmbeddings]);\n\n  const adjustRankings = React.useCallback((lineup: Taggle, rankings: Ranking[]) => {\n    rankings.forEach((ranking) => {\n      const distanceColumn = ranking.flatColumns.find(\n        (col) => col instanceof NumberColumn && col.desc.label.toLowerCase().startsWith(\"distance\")\n      ) as NumberColumn | undefined;\n      // distanceColumn\n      distanceColumn?.setFilter({\n        filterMissing: true,\n        min: -Infinity,\n        max: Infinity,\n      });\n      // distanceColumn?.on(\"filterChanged\", (prev, current) => console.log(current));\n    });\n  }, []);\n\n  // Compute the \"histogram\" of index occurances --> the more often it occurs, the \"better\" the neighbor is\n  const indexOccurances = React.useMemo(\n    () =>\n      filteredAvailableEmbeddings.reduce<{ [index: number]: number }>((acc, [key, value]) => {\n        value.knn_ind.forEach((v) => {\n          acc[v] = (acc[v] || 0) + 1;\n        });\n        return acc;\n      }, {}),\n    [filteredAvailableEmbeddings]\n  );\n\n  const selectionCollections = React.useMemo(\n    () => [\n      {\n        name: \"Selection\",\n        data: (selection.size > 0\n          ? Array.from(selection)\n          : Array.from(new Set(filteredAvailableEmbeddings.map(([key, value]) => value.knn_particles).flat()))\n        ).map((p) => ({\n          ...p,\n          // Additionally store the original particle as reference for selection synchronization\n          originalParticle: p,\n          properties: {\n            Occurances: filteredAvailableEmbeddings\n              .filter(([key, value]) => value.knn_particles.includes(p))\n              .map(([key, value]) => key!) as any,\n            ...p.properties,\n            ...filteredAvailableEmbeddings.reduce<{ [key: string]: number | null }>((acc, [key, value]) => {\n              const index = value.knn_particles.indexOf(p);\n              acc[`Distance_${key}`] = index >= 0 ? value.knn_dist[index] : null;\n              return acc;\n            }, {}),\n          },\n        })),\n      },\n    ],\n    [selection, filteredAvailableEmbeddings]\n  );\n\n  const setSelectedFromLineup = React.useCallback(\n    (selection: IParticleSelection) =>\n      setHover(\n        // @ts-ignore\n        Object.values(selection || {}).flat()?.[0]?.originalParticle\n      ),\n    []\n  );\n\n  const normalizedDistances = React.useMemo(\n    () =>\n      Object.fromEntries(\n        filteredAvailableEmbeddings.map(([key, value]) => [key, normalizeArray(value.knn_dist, [0, 1])])\n      ),\n    [filteredAvailableEmbeddings]\n  );\n  const referenceIndexToDist = React.useMemo(() => {\n    const referenceNN = selected?.nearest_neighbors?.[referenceEmbedding];\n    return referenceNN && normalizedDistances[referenceEmbedding]\n      ? Object.fromEntries(referenceNN.knn_ind.map((cur, i) => [cur, normalizedDistances[referenceEmbedding][i]]))\n      : null;\n  }, [selected, referenceEmbedding, normalizedDistances]);\n\n  const plotDataLines = React.useMemo(() => {\n    const data: Partial<Plotly.PlotData>[] = [];\n    // For all embedding pairs (y-values)\n    filteredAvailableEmbeddings.forEach(([key, value], i) => {\n      if (i < 1) {\n        return;\n      }\n      const [previousKey, previousValue] = filteredAvailableEmbeddings[i - 1];\n      const previousInd = new Set(previousValue.knn_ind);\n      // console.log(selection.size > 0\n      //   ? value.knn_particles.map((v, i) => (selection.has(v) ? i : null)).filter((i) => i != null)\n      //   : undefined);\n      // Go through all nearest neighbors\n      value.knn_ind.forEach((ind, i) => {\n        // Check if the nearest neighbor is also in the previous track\n        if (previousInd.has(ind) && (selection.size === 0 || selection.has(value.knn_particles[i]))) {\n          // Retrieve the x values for the current and previous track\n          const x = normalizedDistances[key][i];\n          const previousX = normalizedDistances[previousKey][previousValue.knn_ind.indexOf(ind)];\n          // Add a line to the plot for exactly this pair\n          data.push({\n            x: [previousX, x],\n            y: [previousKey, key],\n            type: \"scatter\",\n            mode: \"lines\",\n            showlegend: false,\n            legendgroup: \"Pairwise Connections\",\n            opacity: Math.abs(previousX - x) / (value.knn_ind.length / 5),\n            line: {\n              color: \"gray\",\n            },\n          });\n        }\n      });\n    });\n    return data;\n  }, [filteredAvailableEmbeddings, normalizedDistances, selection]);\n\n  const plotDataSelection = React.useMemo<Partial<Plotly.PlotData>[]>(() => {\n    const selectedXValues = hover\n      ? filteredAvailableEmbeddings.map(([key, value], i) => {\n          const index = value.knn_particles.indexOf(hover);\n          return index >= 0 ? normalizedDistances[key][index] : NaN;\n        })\n      : null;\n\n    if (selectedXValues) {\n      return [\n        {\n          x: selectedXValues.map((v) => (isNaN(v) ? 1 : v)),\n          y: filteredAvailableEmbeddings.map(([key, value]) => key),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          showlegend: false,\n          line: {\n            color: \"gold\",\n          },\n          marker: {\n            color: selectedXValues.map((v) => (isNaN(v) ? \"red\" : \"gold\")),\n            // size: selectedXValues.map((v) => isNaN(v) ? 0 : 10)\n          },\n        },\n      ];\n    }\n    return [];\n  }, [filteredAvailableEmbeddings, hover, normalizedDistances]);\n\n  const plotDataScatter = React.useMemo(() => {\n    return filteredAvailableEmbeddings.map(([key, value], i) => {\n      // By default, color each point by the number of occurances in the different embeddings\n      let color: Plotly.Color = value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length);\n      //   If we have a reference, color each point by the position in the reference embedding\n      if (referenceIndexToDist) {\n        color = value.knn_ind.map((ind) => referenceIndexToDist[ind] || NaN);\n      } else if (referenceEmbedding) {\n        color = value.knn_particles.map((p) => toNumber(p.properties[referenceEmbedding]));\n      }\n\n      return {\n        x: normalizedDistances[key],\n        y: value.knn_dist.map(() => key),\n        text: value.knn_dist.map((dist) => `${dist} (${value.distance_metric})`),\n        hoverinfo: \"none\" as const,\n        name: key,\n        type: \"scatter\" as const,\n        mode: \"markers\" as const,\n        customdata: value.knn_particles.map((p) => p.index!),\n        selectedpoints:\n          selection.size > 0\n            ? value.knn_particles.map((v, i) => (selection.has(v) ? i : null)).filter((i) => i != null)\n            : undefined,\n        showlegend: false,\n        showscale: true,\n        // line: {\n        //   width: 0\n        // },\n        marker: {\n          //   opacity: value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length),\n          opacity: 0.4,\n          //   color: value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length),\n          color,\n          coloraxis: \"coloraxis\",\n        },\n      };\n    });\n  }, [\n    filteredAvailableEmbeddings,\n    indexOccurances,\n    normalizedDistances,\n    referenceEmbedding,\n    referenceIndexToDist,\n    selection,\n  ]);\n\n  const data: Partial<Plotly.PlotData>[] = [...plotDataLines, ...plotDataSelection, ...plotDataScatter];\n\n  const getPointsFromEvent = (e: Pick<Plotly.PlotMouseEvent, \"points\">): IParticle[] => {\n    console.log(e?.points);\n    return collection\n      ? Array.from(\n          new Set(e?.points?.sort((a, b) => +a.x! - +b.x!)?.map((p) => collection.data[p.customdata as number]))\n        ).filter(Boolean)\n      : [];\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column\"\n      style={{\n        position: \"relative\",\n        // overflowY: 'scroll',\n        // minHeight: 500\n      }}\n    >\n      <p className=\"text-muted\">\n        Inspect the nearest neighbors in the embedding spaces of the selected or hovered structure. Each embedding shows\n        the top-N nearest neighbors according to its distance metric. Generally, the color encodes in how many\n        embeddings a specific neighbor is also listed as neighbor, or if a reference embedding is given, it shows the\n        color of the position in the reference embedding (or black if it is no common neighbor).\n      </p>\n      {selected && collection ? (\n        <>\n          <div className=\"row\">\n            <div className=\"col d-flex flex-column align-items-center justify-content-center\">\n              <strong>Selected</strong>\n              {selected?.structure ? <StructureImage style={{ width: \"100%\" }} structure={selected.structure} align={undefined /* selected?.structure */} /> : null}\n            </div>\n            <div className=\"col d-flex flex-column align-items-center\">\n              <strong>Hovered</strong>\n              {hover?.structure ? (\n                <StructureImage style={{ width: \"100%\" }} structure={hover.structure} align={undefined /* selected?.structure */} />\n              ) : null}\n            </div>\n            <div className=\"col d-flex flex-column align-items-center\">\n              <strong>Similarity Map</strong>\n              {selected?.structure && hover?.structure ? (\n                <StructureImage\n                  style={{ width: \"100%\" }}\n                  structure={[selected.structure, hover.structure]}\n                  align={selected?.structure}\n                />\n              ) : null}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-8 mb-3\">\n              <label>Enabled embeddings</label>\n              <Select<{ label: string; value: string }, true>\n                menuPosition=\"fixed\"\n                isMulti\n                value={enabledEmbeddings.map((p) => ({\n                  label: p,\n                  value: p,\n                }))}\n                onChange={(e) => {\n                  setEnabledEmbeddings(e.map((p) => p.value));\n                }}\n                options={[\n                  ...Object.entries(selected?.nearest_neighbors || {}).map(([key, value]) => ({\n                    label: `${key} (${value.distance_metric})`,\n                    value: key,\n                  })),\n                  ...allAvailableProperties.map((property) => ({\n                    label: `Property: ${property}`,\n                    value: property,\n                  })),\n                ]}\n                closeMenuOnSelect={false}\n              />\n            </div>\n            <div className=\"col-md-4 mb-3\">\n              <label>Color by</label>\n              <Select<{ label: string; value: string }, false>\n                menuPosition=\"fixed\"\n                value={\n                  referenceEmbedding\n                    ? {\n                        label: referenceEmbedding,\n                        value: referenceEmbedding,\n                      }\n                    : null\n                }\n                isClearable={true}\n                onChange={(e) => {\n                  setReferenceEmbedding(e?.value || \"\");\n                }}\n                options={[\n                  ...Object.entries(selected?.nearest_neighbors || {})\n                    .map(([key, value]) => key)\n                    .map((key) => ({\n                      label: key,\n                      value: key,\n                    })),\n                  ...allAvailableProperties.map((property) => ({\n                    label: `Property: ${property}`,\n                    value: `property=${property}`,\n                  })),\n                ]}\n              />\n            </div>\n          </div>\n          {data.length > 0 ? (\n            <>\n              <PlotComponent\n                className=\"mt-3 mb-5\"\n                style={{ width: \"100%\", height: filteredAvailableEmbeddings.length * 40 + 50 }}\n                data={data}\n                layout={{\n                  dragmode: \"lasso\",\n                  hovermode: \"closest\",\n                  autosize: true,\n                  legend: {\n                    // x: 1,\n                    // xanchor: \"right\",\n                    // y: 1,\n                    orientation: \"h\",\n                  },\n                  // @ts-ignore\n                  coloraxis: {\n                    // cmin: referenceIndexToDist ? undefined : 0,\n                    // cmax: referenceIndexToDist ? undefined : 1,\n                    colorscale: \"Portland\",\n                    // reversescale: true,\n                    colorbar: {\n                      title: \"Distance\",\n                      titleside: \"top\",\n                      thickness: 10,\n                      outlinewidth: 0,\n                      lenmode: \"fraction\",\n                      len: 0.75,\n                      yanchor: \"center\",\n                    },\n                  },\n                  scene: {\n                    aspectmode: \"data\",\n                  },\n                  margin: {\n                    // l: 250,\n                    r: 0,\n                    b: 0,\n                    t: 50,\n                    // pad: 4,\n                  },\n                  yaxis: {\n                    categoryorder: \"array\",\n                    categoryarray: filteredAvailableEmbeddings.map(([key, value]) => key).reverse(),\n                  },\n                }}\n                config={PLOTLY_CONFIG}\n                onSelected={(e) => {\n                  setSelection(new Set(getPointsFromEvent(e)));\n                }}\n                onHover={(e) => {\n                  setHover(getPointsFromEvent(e)?.[0]);\n                }}\n                onUnhover={() => {\n                  setHover(null);\n                }}\n              />\n              <div style={{ flex: \"1 1 500px\", display: \"flex\", overflow: \"auto\" }}>\n                {selectionCollections ? (\n                  <LineupWrapper\n                    collections={selectionCollections}\n                    setSelected={setSelectedFromLineup}\n                    // align={hover?.structure}\n                    getRankingBuilders={enabledEmbeddings.length <= 1 ? undefined : getRankingBuilders}\n                    adjustRankings={enabledEmbeddings.length === 0 ? undefined : adjustRankings}\n                  />\n                ) : null}\n              </div>\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport Select from \"react-select/creatable\";\nimport { ICollection, IParticle, IParticleSelection } from \"../interfaces\";\nimport { Tooltip } from \"../utils/hooks\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureImage } from \"./StructureImage\";\n\nconst LAYOUT: Partial<Plotly.Layout> = {\n  dragmode: \"lasso\",\n  hovermode: \"closest\",\n  autosize: true,\n  margin: {\n    // l: 250,\n    r: 0,\n    b: 0,\n    t: 50,\n    // pad: 4,\n  },\n};\n\nexport const GroupFlowSankeyPlot = React.memo(({\n  collections,\n  selection,\n}: //   setHover,\n//   hover,\n{\n  selection: IParticleSelection;\n  collections: ICollection[];\n}) => {\n  const [collection, setCollection] = React.useState<ICollection | null>(null);\n  const [enabledProperties, setEnabledProperties] = React.useState<string[]>([]);\n  const [selectionCollections, setSelectionCollections] = React.useState<ICollection[]>([]);\n  const allAvailableProperties = React.useMemo(() => Object.keys(collection?.data?.[0]?.properties || {}), [collection]);\n  const [hover, setHover] = React.useState<IParticle[] | null>(null);\n\n  const data = React.useMemo<Partial<Plotly.PlotData>[][]>(() => {\n    \n    if (!collection || enabledProperties.length < 2) {\n      return [];\n    }\n\n    const map = new Map<IParticle, number[]>();\n    // Each unique value has to have a unique id, i.e. running index in this case. Otherwise, one could not distinguish the same labels of different properties.\n    let valueIndex = 0;\n    const labels: string[] = [];\n    enabledProperties.forEach((property, i) => {\n      const valueLookup = new Map<string, number>();\n      collection.data.forEach((d) => {\n        const value = `${d.properties[property]}`;\n        if (!valueLookup.has(value)) {\n          valueLookup.set(value, valueIndex++);\n          labels.push(`${value}`);\n        }\n\n        if (!map.has(d)) {\n          map.set(d, []);\n        }\n        map.get(d)![i] = valueLookup.get(value)!;\n      });\n\n      valueLookup.clear();\n    });\n\n    // Add selection (if any)\n    const selected = selection?.[collection.name];\n    if(selected) {\n      selected.forEach((particle) => {\n        map.get(particle)?.push(valueIndex);\n      });\n\n      // Add to labels, increase value index\n      labels.push(\"Selection\");\n      valueIndex++;\n    }\n\n    const matrix: IParticle[][][] = new Array(valueIndex).fill(null).map(() => []);\n    map.forEach((assignments, particle) => {\n      assignments.slice(1).forEach((next, currentIndex) => {\n        const current = assignments[currentIndex];\n        matrix[current][next] = matrix[current][next] || [];\n        matrix[current][next].push(particle);\n      });\n    });\n\n    const link = {\n      source: [] as number[],\n      target: [] as number[],\n      value: [] as number[],\n      customdata: [] as IParticle[][]\n    };\n    matrix.forEach((toValues, from) => {\n      toValues.forEach((particles, to) => {\n        link.source.push(from);\n        link.target.push(to);\n        link.value.push(particles.length);\n        link.customdata.push(particles);\n      });\n    });\n\n    console.log(matrix);\n\n    return [[\n      {\n        type: \"sankey\",\n        orientation: \"h\",\n        arrangement: \"fixed\",\n        // @ts-ignore\n        node: {\n          // pad: 15,\n          // thickness: 30,\n          // line: {\n          // color: \"black\",\n          // width: 0.5,\n          // },\n          label: labels,\n          // groups: [[1,2,3, 4,5,6,7,8,9]]\n          // color: [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\n          customdata: matrix.map((to, i) => (to[i] || []).flat())\n        },\n        link: {\n          ...link,\n          // color: 'rgba(200, 200, 200, 10)'\n        },\n      },\n    ]];\n  }, [selection, collection, enabledProperties]);\n\n  return (\n    <div\n      className=\"d-flex flex-column\"\n      style={{\n        position: \"relative\",\n        // overflowY: 'scroll',\n        // minHeight: 500\n      }}\n    >\n      <Tooltip>\n        {hover ? <StructureImage structure={hover.map((h) => h.structure)}\n            style={{\n              width: 180,\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }} /> : null}\n      </Tooltip>\n      <p className=\"text-muted\"></p>\n      <div className=\"row\">\n        <div className=\"col-md-3 mb-3\">\n          <label>Collection</label>\n          <Select<{ label: string; value: ICollection }>\n            menuPosition=\"fixed\"\n            value={collection ? { label: collection.name, value: collection } : null}\n            onChange={(e) => {\n              setCollection(e?.value || null);\n            }}\n            options={collections.map((c) => ({\n              label: c.name,\n              value: c,\n            }))}\n          />\n        </div>\n        <div className=\"col-md-9 mb-3\">\n          <label>Group by</label>\n          <Select<{ label: string; value: string }, true>\n            menuPosition=\"fixed\"\n            isDisabled={!collection}\n            isMulti\n            value={enabledProperties.map((p) => ({\n              label: p,\n              value: p,\n            }))}\n            onChange={(e) => {\n              setEnabledProperties(e.map((p) => p.value));\n            }}\n            options={allAvailableProperties.map((property) => ({\n              label: property,\n              value: property,\n            }))}\n            closeMenuOnSelect={false}\n          />\n        </div>\n      </div>\n      {data.length > 0 ? (\n        <> \n          {data.map((d, i) => <div><PlotComponent\n            key={i}\n            className=\"mt-3 mb-5\"\n            style={{ width: \"100%\", height: 500 }}\n            data={d}\n            layout={LAYOUT}\n            config={PLOTLY_CONFIG}\n            onClick={(e) => {\n              setSelectionCollections(e.points.map((p) => ({data: p.customdata as unknown as IParticle[], name: 'Selection' })));\n            }}\n            onHover={(e) => {\n              const hoveredPoints = (e.points?.map((p) => (p.customdata as unknown as  IParticle[]) || []).flat() || []);\n              setHover(hoveredPoints.length > 0 ? hoveredPoints : null);\n            }}\n            onUnhover={() => {\n              setHover(null);\n            }}\n          /></div>)}\n          <div style={{ flex: \"1 1 500px\", display: \"flex\", overflow: \"auto\" }}>\n            {selectionCollections ? (\n                  <LineupWrapper\n                    collections={selectionCollections}\n                    // setSelected={setSelectedFromLineup}\n                    // getRankingBuilders={enabledEmbeddings.length === 0 ? undefined : getRankingBuilders}\n                    // adjustRankings={enabledEmbeddings.length === 0 ? undefined : adjustRankings}\n                  />\n                ) : null}\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { StructureCard } from \"./components/StructureCard\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { StructureImage } from \"./components/StructureImage\";\nimport { ICollection, IParticle, IParticleSelection, IServerCollection } from \"./interfaces\";\nimport groupByLodash from \"lodash.groupby\";\nimport { embedStructures, getTanimotoSimilarity } from \"./utils/api\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./components/PlotComponent\";\nimport { useNameInput } from \"./utils/hooks\";\nimport { FormWrapper } from \"./components/form\";\nimport { ButtonWithUpload } from \"./components/ButtonWithUpload\";\nimport cloneDeepWith from \"lodash.clonedeepwith\";\nimport { ParallelCoordinatesPlot } from \"./components/ParallelCoordinatesPlot\";\nimport { downloadCSVFile, normalizeArray } from \"./utils\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport { extent } from \"d3-array\";\nimport { LocalNeighborhoodPlot } from \"./components/LocalNeighborhoodPlot\";\nimport Select from \"react-select/src/Select\";\nimport { GroupFlowSankeyPlot } from \"./components/GroupFlowSankeyPlot\";\n\nexport const ClusterSidePanel = React.memo(\n  ({\n    collections,\n    setCollections,\n    selection,\n    setSelection,\n    hover,\n    setHover,\n    setVisibleNeighborhoodSamplings,\n  }: {\n    collections: ICollection[];\n    setCollections(collections: ICollection[]): void;\n    selection: IParticleSelection;\n    setSelection(selected: IParticleSelection): void;\n    hover: IParticle | null;\n    setHover(hover: IParticle | null): void;\n    setVisibleNeighborhoodSamplings(collection: IParticle[] | null): void;\n  }) => {\n    const selectedParticles = React.useMemo<IParticle[]>(\n      () => (selection ? ([] as IParticle[]).concat(...Object.values(selection)) : []),\n      [selection]\n    );\n\n    const hoverOrSelected = hover || (selectedParticles.length === 1 ? selectedParticles[0] : null);\n    const selectedOrHover = (selectedParticles.length === 1 ? selectedParticles[0] : null) || hover;\n\n    const [lastHoverOrSelected, setHoverOrLastSelected] = React.useState<IParticle | null>(hoverOrSelected);\n\n    React.useEffect(() => {\n      if (hoverOrSelected) {\n        setHoverOrLastSelected(hoverOrSelected);\n      }\n    }, [hoverOrSelected]);\n\n    const selectionCollection =\n      selection && Object.entries(selection).length === 1\n        ? collections.find((c) => c.name === Object.keys(selection)[0])\n        : null;\n    const [visibleProjectionModels, setVisibleProjectionModels] = React.useState<\n      IServerCollection[\"projections\"] | null\n    >(null);\n\n    const [name, setName, nameInput] = useNameInput(\"newCollectionNameInput\", \"\");\n    const [recomputeEmbeddings, setRecomputeEmbeddings] = React.useState<boolean>(false);\n    const [knnEmbeddingKey, setKnnEmbeddingKey] = React.useState<string>(\"\");\n    const [removeFromOriginal, setRemoveFromOriginal] = React.useState<boolean>(false);\n    const [includeNeighbors, setIncludeNeighbors] = React.useState<{ [key: string]: number } | null>(null);\n    const [newCollectionLoading, setNewCollectionLoading] = React.useState<boolean>(false);\n    const [showStructures, setShowStructures] = React.useState<\n      | {\n          type: \"selection\";\n        }\n      | {\n          type: \"collection\";\n          collection: ICollection;\n        }\n      | null\n    >(null);\n    const [rankingSelection, setRankingSelection] = React.useState<IParticleSelection>(null);\n    const [heatmapData, setHeatmapData] = React.useState<\n      { data: Partial<Plotly.PlotData>; layout: Partial<Plotly.Layout> }[] | null\n    >(null);\n    const [heatmapLoading, setHeatmapLoading] = React.useState<boolean>(false);\n    const [heatmapHover, setHeatmapHover] = React.useState<string[] | null>(null);\n    const [heatmapHoverIndices, setHeatmapHoverIndices] = React.useState<number[] | null>(null);\n\n    const [parallelCoordinatesCollections, setParallelCoordinatesCollections] = React.useState<ICollection[] | null>(\n      null\n    );\n\n    const structuresToShow = React.useMemo<ICollection[] | null>(() => {\n      if (showStructures) {\n        if (showStructures.type === \"collection\") {\n          return [showStructures.collection];\n        }\n        const filteredParticles = showStructures.type === \"selection\" ? selectedParticles : null;\n        return filteredParticles\n          ? Object.entries(groupByLodash(filteredParticles, \"collection\")).map(([name, data]) => ({ name, data }))\n          : null;\n      }\n      return null;\n    }, [showStructures, selectedParticles]);\n\n    return (\n      <>\n        <Modal show={Boolean(visibleProjectionModels)} onHide={() => setVisibleProjectionModels(null)} size=\"xl\">\n          <Modal.Header closeButton>\n            <Modal.Title>Available projection models</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {visibleProjectionModels ? (\n              <ul>\n                {Object.entries(visibleProjectionModels)\n                  .filter(([name, value]) => value.model)\n                  .map(([name, value]) => (\n                    <li key={name} className=\"text-truncate\">\n                      {name}: <span title={value.model || \"\"}>{value.model}</span>\n                    </li>\n                  ))}\n              </ul>\n            ) : null}\n          </Modal.Body>\n        </Modal>\n        <Modal\n          show={Boolean(showStructures && structuresToShow)}\n          onHide={() => setShowStructures(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {showStructures && structuresToShow ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>View {structuresToShow.reduce((a, b) => a + b.data.length, 0)} entries</Modal.Title>\n              </Modal.Header>\n              <Modal.Body\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <StructureCardGrid collections={structuresToShow} setSelected={(s) => setRankingSelection(s)} />\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => {\n                    setShowStructures(null);\n                    setSelection(rankingSelection);\n                  }}\n                  disabled={!rankingSelection}\n                >\n                  Save as new selection\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setShowStructures(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Modal\n          show={Boolean(heatmapData)}\n          onHide={() => setHeatmapData(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {heatmapData ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>View correlation</Modal.Title>\n              </Modal.Header>\n              <Modal.Body\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div style={{ height: 210, visibility: heatmapHover ? \"visible\" : \"hidden\", margin: \"0px auto\" }}>\n                  {heatmapHover ? (\n                    <div className=\"d-flex flex-row align-items-center\" style={{ gap: 50 }}>\n                      {heatmapHover.map((structure) => (\n                        <StructureImage\n                          structure={structure}\n                          style={{\n                            width: 210,\n                          }}\n                        />\n                      ))}\n                      {heatmapHover.length > 1 ? (\n                        <StructureImage\n                          structure={heatmapHover}\n                          style={{\n                            width: 210,\n                          }}\n                        />\n                      ) : null}\n                    </div>\n                  ) : null}\n                </div>\n                <div className=\"d-flex flex-row\">\n                  {heatmapData.map(({ data, layout }, i) => (\n                    <PlotComponent\n                      style={{ height: \"100%\", flex: 1 }}\n                      onHover={(e) => {\n                        if (e.points[0]) {\n                          setHeatmapHover(Array.from(new Set([e.points[0].x as string, e.points[0].y as string])));\n                          setHeatmapHoverIndices(e.points[0].pointIndex as any as number[]);\n                        }\n                      }}\n                      onUnhover={() => {\n                        setHeatmapHover(null);\n                        setHeatmapHoverIndices(null);\n                      }}\n                      data={\n                        heatmapHoverIndices\n                          ? [\n                              { ...data, opacity: 0.5 },\n                              {\n                                ...data,\n                                showlegend: false,\n                                showscale: false,\n                                z: (() => {\n                                  try {\n                                    const originalZ = data.z! as number[][];\n                                    // Copy the rows and cols only of the selected range\n                                    if (\n                                      heatmapHoverIndices &&\n                                      heatmapHoverIndices.length === 2 &&\n                                      originalZ.length > 0\n                                    ) {\n                                      const emptyZ = Array(originalZ.length)\n                                        .fill(null)\n                                        .map(() => Array(originalZ[0].length).fill(null));\n\n                                      const x = heatmapHoverIndices[0],\n                                        y = heatmapHoverIndices[1];\n                                      emptyZ[x] = originalZ[x];\n                                      emptyZ.forEach((row, i) => {\n                                        row[y] = originalZ[i][y];\n                                      });\n                                      return emptyZ;\n                                    }\n                                  } catch {\n                                    return data.z;\n                                  }\n                                })(),\n                                opacity: 1,\n                              },\n                            ]\n                          : [data]\n                      }\n                      layout={{\n                        dragmode: \"lasso\",\n                        hovermode: \"closest\",\n                        autosize: true,\n                        legend: {\n                          x: 1,\n                          xanchor: \"right\",\n                          y: 1,\n                        },\n                        scene: {\n                          aspectmode: \"data\",\n                        },\n                        margin: {\n                          l: 250,\n                          r: 0,\n                          b: 0,\n                          t: 25,\n                          pad: 4,\n                        },\n                        xaxis: {\n                          // automargin: true,\n                        },\n                        yaxis: {\n                          scaleanchor: \"x\",\n                          visible: i === 0,\n                          autorange: \"reversed\",\n                          // automargin: true,\n                        },\n                        ...layout,\n                      }}\n                      config={{ ...PLOTLY_CONFIG, displayModeBar: false }}\n                    />\n                  ))}\n                </div>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setHeatmapData(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Modal\n          show={Boolean(parallelCoordinatesCollections)}\n          onHide={() => setParallelCoordinatesCollections(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {parallelCoordinatesCollections ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>\n                  View parallel coordinates of {parallelCoordinatesCollections.map((c) => c.name).join(\", \")}\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <ParallelCoordinatesPlot\n                  collections={parallelCoordinatesCollections}\n                  selection={selection}\n                  setSelection={setSelection}\n                />\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setParallelCoordinatesCollections(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Tabs defaultActiveKey=\"collections\" className=\"mt-3 mb-3\" unmountOnExit={true}>\n          <Tab eventKey=\"collections\" title=\"Collections\">\n            {collections.length > 0 ? (\n              <>\n                {collections.map((c) => {\n                  return (\n                    <div key={c.name} className=\"d-flex align-items-center mb-1\">\n                      <span className=\"text-truncate me-auto\" title={c.name}>\n                        {c.name} <small>{c.data.length}</small>\n                      </span>\n                      <div className=\"btn-group btn-group-sm ms-2 me-2\" role=\"group\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Show parallel coordinates\"\n                          onClick={() => {\n                            setParallelCoordinatesCollections([c]);\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-arrows-alt-h\" />\n                        </button>\n                        {Object.entries(c.projections || {}).some(([key, value]) => value.model) ? (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light\"\n                            title=\"Show attached projection models\"\n                            onClick={() => {\n                              setVisibleProjectionModels(c.projections);\n                            }}\n                          >\n                            <i className=\"fas fa-fw fa-server\" />\n                          </button>\n                        ) : null}\n                        {c.type === \"neighborhoodSampling\" ? (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light\"\n                            title=\"Show neighborhood grid\"\n                            onClick={() => {\n                              setVisibleNeighborhoodSamplings(c.data);\n                            }}\n                          >\n                            <i className=\"fas fa-fw fa-th\" />\n                          </button>\n                        ) : null}\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Download SMILES as CSV\"\n                          onClick={() => {\n                            downloadCSVFile(c.data.map((d) => d.structure).join(\"\\n\"), \"export\");\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-cloud-download-alt\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Show collection in table view\"\n                          onClick={() => {\n                            setShowStructures({\n                              type: \"collection\",\n                              collection: c,\n                            });\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-table\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title={c.hidden ? \"Enable collection\" : \"Disable collection\"}\n                          onClick={() => {\n                            setCollections(\n                              collections.map((collection) =>\n                                c === collection ? { ...c, hidden: !c.hidden } : collection\n                              )\n                            );\n                          }}\n                        >\n                          <i className={`fas fa-fw ${c.hidden ? \"fa-eye-slash\" : \"fa-eye\"}`} />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-danger\"\n                          title=\"Delete collection\"\n                          onClick={() => {\n                            setCollections(collections.filter((collection) => c !== collection));\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-times\" />\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </>\n            ) : (\n              <p className=\"lead\">No collections found</p>\n            )}\n          </Tab>\n          <Tab eventKey=\"selection\" title=\"Selection\">\n            {selection ? (\n              <>\n                <p>\n                  {selectedParticles.length} Selected{\" \"}\n                  <div className=\"btn-group btn-group-sm ms-2 me-2 float-end\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-sm btn-light\"\n                      title=\"Show in table view\"\n                      onClick={() => setShowStructures({ type: \"selection\" })}\n                    >\n                      <i className=\"fas fa-fw fa-table\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-sm btn-light\"\n                      disabled={heatmapLoading || selectedParticles.length > 50}\n                      title=\"Compute distances\"\n                      onClick={async () => {\n                        setHeatmapLoading(true);\n                        const selectedWithEmbeddings = (\n                          await embedStructures({\n                            structures: selectedParticles.map((p) => ({smiles: p.structure})),\n                            include_embedding: true,\n                          })\n                        ).data;\n\n                        if (selectedWithEmbeddings.length > 0) {\n                          const cdddSimilarities = selectedWithEmbeddings.map((a) =>\n                            selectedWithEmbeddings.map((b) =>\n                              a.embedding![\"cddd\"].reduce((acc, x, i) => {\n                                const y = b.embedding![\"cddd\"][i];\n                                return acc + Math.pow(x - y, 2);\n                              }, 0)\n                            )\n                          );\n\n                          const selectedStructures = selectedWithEmbeddings.map((p) => p.structure);\n                          const tanimotoSimilaritiesRaw = await Promise.all(\n                            selectedStructures.map((structure) =>\n                              getTanimotoSimilarity(selectedStructures, structure, \"ecfp4\").then(\n                                ({ tanimoto }) => tanimoto\n                              )\n                            )\n                          );\n\n                          const tanimotoSimilarities = selectedStructures.map((x, i) =>\n                            selectedStructures.map((y) => tanimotoSimilaritiesRaw[i][y] || 0)\n                          );\n\n                          setHeatmapData(\n                            [\n                              {\n                                data: { z: cdddSimilarities, reversescale: true, zmin: 0 },\n                                layout: { title: \"CDDD Distance\" },\n                              },\n                              {\n                                data: { z: tanimotoSimilarities, zmin: 0, zmax: 1 },\n                                layout: { title: \"Morgan Similarities\" },\n                              },\n                            ].map(({ data, layout }) => ({\n                              data: {\n                                x: selectedStructures,\n                                y: selectedStructures,\n                                hoverinfo: \"z\",\n                                colorscale: \"YlGnBu\",\n                                type: \"heatmap\",\n                                ...data,\n                              },\n                              layout,\n                            }))\n                          );\n                        }\n                        setHeatmapLoading(false);\n                      }}\n                    >\n                      <i className={`fas fa-fw ${heatmapLoading ? \"fa-circle-notch fa-spin\" : \"fa-chess-board\"}`} />\n                    </button>\n                  </div>\n                </p>\n              </>\n            ) : null}\n            {selectedParticles.length > 0 ? (\n              <FormWrapper\n                title=\"Create new collection from selection\"\n                open={true}\n                loading={newCollectionLoading}\n                setLoading={setNewCollectionLoading}\n                onSubmit={async () => {\n                  if (selection) {\n                    let data = Object.values(selection).flat();\n\n                    if (includeNeighbors && data.length === 1) {\n                      const neighbors = Object.entries(includeNeighbors)\n                        .filter(([key, value]) => value)\n                        .map(([key, value]) => data[0].nearest_neighbors?.[key]?.knn_particles?.slice(0, value)!)\n                        .flat()\n                        .filter(Boolean);\n                      data.push(...neighbors);\n                      data = Array.from(new Set(data));\n                    }\n\n                    const newCollection = recomputeEmbeddings\n                      ? {\n                          name,\n                          ...(await embedStructures({\n                            structures: data.map((d) => ({smiles: d.structure})),\n                            include_embedding: true,\n                          })),\n                        }\n                      : {\n                          name,\n                          data: data.map((d) => ({\n                            ...cloneDeepWith(d, (value, key, object, stack) =>\n                              key === \"knn_particles\" ? undefined : value\n                            ),\n                            nearest_neighbors: undefined,\n                          })),\n                          // Add the projection model if only a single collection was selected\n                          projections: selectionCollection?.projections,\n                        };\n                    const oldCollections = removeFromOriginal\n                      ? collections.map((c) =>\n                          selection[c.name]\n                            ? {\n                                ...c,\n                                data: c.data.filter((d) => !selection[c.name].includes(d)),\n                              }\n                            : c\n                        )\n                      : collections;\n                    setCollections([...oldCollections, newCollection]);\n                    setSelection(null);\n                    setName(\"\");\n                  }\n                }}\n              >\n                <div className=\"d-flex justify-content-center\">\n                  {selectedParticles.length === 1 ? (\n                    <StructureCard structure={selectedParticles[0]} showProperties={false} />\n                  ) : (\n                    <StructureImage\n                      style={{ maxWidth: \"100%\" }}\n                      structure={selectedParticles.map((s) => s.structure)}\n                    />\n                  )}\n                </div>\n                {nameInput}\n                <div className=\"form-check form-switch me-sm-2\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"collectionsRecomputeEmbeddingsInput\"\n                    checked={recomputeEmbeddings}\n                    onChange={(e) => setRecomputeEmbeddings(e.currentTarget.checked)}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"collectionsRecomputeEmbeddingsInput\">\n                    Recompute embeddings, projections, ...\n                  </label>\n                </div>\n                <div className=\"form-check form-switch me-sm-2\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"collectionsRemoveOldInput\"\n                    checked={removeFromOriginal}\n                    onChange={(e) => setRemoveFromOriginal(e.currentTarget.checked)}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"collectionsRemoveOldInput\">\n                    Remove from original collection\n                  </label>\n                </div>\n                {selectedParticles.length === 1 && selectedParticles[0].nearest_neighbors ? (\n                  <div>\n                    <div className=\"form-check form-switch me-sm-2\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        id=\"collectionsEnableKNN\"\n                        checked={Boolean(includeNeighbors)}\n                        onChange={(e) => setIncludeNeighbors(e.currentTarget.checked ? {} : null)}\n                      />\n                      <label className=\"form-check-label\" htmlFor=\"collectionsEnableKNN\">\n                        Enable KNN\n                      </label>\n                    </div>\n                    {includeNeighbors &&\n                      Object.entries(selectedParticles[0].nearest_neighbors || {}).map(([key, value]) => (\n                        <div className=\"mb-3\">\n                          <label htmlFor=\"neighborhoodSamplesInput\" className=\"form-label\">\n                            {key} {includeNeighbors?.[key]}\n                          </label>\n                          <input\n                            type=\"range\"\n                            className=\"form-range\"\n                            id=\"neighborhoodSamplesInput\"\n                            value={includeNeighbors?.[key] || 0}\n                            onChange={(e) =>\n                              setIncludeNeighbors({ ...(includeNeighbors || {}), [key]: e.currentTarget.valueAsNumber })\n                            }\n                            min={0}\n                            max={value.knn_ind.length}\n                            step={1}\n                          />\n                        </div>\n                      ))}\n                  </div>\n                ) : null}\n                <div className=\"text-end\">\n                  <ButtonWithUpload loading={newCollectionLoading} disabled={!selection || !name} text=\"Create\" />\n                </div>\n              </FormWrapper>\n            ) : (\n              <p className=\"lead\">Select to create a new collection</p>\n            )}\n          </Tab>\n          <Tab eventKey=\"knn\" title=\"KNN\">\n            {true || hoverOrSelected ? (\n              <>\n                <LocalNeighborhoodPlot selected={lastHoverOrSelected} collection={collections.find((c) => c.name === hoverOrSelected?.collection)} setHover={setHover} hover={hover} />\n                {/*<select\n                  value={knnEmbeddingKey}\n                  onChange={(e) => setKnnEmbeddingKey(e.currentTarget.value)}\n                  className=\"custom-select custom-select-sm mb-1\"\n                >\n                  <option value=\"\">Choose embedding...</option>\n                  {Object.entries(hoverOrSelected.nearest_neighbors || {}).map(([key, value]) => (\n                    <option value={key}>{key}</option>\n                  ))}\n                </select>\n                {knnEmbeddingKey ? (<>\n                  <div\n                    style={{\n                      display: \"grid\",\n                      gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\n                      gridColumnGap: 3,\n                      gridRowGap: 3,\n                    }}\n                  >\n                    {hoverOrSelected.nearest_neighbors?.[knnEmbeddingKey]?.knn_particles.map((p) => (\n                      <div className=\"d-flex overflow-auto\">\n                        <StructureImage style={{ width: \"100%\" }} structure={p.structure} />\n                      </div>\n                    ))}\n                  </div>\n                </>) : null} */}\n              </>\n            ) : null}\n          </Tab>\n          <Tab eventKey=\"sankey\" title=\"Group Flow\">\n            <GroupFlowSankeyPlot selection={selection} collections={collections} />\n          </Tab>\n          <Tab eventKey=\"details\" title=\"Details\">\n            {hoverOrSelected ? (\n              <StructureCard structure={hoverOrSelected} />\n            ) : (\n              <p className=\"lead\">Hover over a structure to see details</p>\n            )}\n          </Tab>\n        </Tabs>\n      </>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { Figure } from \"react-plotly.js\";\nimport { ICollection, IParticle, IParticleSelection, IPlotOptions } from \"../interfaces\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport lodashGet from \"lodash.get\";\nimport { extent } from \"d3-array\";\nimport { normalizeArray, toExtent, toNumber } from \"../utils\";\nimport groupBy from \"lodash.groupby\";\nimport { scaleLinear, scaleSymlog } from \"d3-scale\";\nimport { color } from \"d3-color\";\nimport { useSyncedRef } from \"../utils/hooks\";\nimport { DEFAULT_COLORWAY } from \"../utils/constants\";\n\nconst TRAJECTORY_TRACE_NAME = \"Trajectories\";\n\nexport interface IProjectionPlotProps {\n  title: string;\n  collections: ICollection[];\n  xAccessor: string | (string | number)[];\n  yAccessor: string;\n  options: Partial<IPlotOptions>;\n  hover: IParticle | null;\n  setHover(particle: IParticle | null): void;\n  selected: IParticleSelection;\n  setSelected(selected: IParticleSelection): void;\n  children?: React.ReactNode;\n}\n\nexport const ScatterPlot = React.memo(\n  ({\n    title,\n    collections,\n    xAccessor,\n    yAccessor,\n    options,\n    hover: debouncedHover,\n    setHover,\n    selected,\n    setSelected,\n    children,\n  }: IProjectionPlotProps) => {\n    const [figureState, setFigureState] = React.useState<Figure | null>(null);\n    const [innerHover, setInnerHover] = React.useState<IParticle | null>(null);\n\n    // Use the most up-to-date hover if possible.\n    const hover = innerHover || debouncedHover;\n    const setHoverRef = useSyncedRef(setHover);\n\n    React.useEffect(() => {\n      const traces: Partial<Plotly.PlotData>[] = ((() => {\n        // return null;\n        const connectBy = options.connectBy;\n        if (!connectBy || connectBy.length === 0 || (hover == null && !selected)) {\n          return null;\n        }\n\n        const filteredCollections: Map<ICollection | undefined, IParticle[]> = new Map();\n        if (selected) {\n          Object.entries(selected).forEach(([name, selection]) => {\n            const collection = collections.find((c) => c.name === name);\n            filteredCollections.set(collection, selection);\n          });\n        }\n\n        filteredCollections.delete(undefined);\n        if (!hover && filteredCollections.size === 0) {\n          return null;\n        }\n\n        return [\n          (hover ? [collections.find((c) => c.name === hover.collection), [hover]] : [undefined, undefined]) as [\n            ICollection | undefined,\n            IParticle[] | undefined\n          ],\n          ...Array.from(filteredCollections.entries()),\n        ].map(([c, selection], i) => {\n          if (!c || !selection) {\n            return null;\n          }\n          const particles = c!.data;\n          const isHover = i === 0;\n\n          const knnHoverFields = connectBy.filter((v) => v.startsWith('knn=')).map((v) => v.split(\"=\"));\n          const isKNNHover = knnHoverFields.length > 0;\n\n          let filteredParticles: IParticle[] | null = null;\n          if(isKNNHover) {\n            filteredParticles = particles;\n          } else {\n            const selectedInstancesByConnectBy = connectBy.map(\n              (c) => new Set(selection.map((p) => p?.properties?.[c]?.toString()).filter((id) => id != null))\n            );\n  \n            filteredParticles = particles.filter((p) =>\n              connectBy.every((connectBy, i) =>\n                selectedInstancesByConnectBy[i].has(p.properties?.[connectBy]?.toString())\n              )\n            );\n          }\n  \n          if (filteredParticles.length === 0) {\n            return null;\n          }\n\n          const allInstances: (IParticle | null)[] = [];\n          const allSizes: (number | null)[] = [];\n          const allColors: (string | null)[] = [];\n\n          const lineOpacityScaling = scaleSymlog().range([0.1, 0.8]).domain([particles.length, 0]);\n          const hoverColor = color(/* hover?.plotData?.color || */ \"rgb(0,0,0)\")?.darker()!;\n\n          const lineColor = hoverColor.copy();\n          lineColor.opacity = lineOpacityScaling(filteredParticles.length);\n          // const markerBorderColor = \"gray\";\n          hoverColor.opacity = 0.5;\n          const sizeScaling = scaleLinear().range([6, 12]);\n\n          // TOOD: This could be memoized.\n          let groups: [string, IParticle[]][] | null = null;\n          if(isKNNHover) {\n            groups = knnHoverFields.map((key) => [\n              key[1],\n              [hover!, ...(hover?.nearest_neighbors?.[key[1]]?.knn_particles\n                .slice(0, +key[2])\n                .reverse()\n                .filter(Boolean) || [])],\n            ]);\n          } else {\n            groups = Object.entries(\n              groupBy(filteredParticles, (p) =>\n                connectBy.map((connectBy) => `${connectBy}:${p.properties?.[connectBy]}`).join(\", \")\n              )\n            );\n          }\n\n          // Cool plotly optimization: instead of creating many traces for lines, create a single trace with NaN separators.\n          // See https://www.somesolvedproblems.com/2019/05/how-to-make-plotly-faster-with-many.html\n          for (let [key, instances] of groups) {\n            instances = instances.filter((p) => lodashGet(p, xAccessor) != null && lodashGet(p, yAccessor) != null);\n            const instanceScaler = sizeScaling.domain([0, instances.length]);\n            allInstances.push(...instances);\n            allInstances.push(null);\n            allSizes.push(...instances.map((_, i) => instanceScaler(i)));\n            allSizes.push(null);\n            allColors.push(\n              ...instances.map((p, i) => (p === hover || p.selected ? \"gold\" : \"lightgray\"))\n            );\n            allColors.push(\"darkblue\");\n          }\n          const allBorderColors = allColors.map((c) => color(c!)!.darker().toString());\n\n          return {\n            type: isHover ? \"scatter\" : \"scattergl\",\n            mode: \"lines+markers\",\n            x: allInstances.map((p) => lodashGet(p, xAccessor) ?? NaN),\n            y: allInstances.map((p) => lodashGet(p, yAccessor) ?? NaN),\n            name: TRAJECTORY_TRACE_NAME,\n            hoverinfo: \"skip\",\n            opacity: hover ? (isHover ? 1.0 : 0.05) : 0.2,\n            marker: {\n              color: allColors,\n              size: allSizes,\n              line: {\n                color: allBorderColors,\n                width: 2,\n              },\n              opacity: 1,\n            },\n            line: {\n              color: lineColor.toString(),\n              width: isKNNHover ? 0 : 2,\n              shape: \"spline\",\n              // opacity: 0.5\n            },\n            showlegend: false,\n          } as Partial<Plotly.PlotData>;\n        });\n      })()?.filter(Boolean) || []) as Partial<Plotly.PlotData>[];\n\n      setFigureState((figureState) => {\n        if (!figureState) {\n          return figureState;\n        }\n        const existing = figureState.data.find((d) => d.name === TRAJECTORY_TRACE_NAME);\n        if (traces.length === 0 && !existing) {\n          return figureState;\n        }\n        const data = [\n          ...figureState.data\n            .filter((d) => d.name !== TRAJECTORY_TRACE_NAME)\n            .map((d) => ({ ...d, opacity: traces.length > 0 ? 0.2 : undefined })),\n          ...traces,\n        ];\n        return { ...figureState, data };\n      });\n      // const result: Plotly.Data[] = [];\n      // groups.forEach(([group, instances]) => {\n      //   // const c = color(\n      //   //   instances.find((i) => i.plotData?.color)?.plotData?.color || \"#000000\"\n      //   // )!;\n      //   const c = color(hover?.plotData?.color || \"#000000\")!;\n      //   const sizeScaling = scaleLinear()\n      //     .domain([0, instances.length])\n      //     .range([8, 16]);\n      //   c.opacity = hover && instances.includes(hover) ? 0.5 : 0.3;\n      //   if (true || instances.length > 20 || groups.length > 20) {\n      //     result.push({\n      //       type: \"scattergl\",\n      //       mode: \"lines+markers\",\n      //       x: instances.map((p) => get(p, \"x\")),\n      //       y: instances.map((p) => get(p, \"y\")),\n      //       name: group,\n      //       hoverinfo: \"all\",\n      //       marker: {\n      //         color: \"lightblue\",\n      //         // @ts-ignore\n      //         size: instances.map((p, i) => sizeScaling(i)),\n      //         line: {\n      //           color: c.toString(),\n      //           width: 2,\n      //         },\n      //         opacity: 1,\n      //         // line: 'green'\n      //       },\n      //       line: {\n      //         color: c.toString(),\n      //         // shape: \"spline\",\n      //       },\n      //       showlegend: false,\n      //     });\n      //   } else {\n      //     // const widthScaling = scaleLinear()\n      //     //   .domain([0, instances.length])\n      //     //   .range([1, 6]);\n      //     // instances.slice(1).forEach((instance, i) => {\n      //     //   const instancePair = [instances[i], instance];\n      //     //   result.push({\n      //     //     type: \"scattergl\",\n      //     //     mode: \"lines+markers\",\n      //     //     x: instancePair.map((p) => get(p, \"x\")),\n      //     //     y: instancePair.map((p) => get(p, \"y\")),\n      //     //     name: group,\n      //     //     hoverinfo: \"all\",\n      //     //     marker: {\n      //     //       color: 'red',\n      //     //       size: 10\n      //     //     },\n      //     //     line: {\n      //     //       width: widthScaling(i),\n      //     //       color: c.toString(),\n      //     //       shape: \"spline\",\n      //     //       // dash: 'dot',\n      //     //     },\n      //     //     // legendgroup: `${group}`,\n      //     //     // showlegend: i === 0,\n      //     //     showlegend: false,\n      //     //   });\n      //     // });\n      //   }\n      // });\n\n      // return result;\n    }, [collections, xAccessor, yAccessor, options.connectBy, hover, selected]);\n\n    React.useEffect(() => {\n      const timeout = setTimeout(() => {\n        setFigureState((figureState) => {\n          const annotatedCollections = collections.map(({ data, hidden, name, plotOptions }) => {\n            const colorBy = plotOptions?.colorBy || options.colorBy;\n            const opacityBy = plotOptions?.opacityBy || options.opacityBy;\n            const sizeBy = plotOptions?.sizeBy || options.sizeBy;\n\n            const color = colorBy ? data.map((p) => toNumber(p.properties?.[colorBy])) : undefined;\n            const constantOpacity = typeof opacityBy === \"number\" ? opacityBy : undefined;\n            const opacity = opacityBy\n              ? data.map((p) => constantOpacity || toNumber(p.properties?.[opacityBy]))\n              : undefined;\n            // opacity: opacityBy\n            // ? normalizeArray(\n            //     points.map((p) => p.properties?.[opacityBy] as number),\n            //     0.3,\n            //     0.7\n            //   )\n            // : defaultOpacity,\n            const size = sizeBy ? data.map((p) => toNumber(p.properties?.[sizeBy], 5)) : undefined;\n            // @ts-ignore\n            const colorExtent: [number, number] = color ? extent(color) : undefined;\n            // @ts-ignore\n            const opacityExtent: [number, number] = opacity ? extent(opacity) : undefined;\n            // @ts-ignore\n            const sizeExtent: [number, number] = size ? extent(size) : undefined;\n\n            return {\n              data,\n              hidden,\n              name,\n              plotOptions,\n              colorExtent,\n              color,\n              opacity,\n              opacityExtent,\n              size,\n              sizeExtent,\n            };\n          });\n\n          const colorExtent = toExtent(annotatedCollections, (d) => d.colorExtent);\n          const opacityExtent = toExtent(annotatedCollections, (d) => d.opacityExtent);\n          const sizeref = options.sizeBy\n            ? (2.0 * Math.max(...annotatedCollections.map(({ sizeExtent }) => sizeExtent?.[1] || 0))) / 5 ** 2\n            : undefined;\n\n          const newFigureState: Figure = {\n            frames: [],\n            layout: {\n              ...(figureState?.layout || {}),\n              colorway: DEFAULT_COLORWAY,\n              dragmode: \"lasso\",\n              hovermode: \"closest\",\n              autosize: true,\n              legend: {\n                x: 1,\n                xanchor: \"right\",\n                y: 1.5,\n                bgcolor: 'rgba(255, 255, 255, 0.5)',\n              },\n              title,\n              margin: {\n                // l: 0,\n                r: 0,\n                // b: 0,\n                // t: 25,\n                pad: 4,\n              },\n            },\n            data: annotatedCollections.map(({ data, name, hidden, color, opacity, size, plotOptions }, i) => {\n              const existingData = (figureState?.data.find((d) => d.name === name) as Partial<Plotly.PlotData>) || {};\n\n              const groupBy = plotOptions?.groupBy || options.groupBy;\n              const colorBy = plotOptions?.colorBy || options.colorBy;\n              let groups = groupBy ? data.map((p) => p.properties?.[groupBy]?.toString() || \"N/A\") : undefined;\n\n              let x = data.map((p) => lodashGet(p, xAccessor));\n              let y = data.map((p) => lodashGet(p, yAccessor));\n              let indices = data.map((data, i) => [i, data.index!]);\n\n              if (y?.[0] && Array.isArray(y[0])) {\n                const extendedParticles = y.map((ys, i) => ({\n                  x: Array.from(new Array(ys.length).keys()),\n                  y: ys,\n                  indices: new Array(ys.length).fill(null).map(() => [i, data[i].index!]),\n                  color: Array.isArray(color) ? new Array(ys.length).fill(color[i]) : color,\n                  opacity: Array.isArray(opacity) ? new Array(ys.length).fill(opacity[i]) : opacity,\n                  size: Array.isArray(size) ? new Array(ys.length).fill(size[i]) : size,\n                  groups: Array.isArray(groups) ? new Array(ys.length).fill(groups[i]) : groups,\n                }));\n\n                x = extendedParticles.map((p) => p.x).flat();\n                y = extendedParticles.map((p) => p.y).flat();\n                indices = extendedParticles.map((p) => p.indices).flat();\n                color = Array.isArray(color) ? extendedParticles.map((p) => p.color).flat() : color;\n                opacity = Array.isArray(opacity) ? extendedParticles.map((p) => p.opacity).flat() : opacity;\n                size = Array.isArray(size) ? extendedParticles.map((p) => p.size).flat() : size;\n                groups = Array.isArray(groups) ? extendedParticles.map((p) => p.groups).flat() : groups;\n              }\n\n              return {\n                ...existingData,\n                x,\n                y,\n                text: data.map((p) => p.structure),\n                hoverinfo: \"none\",\n                name,\n                type: \"scattergl\",\n                mode: \"markers\",\n                // Custom data has the [index of particle in filtered collection, index of particle in global collection] mapping\n                customdata: indices,\n                visible: !hidden ? true : \"legendonly\",\n                showlegend: false,\n                marker: {\n                  ...(existingData.marker || {}),\n                  color,\n                  cmin: colorExtent?.[0],\n                  cmax: colorExtent?.[1],\n                  opacity: opacity\n                    ? normalizeArray(opacity, [0.1, 0.9] /* , opacityExtent */)\n                    : data.length >= 5000\n                    ? 0.5\n                    : 0.5,\n                  // opacity: opacity || 0.5,\n                  symbol: i,\n                  size: size ?? (data.length >= 5000 ? 3.5 : 5),\n                  sizeref,\n                  sizemin: 2,\n                  sizemax: 5,\n                  colorbar: colorBy\n                    ? {\n                        title: colorBy.length > 10 ? colorBy.slice(0, 7) + \"...\" : colorBy,\n                        titleside: \"top\",\n                        thickness: 10,\n                        outlinewidth: 0,\n                        lenmode: \"fraction\",\n                        len: 0.75,\n                        yanchor: \"middle\",\n                      }\n                    : undefined,\n                  colorscale: \"Portland\",\n                },\n                transforms: (groupBy\n                  ? [\n                      {\n                        type: \"groupby\",\n                        groups,\n                        styles: Array.from(new Set(groups))\n                          .sort((a, b) => a.localeCompare(b))\n                          .map((target, i) => ({\n                            target,\n                            value: { marker: { symbol: i } },\n                          })),\n                      },\n                    ]\n                  : []) as Plotly.Transform[],\n              };\n            }),\n          };\n          return newFigureState;\n        });\n      }, 300);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [title, collections, xAccessor, yAccessor, JSON.stringify(options)]);\n\n    React.useEffect(() => {\n      setFigureState((figureState) =>\n        figureState\n          ? {\n              ...figureState,\n              data: figureState.data.map((data) => {\n                const selectedIndices = new Set(selected?.[data.name!]?.map((s) => s.index!) || []);\n                let selectedpoints: undefined | number[] = undefined;\n                if (selectedIndices.size > 0) {\n                  selectedpoints = [];\n                  ((data as Partial<Plotly.PlotData>).customdata as [number, number][]).forEach(\n                    ([_, particleIndex], pointIndex) => {\n                      if (selectedIndices.has(particleIndex)) {\n                        selectedpoints!.push(pointIndex);\n                      }\n                    }\n                  );\n                }\n                return {\n                  ...data,\n                  selectedpoints,\n                };\n              }),\n            }\n          : null\n      );\n    }, [selected]);\n\n    React.useEffect(() => {\n      const timeout = setTimeout(() => setHoverRef.current?.(innerHover), 50);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [innerHover, setHoverRef]);\n\n    const getPointsFromEvent = (e: Readonly<Plotly.PlotSelectionEvent> | null): IParticleSelection => {\n      const points = e?.points || [];\n      const handledIndices = new Set<number>();\n      return points.length > 0\n        ? points.reduce<{ [key: string]: IParticle[] }>((acc, p) => {\n            // @ts-ignore\n            const collection = collections?.[p.curveNumber];\n            const [pointIndex, particleIndex] = p.customdata as any as [number, number];\n            const particle: IParticle | null = collection?.data?.[pointIndex];\n            if (particle && !handledIndices.has(pointIndex)) {\n              handledIndices.add(pointIndex);\n              if (!acc[collection.name]) {\n                acc[collection.name] = [];\n              }\n              acc[collection.name].push(particle);\n            }\n            return acc;\n          }, {})\n        : null;\n    };\n\n    return (\n      <>\n        {figureState ? (\n          <PlotComponent\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            data={figureState.data}\n            layout={figureState.layout}\n            config={PLOTLY_CONFIG}\n            onSelected={(e) => {\n              setSelected(getPointsFromEvent(e));\n            }}\n            onDeselect={() => {\n              setSelected(null);\n            }}\n            onClick={(e) => {\n              setSelected(getPointsFromEvent(e));\n              setInnerHover(null);\n            }}\n            onHover={(e) => {\n              setInnerHover(Object.values(getPointsFromEvent(e)!).flat()?.[0]);\n            }}\n            onUnhover={() => {\n              setInnerHover(null);\n            }}\n            onUpdate={(figure) => {\n              // Inline save the figure to save the zoom\n              figureState.data = figure.data;\n              figureState.frames = figure.frames;\n              figureState.layout = figure.layout;\n            }}\n          />\n        ) : null}\n        {children}\n      </>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getMatchedMolecularPairs, embedStructures } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const MatchedMolecularPairsForm = ({\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [structure, setStructure] = React.useState<string>(\"\");\n  const [name, setName, nameInput] = useNameInput(\"mmpNameInput\", `MMP ${structure}`);\n  const [substructure, setSubstructure] = React.useState<string>(\"\");\n  const [minVariableSize, setMinVariableSize] = React.useState<number>(0);\n  const [maxVariableSize, setMaxVariableSize] = React.useState<number>(1);\n  const [minConstantSize, setMinConstantSize] = React.useState<number>(0);\n  const [minRadius, setMinRadius] = React.useState<number>(0);\n  const [minPairs, setMinPairs] = React.useState<number>(0);\n\n  return (\n    <FormWrapper\n      title={\n        <>\n          Matched Molecular Pairs &nbsp;\n          <a\n            style={{ fontSize: \"smaller\" }}\n            href=\"https://github.com/rdkit/mmpdb#4-identify-possible-transforms\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <i className=\"fas fa-fw fa-info-circle\" />\n          </a>\n        </>\n      }\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const {structures} = await getMatchedMolecularPairs({\n          structure,\n          substructure: substructure,\n          min_variable_size: minVariableSize,\n          max_variable_size: maxVariableSize,\n          min_constant_size: minConstantSize,\n          min_radius: minRadius,\n          min_pairs: minPairs,\n        });\n        if(structures.length === 0) {\n          throw Error('No matching pairs found');\n        }\n        const embeddedCollection = await embedStructures({structures: structures.map((smiles) => ({smiles})), include_embedding: true});\n        addCollection({\n          name,\n          ...embeddedCollection\n        });\n        setName('');\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"mmpStructureInput\">Structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={structure} selection={selection} setValue={setStructure} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"mmpStructureInput\"\n            aria-describedby=\"mmpStructureInput\"\n            value={structure}\n            onChange={(e) => setStructure(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <details>\n        <summary>Advanced Settings</summary>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minVariableSizeInput\">Min Variable Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minVariableSizeInput\"\n            value={minVariableSize}\n            required\n            min={0}\n            onChange={(e) => setMinVariableSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"maxVariableSizeInput\">Max Variable Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"maxVariableSizeInput\"\n            value={maxVariableSize}\n            required\n            min={0}\n            onChange={(e) => setMaxVariableSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minConstantSizeInput\">Min Constant Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minConstantSizeInput\"\n            value={minConstantSize}\n            required\n            min={0}\n            onChange={(e) => setMinConstantSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minRadiusInput\">Min Radius</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minRadiusInput\"\n            value={minRadius}\n            min={0}\n            required\n            onChange={(e) => setMinRadius(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minPairsInput\">Min Pairs</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minPairsInput\"\n            value={minPairs}\n            min={0}\n            required\n            onChange={(e) => setMinPairs(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"mmpSmartsStructureInput\">SMARTS Substructure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={substructure} selection={selection} setValue={setSubstructure} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"mmpSmartsStructureInput\"\n              aria-describedby=\"mmpSmartsStructureInput\"\n              value={substructure}\n              onChange={(e) => setSubstructure(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n      </details>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!structure} text=\"Compute MMP\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getNeighborSamples, getTanimotoSimilarity } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { Modal } from \"react-bootstrap\";\nimport { StructureImage } from \"../StructureImage\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const NeighborSamplingForm = ({\n  visible,\n  setVisible,\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  visible: IParticle[] | null;\n  setVisible(collection: IParticle[] | null): void;\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [smiles, setSmiles] = React.useState<string>(\"\");\n  const [method, setMethod] = React.useState<string>(\"chembl_pca\");\n  const [nr, setNr] = React.useState<number>(5);\n  const [scale, setScale] = React.useState<number>(1);\n  const [name, setName, nameInput] = useNameInput(\"neighborhoodNameInput\", `${method} ${nr}*${scale} Neighborhood of ${smiles}`);\n\n  const computeNeighborSamples = async () => {\n    const serverCollection = await getNeighborSamples(smiles, nr, method, scale);\n    const similarity = await getTanimotoSimilarity(\n      serverCollection.data.map((p) => p.structure),\n      smiles,\n      \"ecfp4\"\n    );\n\n    const data = serverCollection.data.map((p) => ({\n      ...p,\n      properties: { ...(p.properties || {}), neighborhoodSimilarity: similarity.tanimoto[p.structure] },\n    }));\n    setCollections([\n      ...collections,\n      {\n        ...serverCollection,\n        name,\n        data,\n        type: \"neighborhoodSampling\",\n      },\n    ]);\n    setName(\"\");\n    setVisible(data);\n  };\n\n  return (\n    <>\n      <Modal show={Boolean(visible)} onHide={() => setVisible(null)} size=\"xl\">\n        <Modal.Header closeButton>\n          <Modal.Title>Neighborhood Sampling</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {visible ? (\n            <>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${Math.sqrt(visible.length)}, 1fr)`,\n                }}\n              >\n                {visible.map((sample, i) => (\n                  <StructureImage\n                    key={i}\n                    structure={sample.structure}\n                    align={visible[Math.floor(visible.length / 2)].structure}\n                    title={`Similarity to reference: ${sample.properties?.[\"neighborhoodSimilarity\"]}`}\n                    style={{\n                      width: \"100%\",\n                      opacity: sample.properties?.[\"neighborhoodSimilarity\"] as number,\n                      border: `1px solid ${Math.floor(visible.length / 2) === i ? \"gold\" : \"rgba(0, 0, 0, 0.05)\"}`,\n                    }}\n                  />\n                ))}\n              </div>\n            </>\n          ) : null}\n        </Modal.Body>\n      </Modal>\n      <FormWrapper\n        title=\"Neighborhood Sampling\"\n        loading={loading}\n        setLoading={setLoading}\n        onSubmit={computeNeighborSamples}\n      >\n        {nameInput}\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodStructureInput\">Reference structure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={smiles} selection={selection} setValue={setSmiles} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"neighborhoodStructureInput\"\n              aria-describedby=\"neighborhoodStructureInput\"\n              value={smiles}\n              onChange={(e) => setSmiles(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodSamplesInput\" className=\"form-label\">Nr. of Samples: {nr}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"neighborhoodSamplesInput\"\n            value={nr}\n            onChange={(e) => setNr(e.currentTarget.valueAsNumber)}\n            min={3}\n            max={15}\n            step={2}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodScaleInput\" className=\"form-label\">Scale: {scale}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"neighborhoodScaleInput\"\n            value={scale}\n            onChange={(e) => setScale(e.currentTarget.valueAsNumber)}\n            min={0.1}\n            max={5}\n            step={0.1}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodSamplesMethod\">Method</label>\n          <div className=\"input-group input-group-sm\">\n            <select\n              className=\"form-control\"\n              id=\"neighborhoodSamplesMethod\"\n              value={method}\n              onChange={(e) => {\n                setMethod(e.currentTarget.value);\n              }}\n            >\n              <option value=\"chembl_pca\">PCA of ChEMBL</option>\n              <option value=\"random_orthogonal\">Random Orthogonal</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"text-end\">\n          <ButtonWithUpload loading={loading} disabled={!smiles} text=\"Compute Neighbors\" />\n        </div>\n      </FormWrapper>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { computeProjectionsWithModels } from \"../../utils/api\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { FormWrapper } from \"./FormWrapper\";\n\nexport const RecomputeEmbeddingsForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [from, setFrom] = React.useState<ICollection | null>(null);\n  const [projection, setProjection] = React.useState<string | null>(\"all\");\n  const [to, setTo] = React.useState<ICollection | null>(null);\n\n  const recomputeProjections = async () => {\n    if (from?.projections && to && projection) {\n      const recomputedParticles = await computeProjectionsWithModels(\n        to.data,\n        projection === \"all\" ? Object.entries(from.projections).reduce((acc, [key, value]) => ({...acc, [key]: value.model}), {}) : { [projection]: from.projections[projection].model }\n      );\n\n      const toName = (projection: string): string => `${from.name}_${projection}_base`;\n\n      const newTo = {\n        ...to,\n        data: to.data.map((d, i) => ({\n          ...d,\n          projection: {\n            ...d.projection,\n            ...Object.entries(recomputedParticles.projection).reduce(\n              (acc, [projection, data]) => ({\n                ...acc,\n                [toName(projection)]: data[i],\n              }),\n              {}\n            ),\n          },\n        })),\n        projections: {\n          ...(to.projections || {}),\n          ...Object.entries(recomputedParticles.projections || {}).reduce((acc, [projection, data]) => ({\n            ...acc,\n            [toName(projection)]: data\n          }), {})\n        }\n      };\n\n      const newFrom = {\n        ...from,\n        data: from.data.map((d) => ({\n          ...d,\n          projection: {\n            ...d.projection,\n            ...Object.keys(recomputedParticles.projection).reduce(\n              (acc, projection) => ({\n                ...acc,\n                [toName(projection)]: d.projection[projection],\n              }),\n              {}\n            ),\n          },\n        })),\n      };\n      // throw Error('TEST');\n\n      setCollections(collections.map((c) => (c === to ? newTo : c === from ? newFrom : c)));\n\n      setTo(newTo);\n      setFrom(newFrom);\n    }\n  };\n\n  const collectionsWithProjections = collections.filter(\n    (c) => c.projections && Object.entries(c.projections).some(([key, value]) => value.model)\n  );\n\n  const collectionsWithEmbeddings = collections.filter(\n    (c) => c.data?.[0].embedding && Object.entries(c.data?.[0].embedding).length > 0\n  );\n\n  return (\n    <FormWrapper\n      title=\"Recompute Projections\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={recomputeProjections}\n    >\n      {collectionsWithProjections.length > 0 ? (\n        <>\n          <div className=\"mb-3\">\n            <label htmlFor=\"recomputeProjectionFrom\">Reference collection</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"recomputeProjectionFrom\"\n                value={from?.name}\n                onChange={(e) => {\n                  const from = e.currentTarget.value;\n                  setFrom(from ? collections.find((c) => c.name === from)! : null);\n                }}\n              >\n                <option value=\"\">Select...</option>\n                {collectionsWithProjections.map((c) => (\n                  <option key={c.name} value={c.name}>{c.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          {from ? (\n            <div className=\"mb-3\">\n              <label htmlFor=\"recomputeProjectionProjection\">Projection</label>\n              <div className=\"input-group input-group-sm\">\n                <select\n                  className=\"form-control\"\n                  id=\"recomputeProjectionProjection\"\n                  value={projection || undefined}\n                  onChange={(e) => {\n                    setProjection(e.currentTarget.value);\n                  }}\n                >\n                  <option value=\"all\">All</option>\n                  {Object.entries(from?.projections || {})\n                    .filter(([key, value]) => value.model)\n                    .map(([key, value]) => (\n                      <option value={key}>{key}</option>\n                    ))}\n                </select>\n              </div>\n            </div>\n          ) : null}\n          <div className=\"mb-3\">\n            <label htmlFor=\"recomputeProjectionTo\">Subset collection</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"recomputeProjectionTo\"\n                value={to?.name}\n                onChange={(e) => {\n                  const to = e.currentTarget.value;\n                  setTo(to ? collections.find((c) => c.name === to)! : null);\n                }}\n              >\n                <option value=\"\">Select...</option>\n                {collectionsWithEmbeddings.map((c) => (\n                  <option value={c.name}>{c.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"text-end\">\n            <ButtonWithUpload\n              loading={loading}\n              disabled={Boolean(!from || !to || from === to)}\n              text=\"Compute Projections\"\n            />\n          </div>\n        </>\n      ) : (\n        <p>At least 2 collections must be available.</p>\n      )}\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getMatchedMolecularPairs, embedStructures, getStonedSelfies } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const StonedSelfiesForm = ({\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [structure, setStructure] = React.useState<string>(\"\");\n  const [name, setName, nameInput] = useNameInput(\"stonedSelfiesNameInput\", `SELFIES ${structure}`);\n  const [substructure, setSubstructure] = React.useState<string>(\"\");\n  const [randomSamples, setRandomSamples] = React.useState<number>(1000);\n  const [maxMutations, setMaxMutations] = React.useState<number>(5);\n\n  return (\n    <FormWrapper\n      title={\n        <>\n          Stoned Selfies &nbsp;\n          <a\n            style={{ fontSize: \"smaller\" }}\n            href=\"https://github.com/aspuru-guzik-group/stoned-selfies\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <i className=\"fas fa-fw fa-info-circle\" />\n          </a>\n        </>}\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const { structures } = await getStonedSelfies({\n          structure,\n          substructure,\n          random_samples: randomSamples,\n          max_mutations: maxMutations,\n        });\n        if (structures.length === 0) {\n          throw Error(\"No stoned selfies found\");\n        }\n        const embeddedCollection = await embedStructures({ structures: structures.map((smiles) => ({smiles})), include_embedding: true });\n        addCollection({\n          name,\n          ...embeddedCollection,\n        });\n        setName(\"\");\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"stonedSelfiesStructureInput\">Structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={structure} selection={selection} setValue={setStructure} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"stonedSelfiesStructureInput\"\n            aria-describedby=\"stonedSelfiesStructureInput\"\n            value={structure}\n            onChange={(e) => setStructure(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <details>\n        <summary>Advanced Settings</summary>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesSubstructureInput\">Substructure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={substructure} selection={selection} setValue={setSubstructure} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"stonedSelfiesSubstructureInput\"\n              aria-describedby=\"stonedSelfiesSubstructureInput\"\n              value={substructure}\n              onChange={(e) => setSubstructure(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesRandomSamplesInput\" className=\"form-label\">Nr. of Random Samples: {randomSamples}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"stonedSelfiesRandomSamplesInput\"\n            value={randomSamples}\n            onChange={(e) => setRandomSamples(e.currentTarget.valueAsNumber)}\n            min={500}\n            max={50000}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesMaxPermutationsInput\" className=\"form-label\">Maximum Permutations: {maxMutations}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"stonedSelfiesMaxPermutationsInput\"\n            value={maxMutations}\n            onChange={(e) => setMaxMutations(e.currentTarget.valueAsNumber)}\n            min={1}\n            max={20}\n          />\n        </div>\n      </details>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!structure} text=\"Compute\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport castArray from \"lodash.castarray\";\nimport Select from \"react-select/creatable\";\n\nexport interface GenericPlotSelectOption<T> {\n  option: T | null | undefined;\n  setOption(option: T | null): void;\n}\n\nexport interface IPlotSelectExtension {\n  component: React.FunctionComponent<{\n    availableNearestNeighbors: string[];\n    availableClusters: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>>;\n  additionalOptions: {label: string, value: string}[];\n}\n\nexport function PlotSelect<IsMulti extends boolean = false>({\n  inline = true,\n  multi,\n  option,\n  setOption,\n  label,\n  options,\n  id,\n  disabled,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  extensions,\n}: {\n  inline?: boolean;\n  options: string[];\n  disabled?: boolean;\n  id: string;\n  label?: string;\n  multi: IsMulti;\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  extensions?: IPlotSelectExtension[];\n} & (IsMulti extends true ? GenericPlotSelectOption<string[]> : GenericPlotSelectOption<string>)) {\n  const values: string[] = React.useMemo(() => castArray(option).filter(Boolean) as string[], [option]);\n\n  return (\n    <div className={`d-flex position-relative ${inline ? 'col-sm-3' : 'col-12'}`}>\n      {label ? (\n        <label\n          className={`my-1 me-2 align-self-center ${inline ? \"\" : \"col-sm-2 d-flex\"}`}\n          style={{ whiteSpace: \"nowrap\" }}\n          htmlFor={id}\n        >\n          {label}\n        </label>\n      ) : null}\n      <div className={`my-1 me-sm-2 flex-fill ${inline ? \"\" : \"col-sm-10\"}`} style={{ minWidth: 100 }}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Select<{ label: string; value: string }, IsMulti>\n              menuPosition=\"fixed\"\n              isMulti={multi}\n              isClearable\n              styles={{ menu: (base) => ({ ...base, zIndex: 999 }) }}\n              onCreateOption={(value) => {\n                setOption(value as any);\n              }}\n              value={values.map((p) => ({\n                label: p,\n                value: p,\n              }))}\n              onChange={(e) => {\n                if (!e) {\n                  setOption(null);\n                  return;\n                }\n                // @ts-ignore\n                const values: { label: string; value: string }[] = castArray(e);\n                if (multi) {\n                  setOption(values.map((p) => p.value) as any);\n                } else {\n                  setOption(values?.[0]?.value as any);\n                }\n              }}\n              options={[\n                ...(extensions || []).map((e) => e.additionalOptions || []).flat(),\n                ...options.map((option) => ({\n                  label: option,\n                  value: option,\n                })),\n              ]}\n            />\n          </div>\n          {extensions?.map((e) => (\n            <e.component\n              setOption={(e) => {\n                if(!e) {\n                  return null;\n                }\n                const values: string[] = castArray(e);\n                if (multi) {\n                  setOption(values.map((p) => p) as any);\n                } else {\n                  setOption(values?.[0] as any);\n                }\n              }}\n              availableNearestNeighbors={availableNearestNeighbors}\n              availableClusters={availableClusters}\n              availableProperties={availableProperties}\n              option={values?.[0]}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectJaccardExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n  }: {\n    availableNearestNeighbors: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, jaccardEmb1, jaccardEmb2, jaccardNN] = option?.split(\"=\") || [];\n    const isJaccard = key === \"jaccard\";\n\n    return isJaccard ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={jaccardEmb1 || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${e.currentTarget.value}=${jaccardEmb2 || \"\"}=${jaccardNN || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={jaccardEmb2 || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${jaccardEmb1 || \"\"}=${e.currentTarget.value}=${jaccardNN || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+jaccardNN || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${jaccardEmb1 || \"\"}=${jaccardEmb2 || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Ratio of matching nearest neighbors\",\n      value: \"jaccard=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { ARRAY_DISTANCE_METRICS } from \"../utils/constants\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectNNDiffExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n    availableProperties,\n  }: {\n    availableNearestNeighbors: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb, property, method, nn] = option?.split(\"=\") || [];\n    const isNNDiff = key === \"nn_diff\";\n\n    return isNNDiff ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${e.currentTarget.value}=${property || \"\"}=${method || \"\"}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={property || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${e.currentTarget.value}=${method || \"\"}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableProperties.map((prop) => (\n              <option value={prop}>{prop}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={method || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${property || \"\"}=${e.currentTarget.value}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {Object.keys(ARRAY_DISTANCE_METRICS).map((prop) => (\n              <option value={prop}>{prop}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+nn || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${property || \"\"}=${method || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Properties of nearest neighbors\",\n      value: \"nn_diff=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectKNNExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n  }: {\n    availableNearestNeighbors: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb, nn] = option?.split(\"=\") || [];\n    const isKNN = key === \"knn\";\n\n    return isKNN ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`knn=${e.currentTarget.value}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+nn || \"\"}\n            onChange={(e) =>\n              setOption(`knn=${emb || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"K-Nearest Neighbors\",\n      value: \"knn=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectClusterExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n    availableClusters,\n    availableProperties,\n  }: {\n    availableNearestNeighbors: string[];\n    availableClusters: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb] = option?.split(\"=\") || [];\n    const isNNDiff = key === \"cluster\";\n\n    return isNNDiff ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`cluster=${e.currentTarget.value}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableClusters.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Clusters\",\n      value: \"cluster=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectEvalExtension: IPlotSelectExtension = {\n  component: ({ option, setOption }: {} & GenericPlotSelectOption<string>) => {\n    const [key, func] = option?.split(\"=\") || [];\n    const isEval = key === \"eval\";\n\n    return isEval ? (\n      <>\n        <div className=\"col-8\">\n          <div className=\"input-group\">\n            <span className=\"input-group-text\">\n              <code>(p) ={\">\"} </code>\n            </span>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={func || \"\"}\n              onChange={(e) => setOption(`eval=${e.currentTarget.value || \"\"}` as any)}\n            />\n          </div>\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Custom function\",\n      value: \"eval=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { IEnabledProjection } from \"../../interfaces\";\nimport { PlotSelect } from \"../PlotSelect\";\nimport uniqueId from \"lodash.uniqueid\";\nimport { PlotSelectJaccardExtension } from \"../PlotSelectJaccardExtension\";\nimport { PlotSelectNNDiffExtension } from \"../PlotSelectNNDiffExtension\";\nimport { PlotSelectKNNExtension } from \"../PlotSelectKNNExtension\";\nimport { PlotSelectClusterExtension } from \"../PlotSelectClusterExtension\";\nimport { PlotSelectEvalExtension } from \"../PlotSelectEvalExtension\";\n\nexport const ProjectionSettingsForm = ({\n  inline,\n  config,\n  setConfig,\n  availableProjections,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  availableOpacityProperties,\n  availableConnectByProperties,\n}: {\n  inline: boolean;\n  config: IEnabledProjection;\n  setConfig(value: IEnabledProjection): void;\n  availableProjections?: string[];\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  availableOpacityProperties: string[];\n  availableConnectByProperties: string[];\n}) => {\n  const [id, setId] = React.useState<string>(uniqueId());\n  return (\n    <form className=\"row\">\n      {availableProjections ? (\n        <PlotSelect\n          multi={false}\n          inline={inline}\n          id={`projection${id}Select`}\n          label=\"Projection\"\n          option={config.projection}\n          options={availableProjections}\n          setOption={(projection: string) => {\n            setConfig({ ...config, projection });\n          }}\n          availableNearestNeighbors={availableNearestNeighbors}\n          availableClusters={availableClusters}\n          availableProperties={availableProperties}\n        />\n      ) : null}\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`colorEncoding${id}Select`}\n        label=\"Color Encoding\"\n        // disabled={groupBy !== null}\n        option={config.plotOptions.colorBy}\n        options={availableProperties}\n        setOption={(colorCoding: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, colorBy: colorCoding } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`opacity${id}Select`}\n        label=\"Opacity By\"\n        // disabled={colorCoding !== null}\n        option={typeof config.plotOptions.opacityBy === \"number\" ? \"constant\" : config.plotOptions.opacityBy}\n        options={availableOpacityProperties}\n        setOption={(opacityBy: string) => {\n          setConfig({\n            ...config,\n            plotOptions: { ...config.plotOptions, opacityBy: opacityBy === \"constant\" ? 0.5 : opacityBy },\n          });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      {typeof config.plotOptions.opacityBy === \"number\" ? (\n        <div className=\"mb-3 me-sm-2\">\n          {/* <label for=\"formControlRange\" className=\"form-label\">Example Range input</label> */}\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            min={0}\n            max={1}\n            step={0.01}\n            value={config.plotOptions.opacityBy}\n            onChange={(e) => {\n              setConfig({\n                ...config,\n                plotOptions: { ...config.plotOptions, opacityBy: e.currentTarget.valueAsNumber },\n              });\n            }}\n          />\n        </div>\n      ) : null}\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`grouping${id}Select`}\n        label=\"Group By\"\n        // disabled={colorCoding !== null}\n        option={config.plotOptions.groupBy}\n        options={availableProperties}\n        setOption={(groupBy: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, groupBy } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`sizeBy${id}Select`}\n        label=\"Size by\"\n        option={config.plotOptions.sizeBy}\n        options={availableProperties}\n        setOption={(sizeBy: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, sizeBy } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        inline={inline}\n        id={`connectBy${id}Select`}\n        label=\"Connect by\"\n        multi={true}\n        option={config.plotOptions.connectBy}\n        options={availableConnectByProperties}\n        setOption={(option: string[]) => {\n          setConfig({\n            ...config,\n            plotOptions: { ...config.plotOptions, connectBy: option.length === 0 ? null : option },\n          });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectKNNExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n    </form>\n  );\n};\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { IEnabledProjection } from \"../interfaces\";\nimport { ProjectionSettingsForm } from \"./form/ProjectionSettingsForm\";\n\nexport function ProjectionSettingsModal({\n  config: oldConfig,\n  availableProjections,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  availableOpacityProperties,\n  availableConnectByProperties,\n  onHide,\n  onSave,\n}: {\n  config: IEnabledProjection | undefined;\n  availableProjections?: string[];\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  availableOpacityProperties: string[];\n  availableConnectByProperties: string[];\n  onHide?(): void;\n  onSave?(value: IEnabledProjection): void;\n}) {\n  const [config, setConfig] = React.useState<IEnabledProjection | undefined>(oldConfig);\n\n  React.useEffect(() => {\n    setConfig(oldConfig);\n  }, [oldConfig]);\n\n  return (\n    <>\n      <Modal show={Boolean(config)} onHide={onHide} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Configure {config?.value}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {config ? (\n            <>\n              <div className=\"d-flex position-relative\">\n                <label\n                  className={`my-1 me-2 col-sm-2 d-flex align-items-center`}\n                  style={{ whiteSpace: \"nowrap\" }}\n                  htmlFor=\"projectionNameInput\"\n                >\n                  Name\n                </label>\n                <div className={`my-1 me-sm-2 flex-fill col-sm-10`}>\n                  <input\n                    type=\"text\"\n                    id=\"projectionNameInput\"\n                    className=\"form-control\"\n                    value={config.label}\n                    onChange={(e) =>\n                      setConfig({ ...config, value: e.currentTarget.value, label: e.currentTarget.value })\n                    }\n                  />\n                </div>\n              </div>\n              <ProjectionSettingsForm\n                inline={false}\n                availableProjections={availableProjections}\n                availableNearestNeighbors={availableNearestNeighbors}\n                availableClusters={availableClusters}\n                availableConnectByProperties={availableConnectByProperties}\n                availableProperties={availableProperties}\n                availableOpacityProperties={availableOpacityProperties}\n                setConfig={setConfig}\n                config={config}\n              />\n            </>\n          ) : null}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={() => (config ? onSave?.(config) : null)}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { LoadingPage } from \"./components/LoadingPage\";\nimport {\n  DEFAULT_CHEMBL_COLLECTION,\n  EActiveTabs,\n  ICollection,\n  IEnabledProjection,\n  IParticle,\n  IParticleSelection,\n  IPlotOptions,\n  IRegistry,\n} from \"./interfaces\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { HorizontalCollapse } from \"./components/HorizontalCollapse\";\nimport { ClusterSidePanel } from \"./ClusterSidePanel\";\nimport { Tooltip } from \"./utils/hooks\";\nimport { GridItemOptions } from \"./components/GridItemOptions\";\nimport { Grid } from \"./components/Grid\";\nimport { ComputeEmbeddingsForm, MSOForm, TanimotoForm, SubstructureMatchingForm } from \"./components/form\";\nimport { getChemblUMAPEmbedding } from \"./utils/api\";\nimport { ScatterPlot } from \"./components/ScatterPlot\";\nimport { InterpolationForm } from \"./components/form/InterpolationForm\";\nimport { MatchedMolecularPairsForm } from \"./components/form/MatchedMolecularPairsForm\";\nimport { NeighborSamplingForm } from \"./components/form/NeighborSamplingForm\";\nimport { RecomputeEmbeddingsForm } from \"./components/form/RecomputeEmbeddingsForm\";\nimport CreatableSelect from \"react-select/creatable\";\nimport { ParallelCoordinatesPlot } from \"./components/ParallelCoordinatesPlot\";\nimport { StonedSelfiesForm } from \"./components/form/StonedSelfiesForm\";\nimport { StructureImage } from \"./components/StructureImage\";\nimport { ProjectionSettingsModal } from \"./components/ProjectionSettingsModal\";\nimport { ProjectionSettingsForm } from \"./components/form/ProjectionSettingsForm\";\nimport pickBy from \"lodash.pickby\";\n// @ts-ignore Typings?\nimport Split from \"react-split\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nconst NR_OF_LATENT_SPACE_PARTICLES = 10;\n\nexport function EmbeddingPage({\n  registry,\n  collections,\n  setCollections,\n  interpolationStructures,\n  setInterpolationStructures,\n  setActiveTab,\n}: {\n  registry: IRegistry | null;\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  interpolationStructures: string[];\n  setInterpolationStructures(structures: string[]): void;\n  setActiveTab(tab: EActiveTabs): void;\n}) {\n  const allParticles = React.useMemo(\n    () => collections.reduce<IParticle[]>((acc, cur) => [...acc, ...cur.data], []),\n    [collections]\n  );\n\n  const [visibleNeighborhoodSamplings, setVisibleNeighborhoodSamplings] = React.useState<IParticle[] | null>(null);\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [clusterCollapsed, setClusterCollapsed] = React.useState<boolean>(false);\n  const [optionsCollapsed, setOptionsCollapsed] = React.useState<boolean>(false);\n  const [enabledProjections, setEnabledProjections] = React.useState<IEnabledProjection[]>([\n    {\n      label: \"chembl_umap\",\n      value: \"chembl_umap\",\n      projection: \"chembl_umap\",\n      plotOptions: {},\n    },\n  ]);\n  const [editProjection, setEditProjection] = React.useState<IEnabledProjection | undefined>(undefined);\n\n  const [hover, setHover] = React.useState<IParticle | null>(null);\n  const [filtered, setFiltered] = React.useState<IParticleSelection>(null);\n  // Wrap the setSelected into a shallow list compare to avoid rerenders\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // const selected = React.useMemo(() => mainParticles.filter((p) => p.selected), [mainParticles, _selectedChanged]);\n  // const selected = React.useMemo<{ [key: string]: IParticle[] } | undefined>(() => undefined, []);\n  const [selection, _setSelection] = React.useState<IParticleSelection>(null);\n  const setSelection = React.useCallback(\n    (s: IParticleSelection) => {\n      collections.forEach((c) => c.data.forEach((p) => (p.selected = false)));\n      if (s) {\n        const _setParticleSelected = (particle: IParticle) => (particle.selected = true);\n        if (Array.isArray(s)) {\n          s.forEach(_setParticleSelected);\n        } else {\n          Object.values(s).forEach((particles) => particles.forEach(_setParticleSelected));\n        }\n      }\n      _setSelection(s);\n    },\n    [collections]\n  );\n\n  // Plot options\n  const [plotOptions, setPlotOptions] = React.useState<IPlotOptions>({\n    colorBy: null,\n    opacityBy: null,\n    groupBy: null,\n    connectBy: null,\n    sizeBy: null,\n  });\n\n  const [customX, setCustomX] = React.useState<string | null>(null);\n  const [customY, setCustomY] = React.useState<string | null>(null);\n  const [customPlotSettings, setCustomPlotSettings] = React.useState<IEnabledProjection | undefined>(undefined);\n\n  // Ranking options\n  const [showSelectedOnly, setShowSelectedOnly] = React.useState<boolean>(false);\n\n  const [availableProperties, availableProjections, availableEmbeddings, availableNearestNeighbors, availableClusters] =\n    React.useMemo(() => {\n      const keys: (keyof IParticle)[] = [\"properties\", \"projection\", \"embedding\", \"nearest_neighbors\", \"clusters\"];\n      return keys.map((field) =>\n        Array.from(\n          allParticles\n            .reduce<Set<string>>((acc, cur) => {\n              Object.keys(cur[field] || {}).forEach((key) => acc.add(key));\n              return acc;\n            }, new Set())\n            .keys()\n        )\n      );\n    }, [allParticles]);\n\n  const availableOpacityProperties = React.useMemo(() => [...availableProperties, \"constant\"], [availableProperties]);\n  const availableConnectByProperties = React.useMemo(() => availableProperties, [availableProperties]);\n\n  React.useEffect(() => {\n    if (plotOptions.colorBy && !availableProperties.includes(plotOptions.colorBy)) {\n      // setPlotOptions({ ...plotOptions, colorBy: null });\n    }\n    if (\n      plotOptions.opacityBy &&\n      typeof plotOptions.opacityBy !== \"number\" &&\n      !availableOpacityProperties.includes(plotOptions.opacityBy)\n    ) {\n      setPlotOptions({ ...plotOptions, opacityBy: null });\n    }\n    if (plotOptions.groupBy && !availableProperties.includes(plotOptions.groupBy)) {\n      setPlotOptions({ ...plotOptions, groupBy: null });\n    }\n    if (\n      plotOptions.connectBy &&\n      plotOptions.connectBy.some((option) => !availableConnectByProperties.includes(option))\n    ) {\n      // setPlotOptions({ ...plotOptions, connectBy: null });\n    }\n    if (plotOptions.sizeBy && !availableProperties.includes(plotOptions.sizeBy)) {\n      setPlotOptions({ ...plotOptions, sizeBy: null });\n    }\n  }, [availableProperties, availableOpacityProperties, availableConnectByProperties, plotOptions]);\n\n  React.useEffect(\n    () => {\n      if (false && !collections.find((c) => c.name === DEFAULT_CHEMBL_COLLECTION)) {\n        getChemblUMAPEmbedding()\n          .then((data) => setCollections([...collections, { data, name: DEFAULT_CHEMBL_COLLECTION }]))\n          .catch((e) => console.error(\"Error loading chembl umap\", e));\n      }\n    },\n    [\n      /* collections, setCollections */\n    ]\n  );\n\n  const filteredCollections = React.useMemo<ICollection[]>(() => {\n    return filtered ? Object.entries(filtered).map(([name, data]) => ({ name, data })) : collections;\n  }, [filtered, collections]);\n\n  const visibleCollections = React.useMemo<ICollection[]>(() => {\n    return showSelectedOnly && selection\n      ? Object.entries(selection).map(([name, data]) => ({ name, data }))\n      : collections;\n  }, [collections, showSelectedOnly, selection]);\n\n  const latentSpaceCollections = React.useMemo<{ [key: string]: ICollection[] } | null>(() => {\n    return true\n      ? availableEmbeddings.reduce<{ [key: string]: any }>(\n          (acc, cur) => ({\n            ...acc,\n            [cur]: filteredCollections.map((c) => {\n              // Restrict to the first n particles\n              const data = c.data\n                .slice(0, NR_OF_LATENT_SPACE_PARTICLES)\n                .filter((d) => d.embedding?.[cur])\n                .map((d) => {\n                  return d.embedding![cur].map((y, x) => ({\n                    ...d,\n                    properties: {\n                      ...(d.properties || {}),\n                      latentX: x,\n                      latentY: y,\n                    },\n                  }));\n                })\n                .flat();\n              return {\n                ...c,\n                data,\n              };\n            }),\n          }),\n          {}\n        )\n      : null;\n  }, [filteredCollections, availableEmbeddings]);\n\n  return (\n    <>\n      <Tooltip>\n        {hover ? (\n          // <StructureCard\n          //   structure={hover}\n          //   showProperties={false}\n          //   style={{\n          //     width: 180,\n          //     backgroundColor: 'rgba(255, 255, 255, 0.2)'\n          //   }}\n          // />\n          <StructureImage\n            structure={hover.structure}\n            style={{\n              width: 180,\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }}\n          />\n        ) : null}\n      </Tooltip>\n      <ProjectionSettingsModal\n        config={editProjection}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProjections={availableProjections}\n        availableProperties={availableProperties}\n        availableOpacityProperties={availableOpacityProperties}\n        availableConnectByProperties={availableConnectByProperties}\n        onHide={() => setEditProjection(undefined)}\n        onSave={(value) => {\n          setEditProjection(undefined);\n          // TODO: Hacky way to distinguish if the custom plot or one of the added plots was edited.\n          if(enabledProjections.includes(editProjection!)) {\n            setEnabledProjections((projections) => projections.map((p) => (p === editProjection ? value : p)));\n          } else if(!customPlotSettings || customPlotSettings === editProjection) {\n            setCustomPlotSettings(value);\n          }\n        }}\n      />\n      <HorizontalCollapse\n        label=\"Options\"\n        position=\"left\"\n        size=\"col-3\"\n        collapsed={optionsCollapsed}\n        setCollapsed={setOptionsCollapsed}\n      >\n        <ComputeEmbeddingsForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <MSOForm\n          availableObjectives={registry?.objectives}\n          addCollection={(collection) => setCollections([...collections, collection])}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <InterpolationForm\n          open={false}\n          setCollection={(collection) => {\n            setCollections([...collections.filter((c) => c.name !== collection.name), collection]);\n          }}\n          loading={loading}\n          setLoading={setLoading}\n          setStructures={setInterpolationStructures}\n          structures={interpolationStructures}\n        />\n        <MatchedMolecularPairsForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          loading={loading}\n          setLoading={setLoading}\n          selection={selection}\n        />\n        <SubstructureMatchingForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <TanimotoForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <NeighborSamplingForm\n          visible={visibleNeighborhoodSamplings}\n          setVisible={setVisibleNeighborhoodSamplings}\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <RecomputeEmbeddingsForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <StonedSelfiesForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n      </HorizontalCollapse>\n      {/*<div className=\"mt-5\" style={{ position: \"relative\", width: 0 }}>\n        <div className=\"sticky-top\" style={{ top: \"20%\", width: 100 }}>\n          {hover ? (\n            <StructureCard\n              structure={hover}\n              style={{\n                left: 5,\n                width: \"100%\",\n              }}\n            />\n          ) : null}\n        </div>\n      </div>*/}\n      <Split\n        // minSize={250}\n        gutterSize={5}\n        sizes={[75, 25]}\n        className={`split col-${optionsCollapsed ? \"12\" : \"9\"}`}\n        style={{\n          height: \"100%\",\n          paddingLeft: optionsCollapsed ? 40 : 0,\n          // marginRight: 40,\n        }}\n        onDragEnd={() => {\n          window.dispatchEvent(new Event('resize'));\n        }}\n      >\n        <div\n          // className=\"col-md-10\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n            overflow: \"auto\",\n            paddingRight: 15,\n          }}\n        >\n          <LoadingPage\n            loading={loading && collections.length === 0}\n            fallback=\"Please select structures for embedding\"\n            loadingText=\"Computing embedding of structures...\"\n          >\n            {collections.length > 0 ? (\n              <>\n                <details>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Plot Options <small className=\"text-muted\">to customize the projection plots</small>\n                    </h6>\n                  </summary>\n                  <div className=\"ms-3\">\n                    {[\n                      {\n                        name: \"General\",\n                        plotOptions,\n                        setter: (options: Partial<IPlotOptions>) => setPlotOptions({ ...plotOptions, ...options }),\n                      },\n                      ...collections.map((collection) => ({\n                        name: collection.name,\n                        plotOptions: collection.plotOptions || {},\n                        setter: (options: Partial<IPlotOptions>) =>\n                          setCollections(\n                            collections.map((c) =>\n                              c === collection\n                                ? {\n                                    ...c,\n                                    plotOptions: {\n                                      ...(c.plotOptions || {}),\n                                      ...options,\n                                    },\n                                  }\n                                : c\n                            )\n                          ),\n                      })),\n                    ].map(({ name, setter, plotOptions }, i) => (\n                      <details open={i === 0}>\n                        <summary>\n                          {name} Options{\" \"}\n                          <small className=\"text-muted\">{Object.values(plotOptions).filter(Boolean).length}</small>\n                        </summary>\n                        <ProjectionSettingsForm\n                          inline={true}\n                          availableNearestNeighbors={availableNearestNeighbors}\n                          availableClusters={availableClusters}\n                          availableConnectByProperties={availableConnectByProperties}\n                          availableProperties={availableProperties}\n                          availableOpacityProperties={availableOpacityProperties}\n                          setConfig={(newConfig) => setter(newConfig.plotOptions)}\n                          config={{\n                            label: \"General\",\n                            value: \"\",\n                            projection: \"\",\n                            plotOptions,\n                          }}\n                        />\n                      </details>\n                    ))}\n                  </div>\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Parallel Coordinates <small className=\"text-muted\">to compare multiple numeric properties</small>\n                    </h6>\n                  </summary>\n                  <ParallelCoordinatesPlot\n                    collections={filteredCollections}\n                    selection={selection}\n                    setSelection={setSelection}\n                  />\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Custom Plot <small className=\"text-muted\">to compare two arbitrary properties</small>\n                    </h6>\n                  </summary>\n                  <Grid>\n                    <GridItemOptions\n                      key=\"Custom\"\n                      gridOptions={{\n                        w: 12,\n                        h: 25,\n                        y: 0,\n                        x: 0,\n                      }}\n                      onSettings={() => setEditProjection(customPlotSettings || {\n                        label: 'Custom',\n                        value: 'Custom',\n                        projection: null,\n                        plotOptions: {}\n                      })}\n                    >\n                      <ScatterPlot\n                        title={customX && customY ? `${customX} vs. ${customY}` : \"Please select two axis properties\"}\n                        collections={filteredCollections}\n                        options={{ ...plotOptions, ...pickBy(customPlotSettings?.plotOptions || {}, (v) => v) }}\n                        hover={hover}\n                        setHover={setHover}\n                        selected={selection}\n                        setSelected={setSelection}\n                        xAccessor={`properties.${customX}`}\n                        yAccessor={`properties.${customY}`}\n                      >\n                        <div\n                          style={{\n                            width: 150,\n                            position: \"absolute\",\n                            left: -45,\n                            top: \"50%\",\n                            transform: \"rotate(-90deg)\",\n                          }}\n                        >\n                          <select\n                            className=\"form-control form-control-sm\"\n                            value={customY || \"\"}\n                            onChange={(e) => setCustomY(e.currentTarget.value || null)}\n                          >\n                            <option value=\"\">Select...</option>\n                            {availableProperties.map((p) => (\n                              <option key={p}>{p}</option>\n                            ))}\n                          </select>\n                        </div>\n                        <div\n                          style={{\n                            width: 150,\n                            position: \"absolute\",\n                            left: \"40%\",\n                            bottom: 0,\n                          }}\n                        >\n                          <select\n                            className=\"form-control form-control-sm\"\n                            value={customX || \"\"}\n                            onChange={(e) => setCustomX(e.currentTarget.value || null)}\n                          >\n                            <option value=\"\">Select...</option>\n                            {availableProperties.map((p) => (\n                              <option key={p}>{p}</option>\n                            ))}\n                          </select>\n                        </div>\n                      </ScatterPlot>\n                    </GridItemOptions>\n                  </Grid>\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Latent Space Visualization <small className=\"text-muted\"></small>\n                    </h6>\n                  </summary>\n                  <Grid>\n                    {Object.keys(latentSpaceCollections || []).map((embedding) => (\n                      <GridItemOptions\n                        key={embedding}\n                        gridOptions={{\n                          w: 12,\n                          h: 25,\n                          y: 0,\n                          x: 0,\n                        }}\n                      >\n                        <ScatterPlot\n                          title={`Top ${NR_OF_LATENT_SPACE_PARTICLES} in ${embedding.toUpperCase()} Latent Space`}\n                          collections={latentSpaceCollections![embedding]}\n                          options={plotOptions}\n                          hover={hover}\n                          setHover={(hover) => {\n                            setHover(\n                              hover\n                                ? collections\n                                    .find((c) => c.name === hover.collection)\n                                    ?.data.find((d) => d.index === hover.index) || null\n                                : null\n                            );\n                          }}\n                          selected={selection}\n                          setSelected={(selected) => {\n                            setSelection(selected);\n                          }}\n                          xAccessor={`properties[latentX]`}\n                          yAccessor={`properties[latentY]`}\n                        />\n                      </GridItemOptions>\n                    ))}\n                  </Grid>\n                </details>\n\n                <details open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Projections{\" \"}\n                      <small className=\"text-muted\">\n                        {enabledProjections.length} out of {availableProjections.length}\n                      </small>\n                    </h6>\n                  </summary>\n                  <CreatableSelect<IEnabledProjection, true>\n                    isMulti\n                    name=\"projections\"\n                    value={enabledProjections}\n                    onChange={(e) => {\n                      setEnabledProjections(e.map((v) => v));\n                    }}\n                    onCreateOption={(label) => {\n                      const newOption: IEnabledProjection = {\n                        label: label,\n                        value: label,\n                        projection: \"\",\n                        plotOptions: {},\n                      };\n                      setEnabledProjections([...enabledProjections, newOption]);\n                      setEditProjection(newOption);\n                    }}\n                    options={availableProjections.map((p) => ({\n                      label: p,\n                      value: p,\n                      projection: p,\n                      plotOptions: {},\n                    }))}\n                    closeMenuOnSelect={false}\n                  />\n                  <div className=\"row\" style={{ position: \"relative\" }}>\n                    <Grid>\n                      {\n                        enabledProjections\n                          // .filter((p) => availableProjections.includes(p.projection))\n                          .map((config, i) => (\n                            <GridItemOptions\n                              key={config.value}\n                              onClose={() => {\n                                setEnabledProjections(enabledProjections.filter((p) => p !== config));\n                              }}\n                              onSettings={() => setEditProjection(config)}\n                              gridOptions={{\n                                w: 6,\n                                h: 25,\n                                y: 0 + Math.floor(i / 2) * 25,\n                                x: i % 2 === 0 ? 0 : 6,\n                              }}\n                              renderInfo={() => (\n                                <>\n                                  {filteredCollections.map((c) => (\n                                    <div className=\"d-flex flex-column\">\n                                      <strong className=\"text-nowrap text-truncate\">{c.name}</strong>\n                                      {Object.entries(c.projections?.[config.projection!] || {})\n                                        .filter(([key, value]) => typeof value === \"number\")\n                                        .map(([key, value]) => (\n                                          <div className=\"text-nowrap d-flex\">\n                                            <span className=\"text-truncate\">{key}</span>\n                                            <span className=\"flex-fill\">\n                                              : {(value as number).toFixed(3) || \"Not available\"}\n                                            </span>\n                                          </div>\n                                        ))}\n                                    </div>\n                                  ))}\n                                </>\n                              )}\n                            >\n                              <ScatterPlot\n                                title={config.value}\n                                collections={filteredCollections}\n                                // Pick only \"valid\" values, as otherwise null would override the previous value\n                                options={{ ...plotOptions, ...pickBy(config.plotOptions, (v) => v) }}\n                                hover={hover}\n                                setHover={setHover}\n                                selected={selection}\n                                setSelected={setSelection}\n                                xAccessor={`projection[${config.projection}][0]`}\n                                yAccessor={`projection[${config.projection}][1]`}\n                              />\n                            </GridItemOptions>\n                          )) as any\n                      }\n                    </Grid>\n                  </div>\n                </details>\n\n                <StructureCardGrid\n                  collections={visibleCollections}\n                  selected={selection}\n                  setSelected={setSelection}\n                  setFiltered={setFiltered}\n                  tableClass=\"main-ranking\"\n                  structureCardProps={(structure) => ({\n                    className: structure === hover ? \"border-primary\" : structure.selected ? \"border-secondary\" : \"\",\n                  })}\n                  renderTopForm={\n                    <>\n                      <div className=\"form-check form-switch me-sm-2\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"form-check-input\"\n                          id=\"customSwitch1\"\n                          checked={showSelectedOnly}\n                          onChange={(e) => setShowSelectedOnly(e.currentTarget.checked)}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"customSwitch1\">\n                          Show selected only\n                        </label>\n                      </div>\n                      <button\n                        className=\"btn btn-sm btn-primary\"\n                        disabled={!selection}\n                        onClick={() => {\n                          setInterpolationStructures(\n                            Object.values(selection!)\n                              .flat()\n                              .map(({ structure }) => structure)\n                          );\n                          setActiveTab(EActiveTabs.INTERPOLATION);\n                        }}\n                      >\n                        Use for interpolation\n                      </button>\n                    </>\n                  }\n                />\n              </>\n            ) : null}\n          </LoadingPage>\n        </div>\n        <div>\n          {/* <HorizontalCollapse\n        label=\"Collections\"\n        position=\"right\"\n        size=\"col-md-4\"\n        collapsed={clusterCollapsed}\n        setCollapsed={setClusterCollapsed}\n      > */}\n          <ReactResizeDetector handleWidth>\n            {({ width, height }) => (\n              <div\n                style={{\n                  height: \"100%\",\n                  overflow: \"auto\",\n                  paddingRight: 15,\n                }}\n              >\n                {width! > 200 ? (\n                  <ClusterSidePanel\n                    collections={collections}\n                    setCollections={setCollections}\n                    selection={selection}\n                    setSelection={setSelection}\n                    setVisibleNeighborhoodSamplings={setVisibleNeighborhoodSamplings}\n                    hover={hover}\n                    setHover={setHover}\n                  />\n                ) : (\n                  <span style={{ transform: \"rotate(90deg)\", position: \"absolute\", top: \"50%\", whiteSpace: \"nowrap\" }}>\n                    Additional Options\n                  </span>\n                )}\n              </div>\n            )}\n          </ReactResizeDetector>\n          {/* </HorizontalCollapse> */}\n        </div>\n      </Split>\n    </>\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"lineupjs/build/LineUpJS.css\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport \"./scss/main.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { stringifyWithoutCycles } from \".\";\nimport { IInterpolatedParticle, IParticle, IRegistry, IServerCollection } from \"../interfaces\";\n\nfunction fetchRaw({ url, data, method = \"POST\" }: { url: string; data?: any; method?: string }): Promise<Response> {\n  return fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    // @ts-ignore\n    // mode: '*cors', // no-cors, *cors, same-origin\n    method,\n    redirect: \"follow\",\n    body: stringifyWithoutCycles(data),\n  }).then(async (res) => {\n    if (!res.ok) {\n      throw Error((await res.json().catch(() => null))?.message || res.statusText);\n    }\n    return res;\n  });\n}\n\nfunction fetchJSON<T>(url: string, data: any): Promise<T> {\n  return fetchRaw({ url, data }).then((res) => res.json());\n}\n\nfunction fetchText(url: string, data: any): Promise<string> {\n  return fetchRaw({ url, data }).then((res) => res.text());\n}\n\nexport function runMSO(options: {\n  structure: string;\n  iterations?: number;\n  num_swarms?: number;\n  num_part?: number;\n  v_min?: number;\n  v_max?: number;\n  inertia_weight?: number;\n  phi1?: number;\n  phi2?: number;\n  phi3?: number;\n  objectives: any[];\n}): Promise<IServerCollection<IParticle>> {\n  return fetchJSON(\"/api/pso/\", options);\n}\n\nexport function embedStructures(data: {\n  structures: {\n    smiles: string;\n    embeddings?: {[key: string]: number[]};\n  }[];\n  include_embedding?: boolean;\n}): Promise<IServerCollection<IParticle>> {\n  return fetchJSON<IServerCollection<IParticle>>(\"/api/embedding/\", data);\n}\n\nexport function getChemblUMAPEmbedding(): Promise<IParticle[]> {\n  return fetchRaw({\n    url: \"/api/embedding/\",\n    method: \"GET\",\n  }).then((res) => res.json());\n}\n\nexport function interpolateStructures(\n  structures: string[],\n  maxSamples?: number\n): Promise<IServerCollection<IInterpolatedParticle>> {\n  return fetchJSON(\"/api/interpolation/\", {\n    structures,\n    maxSamples,\n  });\n}\n\nexport function getImageURL(\n  structure: string,\n  substructure: string | null = null,\n  align: string | null = null\n): string {\n  return `/api/image/?structure=${encodeURIComponent(structure)}${\n    substructure ? `&substructure=${encodeURIComponent(substructure)}` : \"\"\n  }${align ? `&align=${encodeURIComponent(align)}` : \"\"}`;\n}\n\nexport function getReducedImages(\n  structures: string[],\n  method: \"single\" | \"murcko\" | \"mcs\" | \"similarity\" | \"auto\" = \"auto\"\n): Promise<string | null> {\n  return fetchText(\"/api/image/\", {\n    structures,\n    method,\n  }).catch(() => null);\n}\n\nexport function computeProjectionsWithModels(\n  particles: Pick<IParticle, 'structure' | 'embedding'>[],\n  models: { [key: string]: string }\n): Promise<{\n  projections: IServerCollection[\"projections\"];\n  projection: { [key: string]: number[][] };\n  additional?: { [key: string]: number[][] | null };\n}> {\n  return fetchJSON(\"/api/projection/models\", {\n    particles: particles.map((p) => ({structure: p.structure, embedding: p.embedding})),\n    models,\n  });\n}\n\nexport function hasSubstructureMatch(\n  structures: string[],\n  smarts: string\n): Promise<{\n  validity: { [key: string]: boolean };\n  counts: { [key: string]: number };\n}> {\n  return fetchJSON(\"/api/mol/substructures/\", {\n    structures,\n    smarts,\n  });\n}\n\nexport function getTanimotoSimilarity(\n  structures: string[],\n  reference: string,\n  fingerprint: string\n): Promise<{\n  tanimoto: { [key: string]: number };\n}> {\n  return fetchJSON(\"/api/mol/tanimoto/\", {\n    structures,\n    reference,\n    fingerprint,\n  });\n}\n\nexport function getNeighborSamples(\n  structure: string,\n  samples: number,\n  method: string,\n  scale: number\n): Promise<IServerCollection<IInterpolatedParticle>> {\n  return fetchJSON(\"/api/sampling/\", {\n    structure,\n    samples,\n    method,\n    scale,\n  });\n}\n\nexport function getMatchedMolecularPairs(options: {\n  structure: string;\n  min_variable_size?: number;\n  max_variable_size?: number;\n  min_constant_size?: number;\n  min_radius?: number;\n  min_pairs?: number;\n  substructure?: string;\n}): Promise<{\n  structures: string[];\n}> {\n  return fetchJSON(\"/api/mmp/\", options);\n}\n\nexport function getStonedSelfies(options: {\n  structure: string;\n  substructure: string;\n  random_samples?: number;\n  max_mutations?: number;\n}): Promise<{\n  structures: string[];\n}> {\n  return fetchJSON(\"/api/stoned_selfies/\", options);\n}\n\nexport function getRegistry(): Promise<IRegistry> {\n  return fetchRaw({\n    url: \"/api/registry/\",\n    method: \"GET\",\n  }).then((res) => res.json());\n}\n","import throttle from \"lodash.throttle\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {CollectionContext} from '../CollectionContext';\n\nexport function useSyncedRef<T>(value: T): React.MutableRefObject<T> {\n  const valueRef = React.useRef<T>(value);\n  valueRef.current = value;\n  return valueRef;\n}\n\nexport const useMousePosition = (active: boolean): { x: number; y: number } | null => {\n  const [position, setPosition] = React.useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n\n  React.useEffect(() => {\n    if (active) {\n      const setFromEvent = throttle((e: MouseEvent) => setPosition({ x: e.clientX, y: e.clientY }), 5);\n      window.addEventListener(\"mousemove\", setFromEvent);\n\n      return () => {\n        window.removeEventListener(\"mousemove\", setFromEvent);\n      };\n    } else {\n      setPosition(null);\n    }\n  }, [active]);\n\n  return position;\n};\n\nexport const Tooltip = ({ children, anchor = 'right' }: { children: React.ReactNode, anchor?: 'top' | 'right' }) => {\n  const [node, setNode] = React.useState<HTMLDivElement | null>(null);\n  const position = useMousePosition(Boolean(node && children));\n\n  React.useEffect(() => {\n    const container = document.createElement(\"div\");\n    container.style.position = \"absolute\";\n    container.style.pointerEvents = \"none\";\n    container.style.transform = anchor === 'right' ? \"translate(10%, -50%)\" : \"translate(-50%, 5%)\";\n    container.style.zIndex = \"10000\";\n    document.body.appendChild(container);\n    setNode(container);\n\n    return () => {\n      document.body.removeChild(container);\n    };\n  }, [anchor]);\n\n  React.useEffect(() => {\n    if (node) {\n      if (position) {\n        node.style.left = `${position.x}px`;\n        node.style.top = `${position.y}px`;\n        node.style.display = \"block\";\n      } else {\n        node.style.display = \"none\";\n      }\n    }\n  }, [node, position]);\n\n  return node && children && position ? ReactDOM.createPortal(children, node) : null;\n};\n\nexport function usePrevious<T>(value: T | null): T | null {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T | null>(null);\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\n\nexport function useNameInput(id: string, initialValue: string): [string, React.Dispatch<React.SetStateAction<string>>, React.ReactNode] {\n  const [name, setName] = React.useState<string>(\"\");\n  const uniqueRef = React.useRef(id);\n  const collections = React.useContext(CollectionContext);\n\n  // Remove any [ ] . characters as they are matched with lodash.get and break lineup for example.\n  const currentName = (name || initialValue).replaceAll(/\\[|\\]|\\./g, '_');\n\n  const nameAlreadyTaken = collections.some((c) => c.name === currentName);\n\n  return [currentName, setName, <div className=\"mb-3\">\n    <label htmlFor={uniqueRef.current}>Name</label>\n    <input\n      type=\"text\"\n      className={`form-control form-control-sm ${nameAlreadyTaken ? \"is-invalid\" : \"\"}`}\n      id={uniqueRef.current}\n      required={nameAlreadyTaken ? true : !initialValue} // Required depends if we have a valid placeholder\n      pattern={nameAlreadyTaken ? '^$' : undefined} // Add a regex matching only the empty string if the name is already taken\n      value={name}\n      placeholder={initialValue}\n      onChange={(e) => setName(e.currentTarget.value)}\n    />\n    {nameAlreadyTaken ? (\n      <div className=\"invalid-feedback\">Collection with this name already exists.</div>\n    ) : null}\n  </div>];\n}\n\nexport function timeIt<T>(name: string, f: () => T): T {\n  console.time(name);\n  const result = f();\n  console.timeEnd(name);\n  return result;\n}","import * as React from \"react\";\n\nexport const DetailsSummaryWrapper = ({\n  open = false,\n  lead = true,\n  title,\n  children,\n}: {\n  open?: boolean;\n  lead?: boolean;\n  title: React.ReactNode;\n  children: React.ReactNode;\n}) => {\n\n  return (\n    <details open={open}>\n      <summary className={`d-flex ${lead ? 'lead' : ''}`} style={{alignItems: 'center'}}>{title}</summary>\n      {children}\n    </details>\n  );\n};\n","import * as React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { DetailsSummaryWrapper } from \"./DetailsSummaryWrapper\";\n\nexport const FormWrapper = ({\n  open = false,\n  title,\n  loading = false,\n  setLoading = () => null,\n  onSubmit,\n  children,\n}: {\n  open?: boolean;\n  title: React.ReactNode;\n  loading?: boolean;\n  setLoading?(loading: boolean): void;\n  onSubmit(): void | Promise<any>;\n  children: React.ReactNode;\n}) => {\n  const [error, setError] = React.useState<string | null>(null);\n\n  return (\n    <DetailsSummaryWrapper open={open} title={title}>\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (e.currentTarget.reportValidity()) {\n            setLoading(true);\n\n            try {\n              setError(null);\n              await onSubmit();\n            } catch (e) {\n              console.error(e);\n              setError(e.toString());\n            }\n\n            setLoading(false);\n          }\n        }}\n      >\n        {error ? (\n          <Alert variant=\"danger\" onClose={() => setError(null)} dismissible>\n            <p>{error}</p>\n          </Alert>\n        ) : null}\n        {children}\n      </form>\n\n    </DetailsSummaryWrapper>\n  );\n};\n","import { extent } from \"d3-array\";\nimport { scaleLinear } from \"d3-scale\";\n\nexport function normalizeArray<T extends number | number[]>(\n  list: T,\n  range: [number, number],\n  domain?: [number | undefined, number | undefined]\n): T {\n  if (typeof list === \"number\" || !Array.isArray(list)) {\n    return list;\n  }\n  if (!domain) {\n    domain = extent(list);\n  }\n  if (typeof domain[0] !== \"number\" || typeof domain[1] !== \"number\") {\n    return list;\n  }\n  if (domain[0] === domain[1] && domain[0] >= range[0] && domain[0] <= range[1]) {\n    return list;\n  }\n  var scale = scaleLinear()\n    .domain(domain as [number, number])\n    .range(range);\n  return list.map((n) => scale(n)) as any;\n}\n\nexport function toNumber(n: number | string | null | boolean | undefined, def: number = 0): number {\n  if (n == null) {\n    return def;\n  }\n  if (n === true) {\n    return 1;\n  } else if (n === false) {\n    return 0;\n  }\n  const v = parseFloat(n.toString());\n  return isNaN(v) ? def : v;\n}\n\nexport function toExtent<T>(\n  data: T[],\n  getter: (d: T) => [number, number] | [undefined, undefined] | undefined\n): [number, number] | [undefined, undefined] {\n  return data.reduce<[number, number] | [undefined, undefined]>(\n    (acc, d) => {\n      const current = getter(d);\n      if (current) {\n        if (acc[0] == null || (current[0] != null && current[0]! < acc[0]!)) {\n          acc[0] = current[0];\n        }\n        if (acc[1] == null || (current[1] != null && current[1]! > acc[1]!)) {\n          acc[1] = current[1];\n        }\n      }\n      return acc;\n    },\n    [undefined, undefined]\n  );\n}\n\nexport function stringifyWithoutCycles(data: any): string {\n  return JSON.stringify(data, (key, value) => {\n    if (key === \"knn_particles\") {\n      return null;\n    }\n    return value;\n  });\n}\n\nexport async function downloadFile(blob: Blob, name: string) {\n  const href = await URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = href;\n  link.download = name;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nexport async function downloadJSONFile(data: any, name: string) {\n  const json = stringifyWithoutCycles(data);\n  const blob = new Blob([json], { type: \"application/json\" });\n  downloadFile(blob, name + \".json\");\n}\n\nexport async function downloadCSVFile(data: string, name: string) {\n  const blob = new Blob([data], { type: \"text/csv\" });\n  downloadFile(blob, name + \".csv\");\n}\n\n/**\n * Injects a cached getter function into an object.\n * @param object Object to be inejected into.\n * @param key Key of the newly injected getter.\n * @param valueCreator Function returning the value of the injected getter.\n * @param options Options.\n */\nexport function injectGetter<T>(object: object, key: PropertyKey, valueCreator: () => T, {\n  cache = true\n}: {\n  cache?: boolean;\n} = {}): void {\n  Object.defineProperty(object, key, {\n    get: function () {\n      const value = valueCreator();\n      if(cache) {\n        // Remove the getter function.\n        delete (object as any)[key];\n        // Assign the actual value and return it.\n        // return ((object as any)[key] = value);\n        // Inject the getter again instead, now without the \"replace\" logic.\n        injectGetter(object, key, () => value, { cache: false });\n      }\n      return value;\n    },\n    configurable: true,\n    enumerable: true,\n  });\n}\n","import * as React from \"react\";\nimport { getImageURL, getReducedImages } from \"../utils/api\";\nimport { svgToImageSrc } from \"./ranking/StructureImageRenderer\";\n\nexport const StructureImage = React.memo(\n  ({\n    structure,\n    align,\n    image,\n    ...innerProps\n  }: {\n    structure: string | string[];\n    align?: string;\n    image?: string;\n  } & React.ImgHTMLAttributes<HTMLImageElement>) => {\n    const [src, setSrc] = React.useState<string | undefined | null>(undefined);\n\n    const text = /* Array.isArray(structure)\n      ? `Common structure of ${structure.length} structure`\n      : `Structure of ${structure}` */ '';\n\n    React.useEffect(() => {\n      if(image) {\n        setSrc(svgToImageSrc(image));\n      } else if (Array.isArray(structure)) {\n        getReducedImages(structure).then((res) => {\n          setSrc(res ? svgToImageSrc(res) : null);\n        });\n      } else {\n        setSrc(getImageURL(structure, null, align));\n      }\n    }, [structure, image, align]);\n\n    return src ? (\n      <img\n        src={src}\n        alt={text}\n        title={text}\n        loading={\"lazy\"}\n        onLoad={(e) => (e.currentTarget.style.visibility = \"visible\")}\n        onError={(e) => (e.currentTarget.style.visibility = \"hidden\")}\n        {...(innerProps || {})}\n      />\n    ) : (src === undefined ? (\n      <div style={{ ...(innerProps?.style || {}), display: \"flex\", justifyContent: \"center\" }}>\n        <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\" />\n      </div>\n    ) : null);\n  }\n);\n","export const DEFAULT_COLORWAY = ['#4e79a7', '#f28e2c', '#e15759', '#76b7b2', '#59a14f', '#edc949', '#af7aa1', '#ff9da7', '#9c755f', '#bab0ab'];\n\nexport const ARRAY_DISTANCE_METRICS: {[key: string]: (value: number, values: number[]) => number} = {\n    euclidean_difference: (value, values) => Math.sqrt(values.reduce((acc, cur) => acc + Math.pow(cur - value, 2), 0)),\n    mean: (value, values) => (values.reduce((acc, cur) => acc + Math.abs(cur), 0) / values.length),\n    mean_rel_diff: (value, values) => (values.reduce((acc, cur) => acc + Math.abs(cur), 0) / values.length) / value,\n    mean_rel_diff_log10: (value, values) => (values.reduce((acc, cur) => acc + Math.log10(Math.abs(cur)), 0) / values.length) / Math.log10(value),\n    max: (value, values) => Math.max(...values),\n    max_difference: (value, values) => Math.abs(Math.abs(value) - Math.abs(Math.max(...values))),\n    min: (value, values) => Math.min(...values),\n    min_difference: (value, values) => Math.abs(Math.abs(value) - Math.abs(Math.min(...values))),\n}\n\nexport const isProxySymbol = Symbol(\"isProxy\")\n","export interface INearestNeighbors {\n  distance_metric: string;\n  knn_dist: number[];\n  knn_ind: number[];\n  knn_particles: IParticle[];\n}\n\nexport interface IParticle {\n  selected?: boolean;\n  collection: string;\n  index?: number;\n  structure: string;\n  original_structure?: string;\n  images?: string[];\n  embedding?: { [key: string]: number[] };\n  nearest_neighbors?: {\n    [key: string | symbol]: INearestNeighbors;\n  };\n  clusters?: {\n    [key: string | symbol]: {\n      distance_metric: string;\n      label: number;\n    };\n  };\n  properties: {\n    [key: string | symbol]: string | number | boolean | null | undefined;\n  };\n  projection: { [key: string]: number[] };\n}\n\nexport function isParticle(p: any): p is IParticle {\n  return p.structure && p.projection;\n}\n\nexport const DEFAULT_COLLECTION = \"Particles\";\nexport const DEFAULT_CHEMBL_COLLECTION = \"ChEMBL\";\n\nexport interface IPlotOptions {\n  colorBy: string | null;\n  opacityBy: number | string | null;\n  groupBy: string | null;\n  connectBy: string[] | null;\n  sizeBy: string | null;\n}\n\nexport interface IEnabledProjection {\n  label: string;\n  value: string;\n  projection: string | null;\n  plotOptions: Partial<IPlotOptions>;\n}\n\nexport interface IServerCollection<T extends IParticle = IParticle> {\n  data: T[];\n  projections?: {\n    [key: string]: {\n      trustworthiness?: number;\n      trustworthiness_additional?: number;\n      explained_variance?: number;\n      model?: string;\n    };\n  };\n}\n\nexport interface ICollection<T extends IParticle = IParticle> extends IServerCollection<T> {\n  name: string;\n  type?: \"neighborhoodSampling\";\n  hidden?: boolean;\n  plotOptions?: Partial<IPlotOptions>;\n}\n\nexport interface IInterpolatedParticle extends IParticle {\n  scaffold: boolean;\n}\n\nexport interface IObjective {\n  description: string;\n  name: string;\n  weight: number;\n  desirability: { x: number; y: number }[];\n  additional_args?: { [key: string]: string };\n}\nexport interface IRegistry {\n  objectives: IObjective[];\n}\n\nexport declare type IParticleSelection = { [key: string]: IParticle[] } | null;\n\nexport enum EActiveTabs {\n  EMBEDDING,\n  INTERPOLATION,\n}\n"],"sourceRoot":""}