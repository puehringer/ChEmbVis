{"version":3,"sources":["components/StructureCardGrid.tsx","components/ranking/LineupWrapper.tsx","components/ranking/StructureImageRenderer.ts","components/ranking/StructureImageColumn.ts","components/StructureCard.tsx","components/LoadingPage.tsx","CollectionContext.tsx","components/HorizontalCollapse.tsx","components/form/InterpolationForm.tsx","components/FileUploadModal.tsx","App.tsx","InterpolationPage.tsx","components/PlotComponent.tsx","components/ButtonWithUpload.tsx","components/JSMEModal.tsx","components/UseStructureInputAddon.tsx","components/CurveEditorModal.tsx","components/form/MSOForm.tsx","components/form/ComputeEmbeddingsForm.tsx","components/form/SubstructureMatchingForm.tsx","components/form/TanimotoForm.tsx","components/GridItemOptions.tsx","components/Grid.tsx","components/ParallelCoordinatesPlot.tsx","components/LocalNeighborhoodPlot.tsx","components/GroupFlowSankeyPlot.tsx","ClusterSidePanel.tsx","components/ScatterPlot.tsx","components/form/MatchedMolecularPairsForm.tsx","components/form/NeighborSamplingForm.tsx","components/form/RecomputeEmbeddingsForm.tsx","components/form/StonedSelfiesForm.tsx","components/PlotSelect.tsx","components/PlotSelectJaccardExtension.tsx","components/PlotSelectNNDiffExtension.tsx","components/PlotSelectKNNExtension.tsx","components/PlotSelectClusterExtension.tsx","components/PlotSelectEvalExtension.tsx","components/form/ProjectionSettingsForm.tsx","components/ProjectionSettingsModal.tsx","EmbeddingPage.tsx","reportWebVitals.ts","index.tsx","utils/api.tsx","utils/hooks.tsx","components/form/DetailsSummaryWrapper.tsx","components/form/FormWrapper.tsx","utils/index.ts","components/StructureImage.tsx","utils/constants.ts","interfaces.tsx"],"names":["StructureCardGridUnwrapped","collections","structureCardProps","tableClass","renderTopForm","setSelected","selected","setFiltered","initialMode","React","cardSize","setCardSize","mode","setMode","external","setExternal","counter","setCounter","gridSize","className","style","height","type","title","onClick","c","role","disabled","marginRight","onSelectionSet","lineup","rankings","selectionColumn","find","col","SelectionColumn","getSortCriteria","length","isSortedByMe","asc","sortByMe","display","gridTemplateColumns","gridAutoRows","gridGap","map","collection","data","flat","structure","i","full","structures","undefined","StructureCardGrid","buildDefaultRanking","rankingBuilder","buildRanking","supportTypes","allColumns","LineupWrapper","getRankingBuilders","adjustRankings","align","innerProps","divRef","lineupRef","rankingRef","indexMapRef","disableLineUpSelectionListener","setSelectedRef","useSyncedRef","setFilteredRef","onSelectionSetRef","mergedData","reduce","acc","cur","forEach","d","push","_dataset","name","_particle","current","destroy","rankingBuilders","b","builder","animated","castArray","ranking","aggregationStrategy","propagateAggregationState","registerColumnType","StructureImageColumn","registerRenderer","StructureImageRenderer","livePreviews","filter","sidePanel","dynamicHeight","defaultHeight","padding","deriveColumns","column","buildStringColumn","label","renderer","width","build","mergedDataProperties","properties","propertyWithMostEntries","Object","keys","lazyColumns","key","getOwnPropertyDescriptor","propertiesBuilder","includes","columns","groupRenderer","buildTaggle","imageColumn","getRenderer","console","error","debouncedWidthChanged","debounce","prev","Math","min","max","update","debouncedFilterChanged","hasSubstructureMatch","then","matches","validSmiles","entries","counts","smiles","setFilter","valid","Set","filterMissing","catch","e","on","Column","EVENT_WIDTH_CHANGED","StringColumn","EVENT_FILTER_CHANGED","rowsToSelection","rows","LineUp","EVENT_SELECTION_CHANGED","a","view","getSelection","disableTrigger","LocalDataProvider","EVENT_ADD_COLUMN","index","columnName","desc","toLowerCase","lazy","createdColumnDesc","createdColumn","getFirstRanking","insertAfter","create","markDirty","EVENT_ORDER_CHANGED","oldSelection","newSelection","isEqual","slice","sort","getRankings","set","Map","structureColumn","flatColumns","setAlign","selectedIndices","values","p","get","setSelection","ref","flex","fontSize","template","svgToImageSrc","svg","btoa","svgToCSSBackground","ERenderMode","CELL","GROUP","n","renderMissingDOM","v","images","backgroundImage","value","getValue","abortAble","Promise","resolve","setTimeout","image","getImageURL","getFilter","getAlign","href","context","group","tasks","groupRows","getReducedImages","Array","from","row","getLabel","res","structureFilter","this","isFiltered","has","size","fire","EVENT_DIRTY_VALUES","EVENT_DIRTY","StructureCard","enableModeSwitch","_enableModeSwitch","showProperties","singleMode","setSingleMode","Boolean","s","toLocaleString","LoadingPage","children","loading","loadingText","fallback","flexDirection","overflow","animation","CollectionContext","HorizontalCollapse","position","collapsed","setCollapsed","oppositePosition","window","dispatchEvent","Event","collapseButton","top","InterpolationForm","open","setCollection","setStructures","setLoading","useNameInput","setName","nameInput","onSubmit","validStructures","interpolateStructures","serverCollection","htmlFor","id","onChange","currentTarget","split","join","curr","aria-hidden","FileUploadModal","setOpen","onSave","input","setInput","handleClose","handleSave","show","onHide","Header","closeButton","Title","Body","files","text","substr","Footer","variant","App","importFileModalShow","setImportFileModalShow","EActiveTabs","EMBEDDING","activeTab","setActiveTab","_setCollections","registry","setRegistry","interpolationStructures","setInterpolationStructures","getRegistry","setCollections","injectEval","object","func","injectGetter","eval","injectJaccard","embeddingName1","embeddingName2","nn","nn1","nearest_neighbors","nn2","Error","xIndices","knn_ind","yIndices","x","injectNNDiff","embeddingName","property","method","knn_particles","ARRAY_DISTANCE_METRICS","injectCluster","cluster","clusters","startsWith","isProxySymbol","Proxy","obj","prop","propertyValue","lookup","particle","abs","nearestNeighbors","distance_metric","knn_dist","importedDataset","default","interpolationCollection","setInterpolationCollection","Provider","collapseOnSelect","expand","bg","Brand","Toggle","aria-controls","Collapse","Link","active","onSelect","INTERPOLATION","downloadJSONFile","JSON","parse","InterpolationPage","useState","optionsCollapsed","setOptionsCollapsed","marginLeft","scaffold","PlotComponent","plotComponentFactory","Plotly","PLOTLY_CONFIG","displaylogo","responsive","showLink","ButtonWithUpload","onUploadData","onUploadResult","uploadModalOpen","setUploadModalOpen","Dropdown","as","ButtonGroup","drop","Button","Menu","Item","JSMEModal","initialSmiles","setSmiles","showJSME","setShowJSME","bodyRef","timeout","clearTimeout","Modal","getBoundingClientRect","options","src","UseStructureInputAddon","selection","setValue","editorOpen","setEditorOpen","VIEWBOX_SIZE","CurveEditorModal","initialPoints","points","setPoints","setMin","setMax","inputMin","setInputMin","inputMax","setInputMax","y","toString","extent","minimum","maximum","scales","scaleLinear","domain","range","clamp","alignItems","flexFlow","justifyContent","preventDefault","stopPropagation","valueAsNumber","viewBoxSize","curveType","DEFAULT_CURVE_TYPES","MSOForm","availableObjectives","addCollection","msoStartingStructure","setMsoStartingStructure","nrOfParticles","setNrOfParticles","nrOfIterations","setNrOfIterations","nrOfSwarms","setNrOfSwarms","vMin","setVMin","vMax","setVMax","inertiaWeight","setInertiaWeight","phi1","setPhi1","phi2","setPhi2","phi3","setPhi3","selectedObjective","setSelectedObjective","objectives","setObjectives","desirabilityCurveObjective","setDesirabilityCurveObjective","FormWrapper","runMSO","iterations","num_swarms","num_part","v_min","v_max","inertia_weight","msoCollection","desirability","o","required","overflowX","objective","additional_args","description","step","weight","placeholder","aria-describedby","Alert","ComputeEmbeddingsForm","cdddInput","setCdddInput","additional","result","header","skipEmptyLines","dynamicTyping","transformHeader","trim","toLocaleLowerCase","transform","field","meta","fields","rest","embeddings","embedStructures","include_embedding","newCollection","additionalProperties","original_structure","DEFAULT_COLLECTION","SubstructureMatchingForm","smarts","setSmarts","computeSubstructures","all","results","validity","TanimotoForm","similarityRef","setSimilarityRef","similaryFP","setSimilarityFP","getTanimotoSimilarity","tanimoto","reference","embedding","availableEmbeddings","pow","GridItemOptions","gridOptions","onClose","onSettings","renderInfo","enableMove","zIndex","left","cursor","OverlayTrigger","trigger","placement","overlay","Popover","SizedGridLayout","WidthProvider","GridLayout","Grid","_children","layout","setLayout","isArray","validChildren","missingLayout","l","h","w","props","draggableHandle","cols","rowHeight","verticalCompact","compactType","onLayoutChange","ParallelCoordinatesPlot","filterSelection","figureState","setFigureState","enabledProperties","setEnabledProperties","colorProperty","setColorProperty","constraintRange","setConstraintRange","filteredCollections","hidden","availableProperties","filtered","newFigureState","frames","autosize","colorway","DEFAULT_COLORWAY","showlegend","line","showscale","DEFAULT_PLOTLY_COLORSCALE","color","fill","dimensions","order","minValue","maxValue","reverse","constraintrange","log","menuPosition","isMulti","openMenuOnClick","closeMenuOnSelect","formatOptionLabel","option","maxWidth","isClearable","allSelected","config","onRestyle","dim","every","some","onUpdate","figure","newOrdering","LocalNeighborhoodPlot","hover","setHover","referenceEmbedding","setReferenceEmbedding","enabledEmbeddings","setEnabledEmbeddings","allAvailableProperties","filteredAvailableEmbeddings","sortBy","distanceColumn","NumberColumn","Infinity","indexOccurances","selectionCollections","originalParticle","Occurances","indexOf","setSelectedFromLineup","normalizedDistances","fromEntries","normalizeArray","referenceIndexToDist","referenceNN","plotDataLines","previousKey","previousValue","previousInd","ind","previousX","legendgroup","opacity","plotDataSelection","selectedXValues","NaN","isNaN","marker","plotDataScatter","toNumber","dist","hoverinfo","customdata","selectedpoints","coloraxis","getPointsFromEvent","StructureImage","dragmode","hovermode","legend","orientation","colorbar","titleside","thickness","outlinewidth","lenmode","len","yanchor","scene","aspectmode","margin","r","t","yaxis","categoryorder","categoryarray","onSelected","onHover","onUnhover","LAYOUT","GroupFlowSankeyPlot","setSelectionCollections","valueIndex","labels","valueLookup","clear","matrix","assignments","next","currentIndex","link","source","target","toValues","particles","to","arrangement","node","backgroundColor","isDisabled","hoveredPoints","ClusterSidePanel","setVisibleNeighborhoodSamplings","selectedParticles","concat","hoverOrSelected","lastHoverOrSelected","setHoverOrLastSelected","selectionCollection","visibleProjectionModels","setVisibleProjectionModels","recomputeEmbeddings","setRecomputeEmbeddings","removeFromOriginal","setRemoveFromOriginal","includeNeighbors","setIncludeNeighbors","newCollectionLoading","setNewCollectionLoading","showStructures","setShowStructures","rankingSelection","setRankingSelection","heatmapData","setHeatmapData","heatmapLoading","setHeatmapLoading","heatmapHover","setHeatmapHover","heatmapHoverIndices","setHeatmapHoverIndices","parallelCoordinatesCollections","setParallelCoordinatesCollections","structuresToShow","filteredParticles","groupByLodash","model","dialogClassName","visibility","gap","pointIndex","z","originalZ","emptyZ","xanchor","pad","xaxis","scaleanchor","visible","autorange","displayModeBar","Tabs","defaultActiveKey","unmountOnExit","Tab","eventKey","projections","downloadCSVFile","selectedWithEmbeddings","cdddSimilarities","selectedStructures","tanimotoSimilaritiesRaw","tanimotoSimilarities","reversescale","zmin","zmax","colorscale","neighbors","cloneDeepWith","stack","oldCollections","checked","TRAJECTORY_TRACE_NAME","ScatterPlot","xAccessor","yAccessor","debouncedHover","innerHover","setInnerHover","setHoverRef","traces","connectBy","delete","isHover","knnHoverFields","isKNNHover","selectedInstancesByConnectBy","allInstances","allSizes","allColors","lineOpacityScaling","scaleSymlog","hoverColor","darker","lineColor","copy","sizeScaling","groups","groupBy","instances","lodashGet","instanceScaler","_","allBorderColors","shape","existing","annotatedCollections","plotOptions","colorBy","opacityBy","sizeBy","constantOpacity","colorExtent","opacityExtent","sizeExtent","toExtent","sizeref","bgcolor","existingData","indices","extendedParticles","ys","cmin","cmax","symbol","sizemin","sizemax","transforms","styles","localeCompare","stringify","particleIndex","handledIndices","curveNumber","add","onDeselect","MatchedMolecularPairsForm","setStructure","substructure","setSubstructure","minVariableSize","setMinVariableSize","maxVariableSize","setMaxVariableSize","minConstantSize","setMinConstantSize","minRadius","setMinRadius","minPairs","setMinPairs","rel","getMatchedMolecularPairs","min_variable_size","max_variable_size","min_constant_size","min_radius","min_pairs","embeddedCollection","NeighborSamplingForm","setVisible","setMethod","nr","setNr","scale","setScale","computeNeighborSamples","getNeighborSamples","similarity","neighborhoodSimilarity","sqrt","sample","floor","border","RecomputeEmbeddingsForm","setFrom","projection","setProjection","setTo","recomputeProjections","computeProjectionsWithModels","recomputedParticles","toName","newTo","newFrom","collectionsWithProjections","collectionsWithEmbeddings","StonedSelfiesForm","randomSamples","setRandomSamples","maxMutations","setMaxMutations","getStonedSelfies","random_samples","max_mutations","PlotSelect","inline","multi","setOption","availableNearestNeighbors","availableClusters","extensions","whiteSpace","minWidth","menu","base","onCreateOption","additionalOptions","component","PlotSelectJaccardExtension","jaccardEmb1","jaccardEmb2","jaccardNN","PlotSelectNNDiffExtension","emb","PlotSelectKNNExtension","PlotSelectClusterExtension","PlotSelectEvalExtension","ProjectionSettingsForm","setConfig","availableProjections","availableOpacityProperties","availableConnectByProperties","uniqueId","colorCoding","ProjectionSettingsModal","oldConfig","EmbeddingPage","allParticles","visibleNeighborhoodSamplings","enabledProjections","setEnabledProjections","editProjection","setEditProjection","_setSelection","_setParticleSelected","setPlotOptions","customX","setCustomX","customY","setCustomY","customPlotSettings","setCustomPlotSettings","showSelectedOnly","setShowSelectedOnly","visibleCollections","latentSpaceCollections","latentX","latentY","gutterSize","sizes","paddingLeft","onDragEnd","paddingRight","setter","newConfig","pickBy","bottom","toUpperCase","newOption","toFixed","handleWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","fetchRaw","url","fetch","headers","redirect","body","stringifyWithoutCycles","ok","json","message","statusText","fetchJSON","fetchText","maxSamples","encodeURIComponent","models","fingerprint","samples","valueRef","Tooltip","anchor","setNode","setPosition","setFromEvent","throttle","clientX","clientY","addEventListener","removeEventListener","useMousePosition","container","createElement","pointerEvents","appendChild","removeChild","initialValue","uniqueRef","currentName","replaceAll","nameAlreadyTaken","pattern","DetailsSummaryWrapper","lead","setError","reportValidity","dismissible","list","def","parseFloat","getter","downloadFile","blob","URL","createObjectURL","download","click","Blob","valueCreator","cache","defineProperty","configurable","enumerable","setSrc","alt","onLoad","onError","euclidean_difference","mean","mean_rel_diff","mean_rel_diff_log10","log10","max_difference","min_difference","Symbol"],"mappings":"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","file":"static/js/main.a5728a73.chunk.js","sourcesContent":["import { SelectionColumn } from \"lineupjs\";\nimport * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../interfaces\";\nimport { ExternalViewPortal } from \"./ExternalViewPortal\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureCard } from \"./StructureCard\";\n\nconst StructureCardGridUnwrapped = <T extends IParticle>({\n  collections,\n  structureCardProps,\n  tableClass,\n  renderTopForm,\n  setSelected,\n  selected,\n  setFiltered,\n  initialMode = \"table\",\n}: {\n  collections: ICollection<T>[];\n  setCollections?(collections: ICollection<T>[]): void;\n  structureCardProps?: (structure: T, index: number) => React.HTMLAttributes<HTMLDivElement>;\n  tableClass?: string;\n  renderTopForm?: React.ReactNode;\n  selected?: IParticleSelection;\n  setSelected?: (selected: IParticleSelection) => void;\n  setFiltered?: (selected: IParticleSelection) => void;\n  initialMode?: \"table\" | \"grid\";\n}) => {\n  const [cardSize, setCardSize] = React.useState<\"large\" | \"medium\" | \"small\">(\"small\");\n  const [mode, setMode] = React.useState<\"table\" | \"grid\">(initialMode);\n  const [external, setExternal] = React.useState<boolean>(false);\n  const [counter, setCounter] = React.useState<number>(0);\n\n  const gridSize = cardSize === \"large\" ? \"12rem\" : cardSize === \"medium\" ? \"9em\" : \"6em\";\n\n  return (\n    // <ExternalViewPortal active={external} onWindowClosed={() => setExternal(false)}>\n      <div className=\"d-flex flex-column\" style={{ height: \"100%\" }}>\n        <form className=\"row mb-2 mt-2\">\n          <div className=\"col flex-row d-flex\">\n            {renderTopForm}\n          </div>\n          <div className=\"col d-flex justify-content-end\">\n            <button\n              type=\"button\"\n              title=\"Force update ranking\"\n              className={`btn btn-sm btn-light ms-2 me-2`}\n              onClick={() => setCounter((c) => c+1)}\n            >\n              <i className=\"fas fa-fw fa-sync-alt\" />\n            </button>\n            {!external ? (\n              <button\n                type=\"button\"\n                title=\"Open as new window\"\n                className={`btn btn-sm btn-light ms-2 me-2`}\n                onClick={() => setExternal(true)}\n              >\n                <i className=\"fas fa-fw fa-external-link-square-alt\" />\n              </button>\n            ) : null}\n            <div className=\"btn-group btn-group-sm ms-2 me-2\" role=\"group\">\n              <button\n                type=\"button\"\n                className={`btn btn-light ${mode === \"table\" ? \"active\" : \"\"}`}\n                onClick={() => setMode(\"table\")}\n              >\n                <i className=\"fas fa-fw fa-table\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${mode === \"grid\" ? \"active\" : \"\"}`}\n                onClick={() => setMode(\"grid\")}\n              >\n                <i className=\"fas fa-fw fa-th\" />\n              </button>\n            </div>\n            <div className=\"btn-group btn-group-sm ms-2\" role=\"group\">\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"large\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"large\")}\n              >\n                <i className=\"fas fa-fw fa-grip-vertical\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"medium\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"medium\")}\n              >\n                <i className=\"fas fa-fw fa-th\" />\n              </button>\n              <button\n                type=\"button\"\n                className={`btn btn-light ${cardSize === \"small\" ? \"active\" : \"\"}`}\n                disabled={mode !== \"grid\"}\n                onClick={() => setCardSize(\"small\")}\n              >\n                <i className=\"fas fa-fw fa-grip-vertical\" style={{ marginRight: \"0.15em\" }} />\n                <i className=\"fas fa-fw fa-grip-vertical\" />\n              </button>\n            </div>\n          </div>\n        </form>\n        <LineupWrapper\n          key={counter}\n          collections={collections}\n          setSelected={setSelected}\n          selected={selected}\n          setFiltered={setFiltered}\n          className={`lineup-wrapper ${mode !== \"table\" ? \"d-none\" : \"\"} ${tableClass || \"\"}`}\n          onSelectionSet={(lineup, rankings) => {\n            const selectionColumn = rankings?.[0].find((col) => col instanceof SelectionColumn);\n            // Only sort by the selection column if it was not changed\n            if (rankings[0]?.getSortCriteria().length === 0 || selectionColumn?.isSortedByMe()?.asc) {\n              // Trigger it twice to force a resort in lineup, otherwise it does not reapply the sort.\n              selectionColumn?.sortByMe(true);\n              selectionColumn?.sortByMe(false);\n            }\n          }}\n        />\n        {mode === \"grid\" ? (\n          <div\n            style={{\n              display: mode !== \"grid\" ? \"none\" : \"grid\",\n              gridTemplateColumns: `repeat(auto-fill, minmax(${gridSize}, 1fr))`,\n              gridAutoRows: \"auto\",\n              gridGap: \"1rem\",\n            }}\n          >\n            {collections\n              .map((collection) => collection.data)\n              .flat()\n              .map((structure, i, full) => (\n                <StructureCard\n                  key={i}\n                  structure={structure}\n                  structures={i > 0 ? [structure, full[i - 1]] : undefined}\n                  {...(structureCardProps?.(structure, i) || {})}\n                />\n              ))}\n          </div>\n        ) : null}\n      </div>\n    // </ExternalViewPortal>\n  );\n};\n\nexport const StructureCardGrid = React.memo(StructureCardGridUnwrapped) as typeof StructureCardGridUnwrapped;\n","import * as React from \"react\";\nimport LineUp, {\n  builder,\n  buildRanking,\n  buildStringColumn,\n  Column,\n  IColumnDesc,\n  LocalDataProvider,\n  Taggle,\n  Ranking,\n  StringColumn,\n  IStringFilter,\n  RankingBuilder,\n} from \"lineupjs\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport debounce from \"lodash.debounce\";\nimport { useSyncedRef } from \"../../utils/hooks\";\nimport { StructureImageRenderer } from \"./StructureImageRenderer\";\nimport { StructureImageColumn } from \"./StructureImageColumn\";\nimport { hasSubstructureMatch } from \"../../utils/api\";\nimport isEqual from \"lodash.isequal\";\nimport castArray from \"lodash.castarray\";\n\nexport const buildDefaultRanking = () => {\n  const rankingBuilder = buildRanking();\n  rankingBuilder.supportTypes();\n  rankingBuilder.allColumns();\n  return rankingBuilder;\n};\n\nexport const LineupWrapper = ({\n  collections,\n  getRankingBuilders = buildDefaultRanking,\n  adjustRankings,\n  setSelected,\n  align,\n  selected,\n  setFiltered,\n  onSelectionSet,\n  ...innerProps\n}: {\n  collections: ICollection[];\n  getRankingBuilders?: () => RankingBuilder | RankingBuilder[];\n  align?: string;\n  adjustRankings?: (lineup: Taggle, rankings: Ranking[]) => void;\n  setSelected?: (selection: IParticleSelection) => void;\n  selected?: IParticleSelection;\n  setFiltered?: (filtered: IParticleSelection) => void;\n  onSelectionSet?: (lineup: Taggle, rankings: Ranking[]) => void;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const divRef = React.useRef<HTMLDivElement>(null);\n  const lineupRef = React.useRef<Taggle | null>(null);\n  const rankingRef = React.useRef<Ranking[] | null>(null);\n  const indexMapRef = React.useRef<Map<IParticle, number> | null>(null);\n  const disableLineUpSelectionListener = React.useRef<boolean>(false);\n\n  const setSelectedRef = useSyncedRef(setSelected);\n  const setFilteredRef = useSyncedRef(setFiltered);\n  const onSelectionSetRef = useSyncedRef(onSelectionSet);\n\n  // Reduce the collections to an array of objects with a dataset property\n  const mergedData = React.useMemo(\n    () =>\n      collections.reduce<(IParticle & { _dataset: string; _particle: IParticle } & Record<string, unknown>)[]>((acc, cur) => {\n        cur.data.forEach((d) =>\n          acc.push({\n            ...d,\n            _dataset: cur.name,\n            _particle: d,\n          })\n        );\n        return acc;\n      }, []),\n    [collections]\n  );\n\n  React.useEffect(() => {\n    lineupRef.current?.destroy();\n\n    const DEFAULT_HEIGHT = 18;\n    let height = 36;\n\n    const rankingBuilders = getRankingBuilders();\n\n    const b = builder(mergedData).animated(false);\n    castArray(rankingBuilders).forEach((builder) => b.ranking(builder));\n    b.aggregationStrategy(\"group+item+top\")\n      .propagateAggregationState(true)\n      .registerColumnType(\"structureImage\", StructureImageColumn)\n      .registerRenderer(\"structureImage\", new StructureImageRenderer())\n      .livePreviews({\n        filter: false,\n      })\n      .sidePanel(true, true)\n      // .deriveColors()\n      .dynamicHeight(() => ({\n        defaultHeight: DEFAULT_HEIGHT,\n        height: () => height,\n        padding: () => 0,\n      }));\n\n    b.deriveColumns(\"_dataset\");\n\n    // Use image column as link and text instead\n    // b.column(\n    //   buildStringColumn(\"structure\")\n    //     .label(\"Structure\")\n    //     // eslint-disable-next-line no-template-curly-in-string\n    //     .pattern(\"https://pubchem.ncbi.nlm.nih.gov/#query=${value}\")\n    //     .build([])\n    // );\n\n    b.column({\n      ...buildStringColumn(\"structure\")\n        .label(\"Structure\")\n        .renderer(\"structureImage\", \"structureImage\")\n        .width(height * 3)\n        .build([]),\n      type: \"structureImage\",\n    });\n\n    // TODO: I really don't like that, but Lineup infers the columns by the *first* entry in the data.\n    // So here we move the object with the most properties to the first position. We should probably create a \"merged\" object for that.\n    // https://github.com/lineupjs/lineupjs/blob/develop/src/provider/utils.ts#L268-L269\n    const mergedDataProperties = mergedData.map(({ properties = {} }) => properties);\n    const propertyWithMostEntries =\n      mergedDataProperties.reduce<Record<string, unknown> | null>((acc, cur) => {\n        return !acc || Object.keys(acc!).length < Object.keys(cur).length ? cur : acc;\n      }, null) || {};\n\n    const lazyColumns = Object.keys(propertyWithMostEntries).filter(\n      (key) => Object.getOwnPropertyDescriptor(propertyWithMostEntries, key)![\"get\"]\n    );\n    const eagerColumns = Object.keys(propertyWithMostEntries).filter((key) => !lazyColumns.includes(key));\n    // console.log(propertyWithMostEntries, lazyColumns, eagerColumns);\n    // The properties are a nested object, so we derive it using the builder and then inject the 'properties.' in the column.\n    const propertiesBuilder = builder([propertyWithMostEntries, ...mergedDataProperties]).deriveColumns();\n    // lazyColumns.forEach((col) =>\n    //   propertiesBuilder.column(buildNumberColumn(col).custom(\"visible\", false).custom(\"lazy\", true).build([]))\n    // );\n\n    // @ts-ignore\n    const propertiesColumns = (propertiesBuilder.columns as IColumnDesc[]).map(\n      // @ts-ignore\n      (col) => ({ ...col, column: `properties.${col.column}` })\n    );\n    propertiesColumns.forEach((col) => b.column(col));\n\n    // Change the default renderer of the embedding column\n    // TODO: Adjust to multiple embeddings\n    // b.deriveColumns(\"embedding\");\n    // @ts-ignore\n    (b.columns as IColumnDesc[]).forEach((col) => {\n      // Patch the default renderer for all numbers columns\n      if (col.type === \"numbers\") {\n        col.renderer = \"histogram\"; // verticalbar is nice but slow..\n        col.groupRenderer = \"histogram\"; // verticalbar is nice but slow..\n      }\n      if (col.type === \"number\") {\n        col.groupRenderer = \"histogram\"; // boxplot is nice but slow..\n      }\n    });\n\n    // Build the ranking\n    const lineup = b.buildTaggle(divRef.current!);\n\n    // Lookup the image column\n    const imageColumn: StructureImageColumn | null = lineup.data.find(\n      (col) => col.getRenderer() === \"structureImage\"\n    ) as StructureImageColumn | null;\n    if (!imageColumn) {\n      console.error(\"Column with image renderer not found. Autoresizing disabled.\");\n    }\n    const debouncedWidthChanged = debounce((prev, cur) => {\n      // Adjust the height according to the image column\n      height = Math.min(Math.max(DEFAULT_HEIGHT, (cur - 0) / 3), 150);\n      lineup.update();\n    }, 500);\n\n    const debouncedFilterChanged = debounce((prev, cur: IStringFilter) => {\n      const filter = typeof cur?.filter === \"string\" ? cur?.filter : null;\n      if (imageColumn && filter) {\n        hasSubstructureMatch(\n          mergedData.map((d) => d.structure),\n          filter\n        )\n          .then((matches) => {\n            // TODO: Race condition check\n            const validSmiles = Object.entries(matches.counts)\n              .filter(([smiles, count]) => count > 0)\n              .map(([smiles, count]) => smiles);\n            imageColumn.setFilter({\n              filter,\n              valid: new Set(validSmiles),\n              filterMissing: true,\n            });\n          })\n          .catch((e) => {\n            console.error(e);\n            imageColumn.setFilter(null);\n          });\n      }\n    }, 1000);\n    imageColumn?.on(Column.EVENT_WIDTH_CHANGED, debouncedWidthChanged);\n    imageColumn?.on(StringColumn.EVENT_FILTER_CHANGED, debouncedFilterChanged);\n\n    const rowsToSelection = (rows: any[]) => {\n      return rows.reduce<{ [key: string]: IParticle[] }>((acc, cur) => {\n        if (!acc[cur._dataset]) {\n          acc[cur._dataset] = [];\n        }\n        acc[cur._dataset].push(cur._particle);\n        return acc;\n      }, {});\n    };\n\n    // Listen to selection\n    lineup.on(LineUp.EVENT_SELECTION_CHANGED, async () => {\n      if (!disableLineUpSelectionListener.current) {\n        const data = rowsToSelection(await lineup.data.view(lineup.getSelection()));\n        setSelectedRef.current?.(Object.entries(data).length === 0 ? null : data);\n      }\n    });\n\n    let disableTrigger = false;\n    lineup.data.on(LocalDataProvider.EVENT_ADD_COLUMN, (col, index) => {\n      if (disableTrigger) {\n        return;\n      }\n      const columnName = col.desc.label.toLowerCase();\n      // @ts-ignore\n      if (col.desc.lazy) {\n        propertiesBuilder.deriveColumns(columnName);\n        // @ts-ignore\n        const createdColumnDesc = (propertiesBuilder.columns as IColumnDesc[])\n          // @ts-ignore\n          .filter((col) => col.column === columnName && !col.lazy)\n          .map(\n            // @ts-ignore\n            (col) => ({ ...col, column: `properties.${col.column}` })\n          )?.[0];\n        disableTrigger = true;\n        const createdColumn = lineup.data.getFirstRanking().insertAfter(lineup.data.create(createdColumnDesc)!, col);\n        disableTrigger = false;\n        createdColumn?.markDirty(\"all\");\n        lineup.update();\n      }\n    });\n\n    lineup.data.on(LocalDataProvider.EVENT_ORDER_CHANGED, async (oldSelection, newSelection) => {\n      if (newSelection.length === mergedData.length) {\n        setFilteredRef?.current?.(null);\n      } else if (!isEqual(oldSelection.slice().sort(), newSelection.slice().sort())) {\n        // If we actually filtered the table\n        setFilteredRef?.current?.(rowsToSelection(await lineup.data.view(newSelection)));\n      }\n    });\n\n    // @ts-ignore\n    lineupRef.current = lineup;\n    rankingRef.current = lineup.data.getRankings();\n\n    adjustRankings?.(lineupRef.current, rankingRef.current);\n\n    indexMapRef.current = mergedData.reduce((acc, cur, i) => {\n      acc.set(cur._particle, i);\n      return acc;\n    }, new Map());\n\n    return () => {\n      lineupRef.current?.destroy();\n    };\n  }, [collections, mergedData, setFilteredRef, setSelectedRef, getRankingBuilders, adjustRankings]);\n\n  React.useEffect(() => {\n    lineupRef.current?.data.getRankings().forEach((ranking) => {\n      const structureColumn = ranking.flatColumns.find((col) => col instanceof StructureImageColumn) as StructureImageColumn | undefined;\n      structureColumn?.setAlign(align || null);\n    })\n  }, [align]);\n\n  React.useEffect(() => {\n    if (lineupRef.current && rankingRef.current && indexMapRef.current) {\n      disableLineUpSelectionListener.current = true;\n      if (!selected) {\n        lineupRef.current.setSelection([]);\n      } else if (!isEqual(selected, lineupRef.current.getSelection())) {\n        const selectedIndices = Object.values(selected)\n          .flat()\n          .map((p) => indexMapRef.current!.get(p)!);\n        lineupRef.current.setSelection(selectedIndices);\n      }\n      onSelectionSetRef.current?.(lineupRef.current, rankingRef.current);\n      disableLineUpSelectionListener.current = false;\n    }\n  }, [selected, onSelectionSetRef]);\n\n  return (\n    <div\n      {...(innerProps || {})}\n      ref={divRef}\n      style={{\n        ...(innerProps?.style || {}),\n        flex: 1,\n        fontSize: \"smaller\",\n      }}\n    ></div>\n  );\n};\n","import {\n  ICellRendererFactory,\n  ERenderMode,\n  ICellRenderer,\n  IDataRow,\n  IRenderContext,\n  IGroupCellRenderer,\n  IOrderedGroup,\n  renderMissingDOM,\n} from \"lineupjs\";\nimport { getImageURL, getReducedImages } from \"../../utils/api\";\nimport { StructureImageColumn } from \"./StructureImageColumn\";\nimport { abortAble } from \"lineupengine\";\n\nconst template =\n  '<a target=\"_blank\" rel=\"noopener\" style=\"background-size: contain; background-position: center; background-repeat: no-repeat;\"></a>';\n\nexport function svgToImageSrc(svg: string): string {\n  return `data:image/svg+xml;base64,${btoa(svg)}`;\n}\n\nexport function svgToCSSBackground(svg: string): string {\n  return `url('${svgToImageSrc(svg)}')`;\n}\n\nexport class StructureImageRenderer implements ICellRendererFactory {\n  readonly title: string = \"Chemical Structure\";\n\n  canRender(col: StructureImageColumn, mode: ERenderMode): boolean {\n    return col instanceof StructureImageColumn && (mode === ERenderMode.CELL || mode === ERenderMode.GROUP);\n  }\n\n  create(col: StructureImageColumn): ICellRenderer {\n    return {\n      template,\n      update: (n: HTMLLinkElement, d: IDataRow) => {\n        if (!renderMissingDOM(n, col, d)) {\n          if(d.v.images?.[0]) {\n            n.style.backgroundImage = svgToCSSBackground(d.v.images[0]);\n            return;\n          }\n          const value = col.getValue(d)!;\n          // Load aysnc to avoid triggering\n          return abortAble(new Promise((resolve) => setTimeout(() => resolve(value), 500))).then((image) => {\n            if (typeof image === \"symbol\") {\n              return;\n            }\n            n.style.backgroundImage = `url('${getImageURL(value, col.getFilter()?.filter, col.getAlign())}')`;\n            n.title = value;\n            n.href = `https://pubchem.ncbi.nlm.nih.gov/#query=${value}`;\n          });\n        }\n      },\n    };\n  }\n\n  createGroup(col: StructureImageColumn, context: IRenderContext): IGroupCellRenderer {\n    return {\n      template,\n      update: (n: HTMLImageElement, group: IOrderedGroup) => {\n        context.tasks.groupRows(col, group, \"StructureImageRendererGroup\", (rows) => {\n          return abortAble(getReducedImages(Array.from(rows.map((row) => col.getLabel(row))))).then((res: any) => {\n            n.style.backgroundImage = res ? svgToCSSBackground(res) : \"\";\n          });\n        });\n      },\n    };\n  }\n}\n","import { StringColumn, IDataRow, IStringFilter, Column } from \"lineupjs\";\nimport { isEqual } from \"lodash\";\n\nexport interface IStructureFilter extends IStringFilter {\n  filter: string;\n  valid: Set<string>;\n}\n\nexport class StructureImageColumn extends StringColumn {\n  protected structureFilter: IStructureFilter | null = null;\n  protected align: string | null = null;\n\n  filter(row: IDataRow): boolean {\n    if (!this.isFiltered()) {\n      return true;\n    }\n    return this.structureFilter!.valid.has(this.getLabel(row));\n  }\n\n  isFiltered(): boolean {\n    return this.structureFilter != null && this.structureFilter.valid?.size > 0;\n  }\n\n  getFilter() {\n    return this.structureFilter!;\n  }\n\n  setFilter(filter: IStructureFilter | null) {\n    if (isEqual(filter, this.structureFilter)) {\n      return;\n    }\n\n    this.fire(\n      [StringColumn.EVENT_FILTER_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY],\n      this.structureFilter,\n      (this.structureFilter = filter)\n    );\n  }\n\n  getAlign(): string | null {\n    return this.align;\n  }\n\n  setAlign(structure: string | null): void {\n    if (isEqual(structure, this.align)) {\n      return;\n    }\n    \n    this.fire(\n      [Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY],\n      (this.align = structure)\n    );\n  }\n}\n","import * as React from \"react\";\nimport { IParticle } from \"../interfaces\";\nimport { StructureImage } from \"./StructureImage\";\n\nexport const StructureCard = React.memo(\n  ({\n    structure,\n    structures,\n    enableModeSwitch: _enableModeSwitch = true,\n    showProperties = true,\n    ...innerProps\n  }: {\n    structure: IParticle;\n    structures?: IParticle[];\n    enableModeSwitch?: boolean;\n    showProperties?: boolean;\n  } & React.HTMLAttributes<HTMLDivElement>) => {\n    const [singleMode, setSingleMode] = React.useState<boolean>(true);\n    const enableModeSwitch = _enableModeSwitch && Boolean(structures);\n\n    return (\n      <div {...innerProps} className={`card structure-card ${innerProps?.className || \"\"}`}>\n        <StructureImage\n          role={enableModeSwitch ? \"button\" : undefined}\n          title={enableModeSwitch ? \"Switch molecule view\" : undefined}\n          onClick={enableModeSwitch ? () => setSingleMode(!singleMode) : undefined}\n          className=\"card-img-top\"\n          // TODO: Support proper switching between all images\n          structure={singleMode || !enableModeSwitch ? structure.structure : structures!.map((s) => s.structure)}\n          image={singleMode || !enableModeSwitch ? structure.images?.[singleMode ? 0 : 1] : undefined}\n        />\n        <div className=\"card-body\" style={{ padding: \"0.25rem\" }}>\n          <h5 className=\"card-title text-truncate\">{structure.structure}</h5>\n          <div className=\"card-text\">\n            {showProperties\n              ? Object.entries(structure?.properties || {}).map(([key, value]) => (\n                  <div className=\"text-truncate\" title={`${key} ${value?.toLocaleString()}`}>\n                    <strong>{key}</strong> {value?.toLocaleString()}\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nexport function LoadingPage({\n  children = null,\n  loading,\n  loadingText,\n  fallback = null,\n}: {\n  children?: React.ReactNode;\n  loading: boolean;\n  loadingText?: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  if (!loading && children) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div\n      className=\"d-flex align-items-center justify-content-center\"\n      style={{ flexDirection: \"column\", flex: 1, overflow: \"auto\" }}\n    >\n      {loading ? (\n        <>\n          <Spinner animation=\"border\" className=\"mb-1\" />\n          {loadingText}\n        </>\n      ) : (\n        fallback\n      )}\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { ICollection } from './interfaces';\n\nexport const CollectionContext = React.createContext<ICollection[]>([]);\n","import * as React from \"react\";\n\nexport function HorizontalCollapse({\n  label,\n  position,\n  collapsed,\n  setCollapsed,\n  children,\n  size,\n}: {\n  label: string;\n  position: \"left\" | \"right\";\n  collapsed: boolean;\n  size: string;\n  setCollapsed: React.Dispatch<React.SetStateAction<boolean>>;\n  children: React.ReactNode;\n}) {\n  //   const [collapsed, setCollapsed] = React.useState<boolean>(true);\n\n  const oppositePosition = position === \"right\" ? \"start\" : \"end\";\n\n  React.useEffect(() => {\n    // Trigger a resize for plotly\n    window.dispatchEvent(new Event(\"resize\"));\n  }, [collapsed]);\n\n  const collapseButton = (\n    <button\n      onClick={() => {\n        setCollapsed((collapsed) => !collapsed);\n      }}\n      style={\n        {\n          //   zIndex: 1000,\n          // position: \"absolute\",\n          // top: 0,\n          // right: collapsed ? (position === 'right' ? 0 : undefined) : 0,\n          // // [position]: collapsed ? 0 : undefined,\n          // // [oppositePosition]: collapsed ? undefined : 0,\n        }\n      }\n      className=\"btn btn-sm btn-outline-primary\"\n    >\n      <i className={`fas fa-fw fa-long-arrow-alt-${collapsed ? (position === \"right\" ? \"up\" : \"down\") : position}`}></i>{\" \"}\n      {collapsed ? label : null}\n    </button>\n  );\n\n  return (\n    <>\n      {collapsed ? (\n        <div>\n          <div\n            style={{\n              position: \"absolute\",\n              top: 50,\n              //   [oppositePosition]: '100%',\n              [position]: 0,\n              whiteSpace: \"nowrap\",\n              transform: `rotate(270deg) translate(${position === \"right\" ? \"0, -100%\" : \"-100%, 0\"})`,\n              transformOrigin: `${position} 0`,\n              zIndex: 1000,\n            }}\n          >\n            {collapseButton}\n          </div>\n        </div>\n      ) : null}\n      {collapsed ? null : (\n        <div\n          className={`${size} ${collapsed ? \"\" : `border-${oppositePosition}`}`}\n          style={{ position: \"relative\", height: \"100%\", overflow: \"auto\" }}\n        >\n          <div className=\"sticky-top\">\n            {collapseButton}\n            {children}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { ICollection, IInterpolatedParticle } from \"../../interfaces\";\nimport { interpolateStructures } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { StructureImage } from \"../StructureImage\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const InterpolationForm = ({\n    open,\n  setCollection,\n  structures,\n  setStructures,\n  loading,\n  setLoading,\n}: {\n  open?: boolean;\n  setCollection(collection: ICollection<IInterpolatedParticle>): void;\n  structures?: string[];\n  setStructures?(structures: string[]): void;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"interpolationNameInput\", \"Interpolated\");\n\n  return (\n    <FormWrapper\n      open={open}\n      title=\"Interpolate between Structures\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const validStructures = structures?.filter(Boolean);\n        if (validStructures && validStructures.length > 0) {\n          setLoading(true);\n          const serverCollection = await interpolateStructures(validStructures, 100);\n          setCollection({\n            name,\n            ...serverCollection,\n          });\n          setName(\"\");\n        }\n        setLoading(false);\n      }}\n    >\n          {nameInput}\n          <div className=\"mb-3\">\n            <label htmlFor=\"inpolationStructures\">Structures (newline separated)</label>\n            <textarea\n              className=\"form-control form-control-sm\"\n              id=\"inpolationStructures\"\n              rows={3}\n              onChange={(e) => setStructures?.(e.currentTarget.value.split(\"\\n\"))}\n              value={structures?.join(\"\\n\") || \"\"}\n            />\n          </div>\n          <div className=\"text-center\">\n            {structures && structures.length > 0\n              ? structures\n                  .map<React.ReactNode>((structure) => (\n                    <StructureImage key={structure} structure={structure} width=\"70px\" height=\"70px\" />\n                  ))\n                  .reduce((prev, curr, i) => [\n                    prev,\n                    <i key={i} className=\"fas  fa-fw fa-long-arrow-alt-end ms-2 me-2\" />,\n                    curr,\n                  ])\n              : null}\n          </div>\n          <div className=\"text-end\">\n            <button className=\"btn btn-primary\" type=\"submit\" disabled={loading}>\n              {loading ? (\n                <>\n                  <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading...\n                </>\n              ) : (\n                <>Compute Interpolation</>\n              )}\n            </button>\n          </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\n\nexport function FileUploadModal({\n  open,\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  setOpen?(show: boolean): void;\n  onSave?(value: string | null): void;\n}) {\n  const [input, setInput] = React.useState<string>(\"\");\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(input || null);\n  }, [onSave, input]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Upload dataset</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <form>\n            <div className=\"mb-3\">\n              <label htmlFor=\"customFileInput\">Either upload a file</label>\n                <input\n                  type=\"file\"\n                  className=\"form-control\"\n                  id=\"customFileInput\"\n                  onChange={(e) => {\n                    const files = Array.from(e.currentTarget.files || []);\n                    if (files.length === 1) {\n                      files[0].text().then((res) => {\n                        setInput(res);\n                      });\n                    }\n                  }}\n                />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"customFileTextarea\">Or paste the content</label>\n              <textarea\n                id=\"customFileTextarea\"\n                className=\"form-control\"\n                onChange={(e) => setInput(e.currentTarget.value)}\n                value={input.substr(0, 1000)}\n              />\n            </div>\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Upload\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { InterpolationPage } from \"./InterpolationPage\";\nimport { Navbar, Container, Form, Button, Nav } from \"react-bootstrap\";\nimport { EActiveTabs, ICollection, IInterpolatedParticle, INearestNeighbors, IParticle, IRegistry } from \"./interfaces\";\nimport { EmbeddingPage } from \"./EmbeddingPage\";\nimport { downloadJSONFile, injectGetter } from \"./utils\";\nimport { ARRAY_DISTANCE_METRICS, isProxySymbol } from \"./utils/constants\";\nimport { getRegistry } from \"./utils/api\";\nimport { FileUploadModal } from \"./components/FileUploadModal\";\nimport { CollectionContext } from \"./CollectionContext\";\n\nfunction App() {\n  const [importFileModalShow, setImportFileModalShow] = React.useState<boolean>(false);\n  const [activeTab, setActiveTab] = React.useState<EActiveTabs>(EActiveTabs.EMBEDDING);\n  const [collections, _setCollections] = React.useState<ICollection[]>([]);\n  const [registry, setRegistry] = React.useState<IRegistry | null>(null);\n  const [interpolationStructures, setInterpolationStructures] = React.useState<string[]>([\n    \"NC1CC1C(=O)c1ccc2ccccc2c1\",\n    \"O=C(CN1C(=O)CSc2ccc(S(=O)C3CC3)cc21)NCc1cccnc1\",\n  ]);\n\n  React.useEffect(() => {\n    getRegistry()\n      .then((registry) => setRegistry(registry))\n      .catch((e) => {\n        console.error(\"Error initializing registry\", e);\n      });\n  }, []);\n\n  const setCollections = React.useCallback(\n    (collections: ICollection[]) => {\n      collections.forEach((collection) => {\n        collection.data.forEach((p, i) => {\n          p.index = i;\n          p.collection = collection.name;\n        });\n        collection.data.forEach((p, i) => {\n          // Remove jaccard distances\n          Object.keys(p.properties)\n            .filter((key) => key.toLowerCase().startsWith(\"jaccard_\") || key.toLowerCase().startsWith(\"nn_diff_\"))\n            .forEach((key) => delete p.properties[key]);\n\n          Object.entries(p.nearest_neighbors || {}).forEach(([nnKey, nn]) => {\n            // Inject the actual particles into the nearest neighbors collection\n            nn.knn_particles = nn.knn_ind.map((i) => collection.data[i]);\n          });\n\n          function injectEval(p: IParticle, object: any, key: string, func: string) {\n            injectGetter(object, key, () => {\n              try {\n                return eval(func);\n              } catch {\n                return null;\n              }\n            });\n          }\n\n          function injectJaccard(object: any, key: string, embeddingName1: string, embeddingName2: string, nn: number) {\n            const nn1 = p.nearest_neighbors?.[embeddingName1];\n            const nn2 = p.nearest_neighbors?.[embeddingName2];\n            if (nn1 && nn2) {\n              injectGetter(object, key, () => {\n                const xIndices = nn1.knn_ind.slice(0, nn);\n                const yIndices = new Set(nn2.knn_ind.slice(0, nn));\n                return xIndices.filter((x) => yIndices.has(x)).length / xIndices.length;\n              });\n            } else {\n              throw Error(`Could not inject jaccard getter: ${embeddingName1} or ${embeddingName2} are undefined.`);\n            }\n          }\n\n          function injectNNDiff(\n            object: any,\n            key: string,\n            embeddingName: string,\n            property: string,\n            method: string,\n            nn: number\n          ) {\n            const nn1 = p.nearest_neighbors?.[embeddingName];\n            const value = p.properties[property];\n            if (nn1 && typeof value === \"number\") {\n              const values = nn1.knn_particles.slice(0, nn).map((p) => (p.properties[property] as number) || 0);\n              injectGetter(object, key, () => ARRAY_DISTANCE_METRICS[method]?.(value, values));\n            } else {\n              throw Error(`Could not inject nn_diff getter: ${embeddingName} is undefined or value is not a number.`);\n            }\n          }\n\n          function injectCluster(\n            object: any,\n            key: string,\n            embeddingName: string,\n          ) {\n            const cluster = p.clusters?.[embeddingName];\n            if (cluster) {\n              injectGetter(object, key, () => cluster.label);\n            } else {\n              throw Error(`Could not inject cluster getter: ${embeddingName} is undefined.`);\n            }\n          }\n\n          if (p.nearest_neighbors && !p.nearest_neighbors[isProxySymbol]) {\n            p.nearest_neighbors = new Proxy(p.nearest_neighbors, {\n              get: function (obj, prop) {\n                if (prop === isProxySymbol) {\n                  return true;\n                }\n\n                if (typeof prop === \"symbol\") {\n                  return undefined;\n                }\n\n                // console.log(\"Nearest neighbor\", obj, prop);\n                if (prop.startsWith(\"property=\") && !(prop in obj)) {\n                  const [key, property] = prop.split(\"=\");\n                  const propertyValue = p.properties[property];\n                  if (typeof propertyValue === \"number\") {\n                    const lookup = new Map(\n                      collection.data.map((particle) => [\n                        particle,\n                        Math.abs(propertyValue - (particle.properties[property]! as number)),\n                      ])\n                    );\n                    const nearestNeighbors = collection.data\n                      .sort((a, b) => lookup.get(a)! - lookup.get(b)!)\n                      .slice(1, 51);\n\n                    obj[prop] = {\n                      distance_metric: \"absolute_property_difference\",\n                      knn_dist: nearestNeighbors.map((n) => lookup.get(n)),\n                      knn_ind: nearestNeighbors.map((n) => n.index),\n                      knn_particles: nearestNeighbors,\n                    } as INearestNeighbors;\n                    // injectGetter(obj, prop, () => {})\n                  } else if (typeof propertyValue === \"string\") {\n                    const nearestNeighbors = collection.data.filter(\n                      (particle) => p !== particle && particle.properties[property] === propertyValue\n                    );\n\n                    obj[prop] = {\n                      distance_metric: \"string_equality\",\n                      knn_dist: nearestNeighbors.map((n) => 0),\n                      knn_ind: nearestNeighbors.map((n) => n.index),\n                      knn_particles: nearestNeighbors,\n                    } as INearestNeighbors;\n                  }\n                }\n                return obj[prop];\n              },\n            });\n          }\n\n          if (!p.properties[isProxySymbol]) {\n            p.properties = new Proxy(p.properties, {\n              get: function (obj, prop) {\n                if (prop === isProxySymbol) {\n                  return true;\n                }\n\n                if (typeof prop === \"symbol\") {\n                  return undefined;\n                }\n\n                try {\n                  if (prop.startsWith(\"eval=\") && !(prop in obj)) {\n                    // Pattern: eval=<URL encoded function>\n                    const [key, func] = prop.split(\"=\");\n                    injectEval(p, obj, prop, func);\n                  }\n\n                  if (prop.startsWith(\"jaccard=\") && !(prop in obj)) {\n                    // Pattern: jaccard=<emb1>=<emb2>=<nn>\n                    const [key, emb1, emb2, nn] = prop.split(\"=\");\n                    injectJaccard(obj, prop, emb1, emb2, +nn);\n                  }\n\n                  if (prop.startsWith(\"nn_diff=\") && !(prop in obj)) {\n                    // Pattern: nn_diff=<emb>=<prop>=<method>=<nn>\n                    const [key, emb, property, method, nn] = prop.split(\"=\");\n                    injectNNDiff(obj, prop, emb, property, method, +nn);\n                  }\n\n                  if (prop.startsWith(\"cluster=\") && !(prop in obj)) {\n                    // Pattern: cluster=<emb>\n                    const [key, emb] = prop.split(\"=\");\n                    injectCluster(obj, prop, emb);\n                  }\n                } catch (e) {\n                  console.error(`Error injecting ${prop} getter`, e);\n                }\n\n                return obj[prop];\n              },\n            });\n          }\n        });\n      });\n\n      _setCollections(collections);\n    },\n    [_setCollections]\n  );\n\n  React.useEffect(() => {\n    // Import the bbbp dataset by default\n    import('./bbbp.json').then((importedDataset) => {\n      setCollections(importedDataset.default as any);\n    })\n  }, [setCollections])\n\n  const interpolationCollection = React.useMemo(\n    () => collections.find((c) => c.name === \"Interpolated\") as ICollection<IInterpolatedParticle> | undefined,\n    [collections]\n  );\n\n  const setInterpolationCollection = React.useCallback(\n    (collection: ICollection<IInterpolatedParticle>) => {\n      _setCollections((collections) => [...collections.filter((c) => c.name !== \"Interpolated\"), collection]);\n    },\n    [_setCollections]\n  );\n\n  return (\n    <CollectionContext.Provider value={collections}>\n      <div className=\"vh-100 d-flex flex-column\">\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Container>\n          <Navbar.Brand href=\"#home\">ChEmbVis</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <Nav className=\"me-auto\">\n                <Nav.Link\n                  href=\"#\"\n                  active={activeTab === EActiveTabs.EMBEDDING}\n                  onSelect={() => setActiveTab(EActiveTabs.EMBEDDING)}\n                >\n                  Embedding\n                </Nav.Link>\n                <Nav.Link\n                  href=\"#\"\n                  active={activeTab === EActiveTabs.INTERPOLATION}\n                  onSelect={() => setActiveTab(EActiveTabs.INTERPOLATION)}\n                >\n                  Interpolation\n                </Nav.Link>\n                {/* <Nav.Link href=\"/datasets/\" target=\"_blank\" active={false}>\n                  Datasets\n                </Nav.Link> */}\n              </Nav>\n            </Nav>\n            <Form>\n              <Button\n                onClick={() => {\n                  setImportFileModalShow(true);\n                }}\n              >\n                Import\n              </Button>\n              <Button\n                className=\"ms-2\"\n                disabled={collections.length === 0}\n                onClick={() => {\n                  downloadJSONFile(collections, \"export\");\n                }}\n              >\n                Export\n              </Button>\n            </Form>\n          </Navbar.Collapse>\n  </Container>\n        </Navbar>\n        <FileUploadModal\n          open={importFileModalShow}\n          setOpen={setImportFileModalShow}\n          onSave={(value) => {\n            if (value) {\n              try {\n                setCollections(JSON.parse(value));\n                setImportFileModalShow(false);\n              } catch (e) {\n                console.error(\"Error parsing imported file.\");\n              }\n            }\n          }}\n        />\n        <div className=\"container-fluid mt-2\" style={{ flex: 1, overflow: \"auto\" }}>\n          <div className=\"row\" style={{ height: \"100%\", overflow: \"auto\", position: \"relative\" }}>\n            {activeTab === EActiveTabs.EMBEDDING ? (\n              <EmbeddingPage\n                registry={registry}\n                collections={collections}\n                setCollections={setCollections}\n                interpolationStructures={interpolationStructures}\n                setInterpolationStructures={setInterpolationStructures}\n                setActiveTab={setActiveTab}\n              />\n            ) : null}\n            {activeTab === EActiveTabs.INTERPOLATION ? (\n              <InterpolationPage\n                collection={interpolationCollection}\n                setCollection={setInterpolationCollection}\n                structures={interpolationStructures}\n                setStructures={(structures: string[]) => setInterpolationStructures(structures)}\n              />\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </CollectionContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { LoadingPage } from \"./components/LoadingPage\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { ICollection, IInterpolatedParticle } from \"./interfaces\";\nimport { HorizontalCollapse } from \"./components/HorizontalCollapse\";\nimport { InterpolationForm } from \"./components/form/InterpolationForm\";\n\nexport function InterpolationPage({\n  structures,\n  setStructures,\n  collection,\n  setCollection,\n}: {\n  structures?: string[];\n  setStructures?(structures: string[]): void;\n  collection?: ICollection<IInterpolatedParticle>;\n  setCollection(collection: ICollection<IInterpolatedParticle>): void;\n}) {\n  const [optionsCollapsed, setOptionsCollapsed] = React.useState<boolean>(false);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  return (\n    <>\n      <HorizontalCollapse\n        label=\"Options\"\n        position=\"left\"\n        size=\"col-md-2\"\n        collapsed={optionsCollapsed}\n        setCollapsed={setOptionsCollapsed}\n      >\n        <InterpolationForm open={true} setCollection={setCollection} loading={loading} setLoading={setLoading} setStructures={setStructures} structures={structures} />\n      </HorizontalCollapse>\n      <div\n        // className=\"col-md-10\"\n        style={{\n          display: \"flex\",\n          flex: 1,\n          flexDirection: \"column\",\n          overflow: \"auto\",\n          marginLeft: 33,\n        }}\n      >\n        <LoadingPage loading={loading} fallback=\"Please select structures for interpolation\">\n          {collection && collection.data.length > 0 ? (\n            <StructureCardGrid\n              collections={[collection]}\n              tableClass=\"main-ranking\"\n              structureCardProps={(structure) => ({\n                className: structure.scaffold ? \"border-primary\" : \"\"\n              })}\n            />\n          ) : null}\n        </LoadingPage>\n      </div>\n    </>\n  );\n}\n","import plotComponentFactory from \"react-plotly.js/factory\";\n// Only use Plotly Geo to reduce bundle size significantly\n// @ts-ignore\nimport Plotly from \"plotly.js-dist\";\n// Solution for using plotly.js-dist with react-plotly.js: https://github.com/plotly/react-plotly.js/issues/143\nexport const PlotComponent = plotComponentFactory(Plotly);\n\nexport const PLOTLY_CONFIG = {\n    displaylogo: false,\n    responsive: true,\n    showLink: false,\n    // showEditInChartStudio: true,\n    // plotlyServerURL: \"https://chart-studio.plotly.com\"\n};","import * as React from \"react\";\nimport { Dropdown, Button, ButtonGroup } from \"react-bootstrap\";\nimport { FileUploadModal } from \"./FileUploadModal\";\n\nexport function ButtonWithUpload({\n  loading,\n  disabled,\n  text,\n  onUploadData,\n  onUploadResult,\n}: {\n  loading?: boolean;\n  disabled?: boolean;\n  text: string;\n  onUploadData?(data: string | null): boolean | void;\n  onUploadResult?(data: string | null): boolean | void;\n}) {\n  const [uploadModalOpen, setUploadModalOpen] = React.useState<\"result\" | \"data\" | null>(null);\n  return (\n    <>\n      <FileUploadModal\n        open={Boolean(uploadModalOpen)}\n        setOpen={(open) => setUploadModalOpen(null)}\n        onSave={(value) => {\n          if (\n            (uploadModalOpen === \"result\" ? onUploadResult : uploadModalOpen === \"data\" ? onUploadData : null)?.(value)\n          ) {\n            setUploadModalOpen(null);\n          }\n        }}\n      />\n      <Dropdown as={ButtonGroup} drop=\"end\">\n        <Button variant=\"primary\" type=\"submit\" disabled={loading || disabled}>\n          {loading ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\" /> Loading...\n            </>\n          ) : (\n            text\n          )}\n        </Button>\n        {onUploadData || onUploadResult ? (\n          <>\n            <Dropdown.Toggle split variant=\"primary\" disabled={loading} />\n            <Dropdown.Menu>\n              {onUploadData ? (\n                <Dropdown.Item\n                  onClick={() => {\n                    setUploadModalOpen(\"data\");\n                  }}\n                >\n                  Upload data\n                </Dropdown.Item>\n              ) : null}\n              {onUploadResult ? (\n                <Dropdown.Item\n                  onClick={() => {\n                    setUploadModalOpen(\"result\");\n                  }}\n                >\n                  Upload precomputed result\n                </Dropdown.Item>\n              ) : null}\n            </Dropdown.Menu>\n          </>\n        ) : null}\n      </Dropdown>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\n// @ts-ignore\nimport { Jsme } from \"jsme-react\";\n\nexport function JSMEModal({\n  open,\n  initialSmiles = \"\",\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  initialSmiles?: string;\n  setOpen?(show: boolean): void;\n  onSave?(value: string | null): void;\n}) {\n  const [smiles, setSmiles] = React.useState<string>(initialSmiles);\n  const [showJSME, setShowJSME] = React.useState<boolean>(false);\n  const bodyRef = React.useRef<HTMLDivElement>(null);\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(smiles || null);\n  }, [onSave, smiles]);\n\n  React.useEffect(() => {\n    if (open) {\n      const timeout = setTimeout(() => {\n        setShowJSME(true);\n      }, 200);\n      return () => clearTimeout(timeout);\n    } else {\n      setShowJSME(false);\n    }\n  }, [open]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Draw molecule</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div ref={bodyRef}></div>\n          {showJSME ? (\n            <Jsme\n              height=\"600px\"\n              width={`${bodyRef.current?.getBoundingClientRect().width || 600}px`}\n              options=\"star\"\n              // src=\"/jsme/jsme.nocache.js\"\n              // Load the distribution from the official \"CDN\".\n              src=\"https://jsme-editor.github.io/dist/jsme/jsme.nocache.js\"\n              smiles={initialSmiles || undefined}\n              onChange={setSmiles}\n            />\n          ) : null}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { IParticle, IParticleSelection } from \"../interfaces\";\nimport { JSMEModal } from \"./JSMEModal\";\n\nexport function UseStructureInputAddon({\n  value,\n  selection,\n  setValue,\n}: {\n  value: string;\n  selection?: IParticleSelection;\n  setValue: (structure: string) => void;\n}) {\n  const selected = React.useMemo<IParticle | undefined>(\n    () => Object.values(selection || {}).find((s) => s.length > 0)?.[0],\n    [selection]\n  );\n  const [editorOpen, setEditorOpen] = React.useState<boolean>(false);\n\n  return (\n    <>\n      <JSMEModal\n        open={editorOpen}\n        setOpen={setEditorOpen}\n        initialSmiles={value}\n        onSave={(smiles) => {\n          if (smiles) {\n            setValue(smiles);\n          }\n          setEditorOpen(false);\n        }}\n      />\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          title=\"Use selected structure as input\"\n          disabled={!selected}\n          onClick={() => (selected ? setValue(selected.structure) : undefined)}\n        >\n          <i className=\"fas fa-mouse-pointer\"></i>\n        </button>\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          title=\"Draw structure\"\n          onClick={() => setEditorOpen(true)}\n        >\n          <i className=\"fas fa-draw-polygon\"></i>\n        </button>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { CurveEditor, DEFAULT_CURVE_TYPES, IPoint } from \"visyn_component_curve_editor\";\n// Include style for default styling\nimport \"visyn_component_curve_editor/dist/curveEditor.css\";\nimport { scaleLinear } from \"d3-scale\";\nimport { extent } from \"d3-array\";\n\nconst MARGIN_BOTTOM = 50;\nconst MARGIN_RIGHT = 50;\n\nconst VIEWBOX_SIZE: [number, number] = [600, 400];\n\nexport function CurveEditorModal({\n  open,\n  initialPoints = [],\n  setOpen,\n  onSave,\n}: {\n  open: boolean;\n  initialPoints?: { x: number; y: number }[];\n  setOpen?(show: boolean): void;\n  onSave?(value: { x: number; y: number }[]): void;\n}) {\n  const [points, setPoints] = React.useState<IPoint[]>([]);\n  const [min, setMin] = React.useState<number>(0);\n  const [max, setMax] = React.useState<number>(1);\n  const [inputMin, setInputMin] = React.useState<number>(min);\n  const [inputMax, setInputMax] = React.useState<number>(max);\n\n  React.useEffect(() => {\n    setInputMin(min);\n    setInputMax(max);\n  }, [min, max]);\n\n  React.useEffect(() => {\n    setPoints(initialPoints.map(({ x, y }, i) => ({ id: i.toString(), x, y })));\n    const [minimum, maximum] = extent(initialPoints.map(({ x }) => x));\n    setMin(minimum ?? 0);\n    setMax(maximum ?? 1);\n  }, [initialPoints]);\n\n  const scales = React.useMemo(() => {\n    return {\n      x: scaleLinear()\n        .domain([min, max])\n        .range([0, VIEWBOX_SIZE[0] - 2 * MARGIN_RIGHT])\n        .clamp(true),\n      y: scaleLinear()\n        .domain([0, 1])\n        .range([VIEWBOX_SIZE[1] - 2 * MARGIN_BOTTOM, 0])\n        .clamp(true),\n    };\n  }, [min, max]);\n\n  const handleClose = React.useCallback(() => {\n    setOpen?.(false);\n  }, [setOpen]);\n\n  const handleSave = React.useCallback(() => {\n    onSave?.(points.map(({ x, y }) => ({ x, y })));\n  }, [onSave, points]);\n\n  return (\n    <>\n      <Modal show={open} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Draw desirability</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <form\n            className=\"row mb-2\"\n            style={{ alignItems: \"baseline\", flexFlow: \"row\", justifyContent: \"center\" }}\n            onSubmit={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setMin(inputMin);\n              setMax(inputMax);\n            }}\n          >\n            <div className=\"col mb-3 me-4\">\n              <label htmlFor=\"curveMinInput\">Minimum</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm ms-2\"\n                id=\"curveMinInput\"\n                value={inputMin}\n                onChange={(e) => setInputMin(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"col mb-3 me-4\">\n              <label htmlFor=\"curveMaxInput\">Maximum</label>\n              <input\n                type=\"number\"\n                className=\"form-control  form-control-sm ms-2\"\n                id=\"curveMaxInput\"\n                value={inputMax}\n                onChange={(e) => setInputMax(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"col\">\n              <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                Apply\n              </button>\n            </div>\n          </form>\n          <CurveEditor\n            points={points}\n            setPoints={setPoints}\n            scales={scales}\n            viewBoxSize={VIEWBOX_SIZE}\n            curveType={DEFAULT_CURVE_TYPES[\"Linear\"]}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { ICollection, IObjective, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { runMSO } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { Alert } from \"react-bootstrap\";\nimport { CurveEditorModal } from \"../CurveEditorModal\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const MSOForm = ({\n  availableObjectives,\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  availableObjectives?: IObjective[];\n  addCollection(collection: ICollection): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"msoNameInput\", \"MSO\");\n  const [msoStartingStructure, setMsoStartingStructure] = React.useState<string>(\"\");\n  const [nrOfParticles, setNrOfParticles] = React.useState<number>(50);\n  const [nrOfIterations, setNrOfIterations] = React.useState<number>(10);\n  const [nrOfSwarms, setNrOfSwarms] = React.useState<number>(5);\n  const [vMin, setVMin] = React.useState<number>(-0.6);\n  const [vMax, setVMax] = React.useState<number>(0.6);\n  const [inertiaWeight, setInertiaWeight] = React.useState<number>(0.9);\n  const [phi1, setPhi1] = React.useState<number>(2.0);\n  const [phi2, setPhi2] = React.useState<number>(2.0);\n  const [phi3, setPhi3] = React.useState<number>(2.0);\n  const [selectedObjective, setSelectedObjective] = React.useState<any | null>();\n  const [objectives, setObjectives] = React.useState<IObjective[]>([]);\n  const [desirabilityCurveObjective, setDesirabilityCurveObjective] = React.useState<IObjective | null>(null);\n\n  return (\n    <FormWrapper\n      title=\"Molecular Swarm Optimization\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const msoCollection = await runMSO({\n          structure: msoStartingStructure,\n          iterations: nrOfIterations,\n          num_swarms: nrOfSwarms,\n          num_part: nrOfParticles,\n          v_min: vMin,\n          v_max: vMax,\n          inertia_weight: inertiaWeight,\n          phi1,\n          phi2,\n          phi3,\n          objectives,\n        });\n\n        addCollection({ ...msoCollection, name });\n        setName(\"\");\n      }}\n    >\n      {desirabilityCurveObjective ? (\n        <CurveEditorModal\n          open={desirabilityCurveObjective != null}\n          initialPoints={desirabilityCurveObjective.desirability}\n          setOpen={(open) => (open ? null : setDesirabilityCurveObjective(null))}\n          onSave={(points) => {\n            setObjectives(\n              objectives.map((o) => (o === desirabilityCurveObjective ? { ...o, desirability: points } : o))\n            );\n            setDesirabilityCurveObjective(null);\n          }}\n        />\n      ) : null}\n      {nameInput}\n      {availableObjectives ? (\n        <>\n          <div className=\"mb-3\">\n            <label htmlFor=\"msoObjectivesSelect\">Objectives</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"msoObjectivesSelect\"\n                value={selectedObjective?.name}\n                onChange={(e) => {\n                  setSelectedObjective(availableObjectives.find((o) => o.name === e.currentTarget.value));\n                }}\n              >\n                <option value=\"\">Choose...</option>\n                {availableObjectives.map((o) => (\n                  <option key={o.name} value={o.name}>{o.name}</option>\n                ))}\n              </select>\n              <input\n                type=\"number\"\n                className=\"form-control-plaintext form-control-sm\"\n                required\n                value={objectives.length}\n                onChange={() => null}\n                min={1}\n                style={{\n                  flex: \"0 0 1px\",\n                }}\n              />\n                <button\n                  disabled={!selectedObjective}\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={() => setObjectives([...objectives, selectedObjective])}\n                >\n                  Add\n                </button>\n            </div>\n            <small id=\"msoObjectivesSelect\" className=\"form-text text-muted\">\n              Objectives define the optimization goal of MSO\n            </small>\n          </div>\n          <div className=\"mb-3\" style={{ overflowX: \"hidden\" }}>\n            {objectives.map((objective) => (\n              <details key={objective.name} className=\"mb-1\" open={Boolean(objective.additional_args)}>\n                <summary className=\"text-truncate\">\n                  {objective.name}{\" \"}\n                  <div className=\"btn-group btn-group-sm ms-2 me-2 float-end\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-light\"\n                      title=\"Adjust desirability curve\"\n                      onClick={() => {\n                        setDesirabilityCurveObjective(objective);\n                      }}\n                    >\n                      <i className=\"fas fa-fw fa-bezier-curve\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-danger\"\n                      title=\"Delete objective\"\n                      onClick={() => {\n                        setObjectives(objectives.filter((o) => o !== objective));\n                      }}\n                    >\n                      <i className=\"fas fa-fw fa-times\" />\n                    </button>\n                  </div>\n                </summary>\n                <small title={objective.description} className=\"text-truncate\">\n                  {objective.description}\n                </small>\n                <div className=\"d-flex\" title=\"Relative weight of objective\">\n                  {/* <label for=\"formControlRange\" className=\"form-label\">Example Range input</label> */}\n                  <input\n                    type=\"range\"\n                    className=\"form-range me-2\"\n                    min={1}\n                    max={100}\n                    step={1}\n                    value={objective.weight}\n                    onChange={(e) => {\n                      setObjectives(\n                        objectives.map((o) => (o === objective ? { ...o, weight: e.currentTarget.valueAsNumber } : o))\n                      );\n                    }}\n                  />\n                  {objective.weight}%\n                </div>\n                {Object.entries(objective.additional_args || {}).map(([key, value]) => {\n                  const setValue = (value: string) =>\n                    setObjectives(\n                      objectives.map((o) =>\n                        o === objective\n                          ? {\n                              ...o,\n                              additional_args: {\n                                ...o.additional_args,\n                                [key]: value,\n                              },\n                            }\n                          : o\n                      )\n                    );\n\n                  return (\n                    <div key={key} className=\"input-group input-group-sm\">\n                      {key === \"query\" ? (\n                        <UseStructureInputAddon value={value} selection={selection} setValue={setValue} />\n                      ) : null}\n                      <input\n                        key={key}\n                        type=\"text\"\n                        className=\"form-control form-control-sm\"\n                        placeholder={key}\n                        value={value}\n                        required={true}\n                        onChange={(e) => setValue(e.currentTarget.value)}\n                      />\n                    </div>\n                  );\n                })}\n                <hr />\n              </details>\n            ))}\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"startingStructureInput\">Starting structure</label>\n            <div className=\"input-group input-group-sm\">\n              <UseStructureInputAddon\n                value={msoStartingStructure}\n                selection={selection}\n                setValue={setMsoStartingStructure}\n              />\n              <input\n                type=\"text\"\n                className=\"form-control form-control-sm\"\n                id=\"startingStructureInput\"\n                aria-describedby=\"startingStructureInputHelp\"\n                required\n                value={msoStartingStructure}\n                onChange={(e) => setMsoStartingStructure(e.currentTarget.value)}\n              />\n            </div>\n            <small id=\"startingStructureInputHelp\" className=\"form-text text-muted\"></small>\n          </div>\n          <details>\n            <summary>Advanced Settings</summary>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfSwarmsInput\">Swarms</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfSwarmsInput\"\n                value={nrOfSwarms}\n                required\n                min={1}\n                onChange={(e) => setNrOfSwarms(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfParticlesInput\">Particles</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfParticlesInput\"\n                value={nrOfParticles}\n                required\n                min={1}\n                onChange={(e) => setNrOfParticles(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"nrOfIterationsInput\">Iterations</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"nrOfIterationsInput\"\n                value={nrOfIterations}\n                required\n                min={1}\n                onChange={(e) => setNrOfIterations(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"vMinInput\">Min Velocity</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"vMinInput\"\n                value={vMin}\n                required\n                step={0.1}\n                onChange={(e) => setVMin(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"vMaxInput\">Max Velocity</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"vMaxInput\"\n                value={vMax}\n                required\n                step={0.1}\n                onChange={(e) => setVMax(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"inertiaWeightInput\">Inertia Weight</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"inertiaWeightInput\"\n                value={inertiaWeight}\n                required\n                step={0.1}\n                onChange={(e) => setInertiaWeight(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi1Input\">Phi 1</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi1Input\"\n                value={phi1}\n                required\n                step={0.1}\n                onChange={(e) => setPhi1(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi2Input\">Phi 2</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi2Input\"\n                value={phi2}\n                required\n                step={0.1}\n                onChange={(e) => setPhi2(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n            <div className=\"mb-3\">\n              <label htmlFor=\"phi3Input\">Phi 3</label>\n              <input\n                type=\"number\"\n                className=\"form-control form-control-sm\"\n                id=\"phi3Input\"\n                value={phi3}\n                required\n                step={0.1}\n                onChange={(e) => setPhi3(e.currentTarget.valueAsNumber)}\n              />\n            </div>\n          </details>\n          <div className=\"text-end\">\n            <ButtonWithUpload\n              loading={loading}\n              text=\"Run MSO\"\n              onUploadResult={(value) => {\n                if (value) {\n                  addCollection({ data: JSON.parse(value), name: \"MSO\" });\n                  return true;\n                }\n              }}\n            />\n          </div>\n        </>\n      ) : (\n        <Alert variant=\"info\">\n          <p>No objectives are available.</p>\n        </Alert>\n      )}\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { DEFAULT_COLLECTION, ICollection } from \"../../interfaces\";\nimport { embedStructures } from \"../../utils/api\";\nimport { useNameInput } from \"../../utils/hooks\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { parse } from 'papaparse';\n\nexport const ComputeEmbeddingsForm = ({\n  addCollection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [name, setName, nameInput] = useNameInput(\"cdddNameInput\", \"\");\n  const [cdddInput, setCdddInput] = React.useState<string>(\"\");\n\n  return (\n    <FormWrapper\n      title=\"Compute Embeddings\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const structures: Parameters<typeof embedStructures>[0]['structures'] = [];\n        const additional: { [key: string]: {[key: string]: string | number | boolean} } = {};\n\n        const result = parse<{\n          smiles: string;\n          [key: string]: string | number | boolean;\n        }>(cdddInput, {\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          transformHeader: (header) => {\n            if(['smiles', 'structure', 'structures'].includes(header.trim().toLocaleLowerCase())) {\n              return 'smiles';\n            }\n            return header.trim();\n          },\n          transform: (value, field) => {\n            if(field.toString().startsWith('emb_')) {\n              // Any value starting with emb_ will be parsed as JSON, such that [1.1, 1.2, 1.3] is a valid string\n              return JSON.parse(value);\n            }\n            return value;\n          }\n        });\n\n        if(!result.meta.fields?.includes('smiles')) {\n          throw Error('No header named \"smiles\" found. Please include a header called \"smiles\" in the column of the structure.');\n        }\n\n        result.data.filter((d) => d.smiles).forEach(({smiles, ...rest}) => {\n          const embeddings: {[key: string]: number[]} = {};\n          Object.keys(rest).filter((key) => key.startsWith('emb_')).forEach((key) => {\n            embeddings[key] = rest[key] as any as number[];\n            delete rest[key];\n          })\n\n          structures.push({\n            smiles,\n            embeddings\n          });\n          additional[smiles] = rest;\n        })\n\n        const newCollection = await embedStructures({\n          structures,\n          include_embedding: false\n        });\n\n        newCollection.data = newCollection.data.map((particle) => {\n          const additionalProperties = additional[particle.original_structure!];\n          // Inject the additional properties if there are any\n          if (additionalProperties) {\n            particle.properties = {\n              ...(particle.properties || {}),\n              ...additionalProperties,\n            };\n          }\n          return particle;\n        });\n        addCollection({\n          name,\n          ...newCollection,\n        });\n        setName(\"\");\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"cdddTextarea\">Structures to convert</label>\n        <textarea\n          className=\"form-control form-control-sm\"\n          id=\"cdddTextarea\"\n          rows={3}\n          onChange={(e) => setCdddInput(e.currentTarget.value)}\n          value={cdddInput}\n        />\n        <small id=\"cdddTextareaHelp\" className=\"form-text text-muted\">\n          Any CSV file format with a header \"smiles\" is valid. You can add additional properties as columns, which will be shown in the visualizations and ranking. \n          Additionally, any column starting with \"emb_\" will be parsed as JSON (value has to be an array like \"[1.2, 1.3, 1.5, ...]\") and used as precomputed embedding.\n        </small>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload\n          loading={loading}\n          text=\"Compute\"\n          onUploadData={(value) => {\n            setCdddInput(value || \"\");\n            return true;\n          }}\n          onUploadResult={(value) => {\n            if (value) {\n              addCollection({\n                data: JSON.parse(value),\n                name: DEFAULT_COLLECTION,\n              });\n              return true;\n            }\n          }}\n        />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { hasSubstructureMatch } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\n\nexport const SubstructureMatchingForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [smarts, setSmarts] = React.useState<string>(\"\");\n\n  const computeSubstructures = async () => {\n    return Promise.all(\n      collections.map(({ data }) =>\n        hasSubstructureMatch(\n          data.map(({ structure }) => structure),\n          smarts\n        )\n      )\n    ).then((results) => {\n      setCollections(\n        collections.map((c, i) => {\n          return {\n            ...c,\n            data: c.data.map((p) => ({\n              ...p,\n              properties: {\n                ...(p.properties || {}),\n                [`Has ${smarts}`]: Boolean(results[i].validity[p.structure]),\n                [`Count ${smarts}`]: results[i].counts[p.structure] ?? 0,\n              },\n            })),\n            selection: null,\n          };\n        })\n      );\n    });\n  };\n\n  return (\n    <FormWrapper\n      title=\"Substructure Matching\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={computeSubstructures}\n    >\n      <div className=\"mb-3\">\n        <label htmlFor=\"smartsStructureInput\">Substructure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={smarts} selection={selection} setValue={setSmarts} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"smartsStructureInput\"\n            aria-describedby=\"smartsStructureInput\"\n            value={smarts}\n            onChange={(e) => setSmarts(e.currentTarget.value)}\n          />\n        </div>\n        <small id=\"smartsStructureInputHelp\" className=\"form-text text-muted\">\n          Use a SMILES or SMARTS query\n        </small>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!smarts} text=\"Compute Substructure Matches\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getTanimotoSimilarity } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\n\nexport const TanimotoForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [similarityRef, setSimilarityRef] = React.useState<string>(\"\");\n  const [similaryFP, setSimilarityFP] = React.useState<string>(\"ecfp4\");\n\n  const computeTanimotoSimilarity = () => {\n\n    if(similaryFP === \"embeddings\") {\n      setCollections(collections.map((c) => {\n        const reference: IParticle = Object.values(selection || {})?.[0]?.[0];\n        if(!reference || !reference.embedding || Object.entries(reference.embedding).length === 0) {\n          throw Error('This type of similarity requires an active selection (with precomputed embeddings)');\n        }\n        const availableEmbeddings = Object.keys(reference.embedding);\n          \n        return {\n          ...c,\n          data: c.data.map((p) => ({\n            ...p,\n            properties: {\n              ...(p.properties || {}),\n              ...(availableEmbeddings.reduce((acc, cur) => ({...acc, [`${cur} Distance ${similarityRef}`]: p.embedding?.[cur]?.reduce((acc, x, i) => {\n                const y = reference.embedding![cur][i];\n                // TODO: Implement other distance metrics (VAE requires different one...)\n                return acc - Math.pow(x - y, 2);\n              }, 0)}), {})),\n            },\n          })),\n          selection: null,\n        };\n      }));\n      return;\n    }\n\n    return Promise.all(\n      collections.map(async ({ data }) =>\n        getTanimotoSimilarity(\n          data.map((s) => s.structure),\n          similarityRef,\n          similaryFP\n        )\n      )\n    ).then((results) => {\n      setCollections(\n        collections.map((c, i) => {\n          return {\n            ...c,\n            data: c.data.map((p) => ({\n              ...p,\n              properties: {\n                ...(p.properties || {}),\n                [`${similaryFP} Distance ${similarityRef}`]: results[i].tanimoto[p.structure],\n              },\n            })),\n            selection: null,\n          };\n        })\n      );\n    });\n  };\n\n  return (\n    <FormWrapper\n      title=\"Tanimoto Similarity\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={computeTanimotoSimilarity}\n    >\n      <div className=\"mb-3\">\n        <label htmlFor=\"similarityRefStructureInput\">Reference structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={similarityRef} selection={selection} setValue={setSimilarityRef} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"similarityRefStructureInput\"\n            aria-describedby=\"similarityRefStructureInput\"\n            value={similarityRef}\n            onChange={(e) => setSimilarityRef(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3\">\n        <label htmlFor=\"similarityFingerprintInput\">Fingerprint</label>\n        <select\n          className=\"form-control form-control-sm\"\n          id=\"similarityFingerprintInput\"\n          value={similaryFP}\n          onChange={(e) => setSimilarityFP(e.currentTarget.value)}\n        >\n          <option value=\"ecfp2\">ECFP2 (Morgan Fingerprint)</option>\n          <option value=\"ecfp4\">ECFP4 (Morgan Fingerprint)</option>\n          <option value=\"cddd\">Descriptors from CDDD (ChEMBL only)</option>\n          <option value=\"embeddings\">Embeddings</option>\n        </select>\n      </div>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!similarityRef} text=\"Compute Similarity\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { OverlayTrigger, Popover } from \"react-bootstrap\";\nimport { Layout } from \"react-grid-layout\";\n\nexport const GridItemOptions = React.memo(\n  ({\n    gridOptions,\n    key,\n    children,\n    onClose,\n    onSettings,\n    renderInfo,\n    enableMove = true,\n  }: {\n    gridOptions?: Partial<Layout>;\n    key: string;\n    children: React.ReactNode;\n    onClose?(): void;\n    onSettings?(): void;\n    renderInfo?(): React.ReactNode;\n    enableMove?: boolean;\n  }) => (\n    <>\n      {enableMove ? (\n        <i\n          className=\"fas fa-fw fa-arrows-alt react-grid-item-hidden react-grid-item-drag-handle\"\n          title=\"Move\"\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 5,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n        {renderInfo ? (\n        <OverlayTrigger\n          trigger={[\"hover\", \"focus\"]}\n          placement=\"auto\"\n          overlay={\n            <Popover id={key}>\n              <Popover.Header as=\"h3\">Projection information</Popover.Header>\n              <Popover.Body>\n                {renderInfo()}\n              </Popover.Body>\n            </Popover>\n          }\n        >\n          <i\n            className=\"fas fa-fw fa-info-circle react-grid-item-hidden\"\n            style={{\n              position: \"absolute\",\n              zIndex: 1,\n              top: 3,\n              left: 30,\n              cursor: \"pointer\",\n            }}\n          />\n        </OverlayTrigger>\n      ) : null}\n      {onSettings ? (\n        <i\n          className=\"fas fa-fw fa-cog react-grid-item-hidden\"\n          title=\"Change settings\"\n          onClick={onSettings}\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 55,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n      {onClose ? (\n        <i\n          className=\"fas fa-fw fa-times react-grid-item-hidden\"\n          title=\"Close\"\n          onClick={onClose}\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            top: 3,\n            left: 80,\n            cursor: \"pointer\",\n          }}\n        />\n      ) : null}\n      {children}\n    </>\n  )\n);\n","import * as React from \"react\";\nimport GridLayout, { WidthProvider, Layout } from \"react-grid-layout\";\n\nconst SizedGridLayout = WidthProvider(GridLayout);\n\ndeclare type GridChild = React.ReactElement<{\n  key: Layout[\"i\"];\n  gridOptions?: Partial<Layout>;\n}>;\n\nexport const Grid = ({ children: _children }: { children: GridChild | GridChild[] }) => {\n  const [layout, setLayout] = React.useState<Layout[] | null>();\n\n  const children = React.useMemo(() => (!_children || Array.isArray(_children) ? _children.flat() : [_children]).filter((c) => c?.key), [\n    _children,\n  ]);\n\n  React.useEffect(() => {\n    const validChildren = children.filter((c) => c?.key != null);\n    const missingLayout = validChildren.filter((c) => !layout?.find((l) => l.i === c.key));\n\n    if (missingLayout.length > 0) {\n      setLayout([\n        ...(layout?.filter((l) => validChildren.find((c) => c.key === l.i)) || []),\n        ...missingLayout.map((c, i) => ({\n          // @ts-ignore\n          i: c.key as string,\n          h: 15,\n          w: 6,\n          x: i % 2 === 0 ? 0 : 6,\n          y: 1,\n          ...(c?.props?.gridOptions || {}),\n        })),\n      ]);\n    }\n  }, [children, layout]);\n\n  return layout ? (\n    <SizedGridLayout\n      draggableHandle=\".react-grid-item-drag-handle\"\n      cols={12}\n      rowHeight={10}\n      className=\"flex-fill\"\n      // preventCollision={true}\n      verticalCompact={true}\n      layout={layout}\n      compactType=\"horizontal\"\n      onLayoutChange={(layout) => {\n        window.dispatchEvent(new Event(\"resize\"));\n        setLayout(layout);\n      }}\n    >\n      {children.map((c) => (\n        <div key={c.key}>{c}</div>\n      ))}\n    </SizedGridLayout>\n  ) : null;\n};\n","import * as React from \"react\";\nimport { Figure } from \"react-plotly.js\";\nimport { ICollection, IParticleSelection } from \"../interfaces\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { max, min } from \"d3-array\";\nimport Select, { OptionsType } from \"react-select\";\nimport isEqual from \"lodash.isequal\";\nimport { GridItemOptions } from \"./GridItemOptions\";\nimport { Grid } from \"./Grid\";\nimport { DEFAULT_COLORWAY, DEFAULT_PLOTLY_COLORSCALE } from \"../utils/constants\";\n\nexport interface IParallelCoordinatesPlotProps {\n  collections: ICollection[];\n  selection: IParticleSelection;\n  setSelection(selected: IParticleSelection): void;\n  /**\n   * Currently filtered selection. If passed, only the coordinates of filtered items are shown.\n   */\n  filterSelection?: IParticleSelection;\n}\n\ninterface ISelectOption {\n  label: string;\n  value: string;\n  order: \"asc\" | \"desc\";\n}\n\nexport const ParallelCoordinatesPlot = React.memo(({ collections, selection, setSelection, filterSelection }: IParallelCoordinatesPlotProps) => {\n  const [figureState, setFigureState] = React.useState<Figure | null>(null);\n  const [enabledProperties, setEnabledProperties] = React.useState<OptionsType<ISelectOption>>([]);\n  const [colorProperty, setColorProperty] = React.useState<ISelectOption | null>(null);\n  // const [selection, setSelection] = React.useState<IParticleSelection | null>(null);\n  const [constraintRange, setConstraintRange] = React.useState<{ [key: string]: [number, number][] } | null>(null);\n\n  const filteredCollections = React.useMemo(() => collections.filter((c) => !c.hidden), [collections]);\n  const availableProperties = React.useMemo(\n    () =>\n      Array.from(\n        new Set(\n          filteredCollections\n            .map((c) =>\n              Object.keys(c.data[0]?.properties || {})\n                // TODO: Find other condition\n                // .filter(([key, value]) => typeof value === \"number\")\n                // .map(([key, value]) => key)\n            )\n            .flat()\n        )\n      ),\n    [filteredCollections]\n  );\n\n  React.useEffect(() => {\n    // Cleanup\n    // setFilterSelection(null);\n    setConstraintRange(null);\n    // setSelection(null);\n  }, [filteredCollections, enabledProperties]);\n\n  React.useEffect(() => {\n    setFigureState((figureState) => {\n      if (enabledProperties.length < 2) {\n        return null;\n      }\n\n      const filtered = Object.values(filterSelection || {}).flat();\n      const all = filtered.length > 0 ? filtered : filteredCollections.map((c) => c.data).flat().slice(0, 500);\n\n      const newFigureState: Figure = {\n        frames: [],\n        layout: {\n          ...(figureState?.layout || {}),\n          autosize: true,\n          colorway: DEFAULT_COLORWAY,\n          showlegend: true,\n        },\n        data: [\n          {\n            // @ts-ignore\n            type: \"parcoords\",\n            line: {\n              //   // TODO Make semi-transparent,\n              // @ts-ignore\n              showscale: colorProperty ? false : false,\n              // colorscale: [\n              //   ['0.0', DEFAULT_COLORWAY[0] + '0a'],\n              //   ['1.0', DEFAULT_COLORWAY[1] + '0a']\n              // ],\n              // If we don't have a numeric scale, use a color map for the filteredCollections instead\n              // colorscale: colorProperty ? \"Portland\" : filteredCollections.map((c, i) => [i, DEFAULT_COLORWAY[i]]),\n              ...DEFAULT_PLOTLY_COLORSCALE,\n              color: colorProperty ? all.map((p) => p.properties![colorProperty.value] as number) : filteredCollections.map((c, i) => Array(c.data.length).fill(i.toString())).flat(),\n            },\n            // @ts-ignore\n            dimensions: [\n              ...enabledProperties.map(({ value, order }) => {\n                const values = all.map((p) => p.properties![value] as number);\n                const minValue = min(values);\n                const maxValue = max(values);\n                if (minValue == null || maxValue == null) {\n                  return null;\n                }\n                const range = [Math.min(0, minValue), maxValue];\n\n                return {\n                  range: order === \"desc\" ? range : range.reverse(),\n                  constraintrange: constraintRange?.[value],\n                  values,\n                  label: value,\n                };\n              }),\n            ],\n          },\n        ],\n      };\n      console.log(newFigureState)\n      return newFigureState;\n    });\n  }, [filteredCollections, filterSelection, enabledProperties, constraintRange, colorProperty]);\n\n  return (\n    <div className=\"d-flex flex-column flex-fill\">\n      <form>\n        <div className=\"row\">\n          <div className=\"col-md-10 mb-3\">\n            <label htmlFor=\"propertiesSelect\">Properties</label>\n            <Select<ISelectOption, true>\n              menuPosition=\"fixed\"\n              isMulti\n              className=\"mb-3\"\n              name=\"propertiesSelect\"\n              value={enabledProperties}\n              onChange={(e) => {\n                setEnabledProperties(e);\n              }}\n              options={availableProperties.map((p) => ({\n                value: p,\n                label: p,\n                order: \"desc\",\n              }))}\n              openMenuOnClick={false}\n              closeMenuOnSelect={false}\n              formatOptionLabel={(option, meta) => {\n                if (meta.context === \"value\") {\n                  return (\n                    <div className=\"d-flex flex-row align-items-center\">\n                      <span title={option.label} className=\"text-truncate\" style={{ maxWidth: 150 }}>\n                        {option.label}\n                      </span>\n                      <i\n                        role=\"button\"\n                        title=\"Change axis order\"\n                        className={`fas fa-fw fa-sort-amount-${option.order === \"asc\" ? \"up-alt\" : \"down\"} ms-1 me-1 `}\n                        onClick={(e) => {\n                          setEnabledProperties(\n                            enabledProperties.map((p) =>\n                              p === option\n                                ? {\n                                    ...p,\n                                    order: p.order === \"asc\" ? \"desc\" : \"asc\",\n                                  }\n                                : p\n                            )\n                          );\n                        }}\n                      />\n                    </div>\n                  );\n                }\n                return option.label;\n              }}\n            />\n          </div>\n          <div className=\"col-md-2 mb-3\">\n            <label htmlFor=\"colorBySelect\">Color By</label>\n            <Select<ISelectOption, false>\n              menuPosition=\"fixed\"\n              className=\"mb-3\"\n              name=\"colorBySelect\"\n              value={colorProperty}\n              isClearable={true}\n              onChange={(e) => {\n                setColorProperty(e);\n              }}\n              options={availableProperties.map((p) => ({\n                value: p,\n                label: p,\n                order: \"desc\",\n              }))}\n            />\n          </div>\n        </div>\n      </form>\n\n      {figureState ? (\n        <>\n          <Grid>\n            <GridItemOptions\n              enableMove={false}\n              key=\"parcoordsGridItem\"\n              gridOptions={{\n                w: 12,\n                h: 25,\n                y: 0,\n                x: 0,\n              }}\n            >\n            <i\n              className=\"fas fa-fw fa-sync-alt react-grid-item-hidden\"\n              title=\"Sync global selection with plot (up to 1000)\"\n              onClick={() => {\n                const allSelected = Object.values(selection || {}).flat();\n                if (allSelected.length <= 1000) {\n                  // If we have below a certain threshold of items, we can create the constraint range for each individual one\n                  setConstraintRange(\n                    enabledProperties.reduce((acc, { value }) => {\n                      return {\n                        ...acc,\n                        [value]: allSelected.map((p) => p.properties![value] as number).map((v) => [v, v + 0.0001]),\n                      };\n                    }, {})\n                  );\n                } else {\n                  setConstraintRange(null);\n                  // TODO: Check if current range is sufficient for current selection\n                  // setConstraintRange((currentRange) => {\n                  //   const allIncluded = allSelected.every((p) => Object.entries(currentRange || {}).every(([key, allRanges]) => {\n                  //     return allRanges.some(\n                  //       (range) => p.properties?.[key]! >= range[0] && p.properties?.[key]! <= range[1]\n                  //     );\n                  //   }));\n                  //   return allIncluded ? currentRange : null;\n                  // });\n                }\n              }}\n              style={{\n                position: \"absolute\",\n                zIndex: 1,\n                top: 3,\n                left: 55,\n                cursor: \"pointer\",\n              }}\n            />\n            <i\n              className=\"fas fa-fw fa-ban react-grid-item-hidden\"\n              title=\"Clear selection\"\n              onClick={() => {\n                setConstraintRange(null);\n              }}\n              style={{\n                position: \"absolute\",\n                zIndex: 1,\n                top: 3,\n                left: 80,\n                cursor: \"pointer\",\n              }}\n            />\n              <PlotComponent\n                style={{\n                  width: \"99%\",\n                  height: \"100%\",\n                }}\n                data={figureState.data}\n                layout={figureState.layout}\n                config={PLOTLY_CONFIG}\n                onRestyle={() => {\n                  // @ts-ignore\n                  const filter: { [key: string]: [number, number][] } = figureState.data[0].dimensions\n                    // @ts-ignore\n                    .filter((dim) => dim?.constraintrange)\n                    .reduce(\n                      // @ts-ignore\n                      (acc, cur) =>\n                        cur.constraintrange?.length > 0 ? { ...acc, [cur.label]: typeof cur.constraintrange[0] === 'number' ? [cur.constraintrange] : cur.constraintrange } : acc,\n                      {}\n                    );\n\n                  if (Object.entries(filter).length > 0) {\n                    const valid = filteredCollections.reduce(\n                      (acc, c) => ({\n                        ...acc,\n                        [c.name]: c.data.filter((p) =>\n                          Object.entries(filter).every(([key, allRanges]) => {\n                            return allRanges.some(\n                              (range) => p.properties?.[key]! >= range[0] && p.properties?.[key]! <= range[1]\n                            );\n                          })\n                        ),\n                      }),\n                      {}\n                    );\n                    setConstraintRange(filter);\n                    setSelection(Object.entries(valid).length > 0 ? valid : null);\n                  } else {\n                    setConstraintRange(null);\n                    setSelection(null);\n                  }\n                }}\n                onUpdate={(figure) => {\n                  // Synchronize ordering of parallel coordinates with select\n                  // @ts-ignore\n                  const newOrdering: string[] = figure.data?.[0].dimensions.filter(Boolean).map((d) => d.label);\n                  if (\n                    newOrdering &&\n                    !isEqual(\n                      newOrdering,\n                      enabledProperties.map((e) => e.value)\n                    )\n                  ) {\n                    setEnabledProperties(\n                      newOrdering.map((value) => enabledProperties.find((e) => e.value === value)!).filter(Boolean)\n                    );\n                  }\n                  // Inline save the figure to save the zoom\n                  //   figureState.data = figure.data;\n                  //   figureState.frames = figure.frames;\n                  //   figureState.layout = figure.layout;\n                }}\n              />\n            </GridItemOptions>\n          </Grid>\n        </>\n      ) : (\n        <p>Please select at least 2 properties from the dropdown.</p>\n      )}\n    </div>\n  );\n});\n","import { buildRanking, NumberColumn, Ranking, Taggle } from \"lineupjs\";\nimport * as React from \"react\";\nimport Select from \"react-select/creatable\";\nimport { ICollection, INearestNeighbors, IParticle, IParticleSelection } from \"../interfaces\";\nimport { normalizeArray, toNumber } from \"../utils\";\nimport { DEFAULT_PLOTLY_COLORSCALE } from \"../utils/constants\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureImageColumn } from \"./ranking/StructureImageColumn\";\nimport { StructureImage } from \"./StructureImage\";\n\nfunction getKNNByMetric(\n  particles: IParticle[],\n  reference: IParticle,\n  getter: (particle: IParticle) => number\n): INearestNeighbors {\n  const values = particles.map((particle) => getter(particle));\n  const referenceValue = getter(reference);\n  const difference = values\n    .map((value, index) => ({ diff: Math.abs(value - referenceValue), index }))\n    .sort((a, b) => a.diff - b.diff)\n    .slice(0, 50);\n  return {\n    distance_metric: \"absolute_difference\",\n    knn_ind: difference.map(({ index }) => index),\n    knn_dist: difference.map(({ diff }) => diff),\n    knn_particles: difference.map(({ index }) => particles[index]),\n  };\n}\n\nexport function LocalNeighborhoodPlot({\n  selected,\n  collection,\n}: {\n  selected: IParticle | null | undefined;\n  collection: ICollection | null | undefined;\n  setHover(hover: IParticle | null): void;\n  hover: IParticle | null;\n}) {\n  const [hover, setHover] = React.useState<IParticle | null>(null);\n  const [selection, setSelection] = React.useState<Set<IParticle>>(new Set());\n  const [referenceEmbedding, setReferenceEmbedding] = React.useState<string>(\"\");\n  const [enabledEmbeddings, setEnabledEmbeddings] = React.useState<string[]>([]);\n\n  React.useEffect(() => {\n    setHover(null);\n    setSelection(new Set());\n  }, [selected]);\n\n  const allAvailableProperties = React.useMemo(() => Object.keys(selected?.properties || {}), [selected]);\n  /* const allAvailableEmbeddings = React.useMemo(\n    () =>\n      Object.entries({\n        ...(selected?.nearest_neighbors || {}),\n        // TODO: Enable to allow properties as \"distance\"\n        // ...Object.fromEntries(\n        //   collection && selected\n        //     ? allAvailableProperties\n        //         .filter(([key, value]) => typeof value === \"number\")\n        //         .map(([key, value]) => [\n        //           key,\n        //           getKNNByMetric(collection.data, selected, (p) => p.properties[key] as number),\n        //         ])\n        //     : []\n        // ),\n      }),\n    [selected, collection, allAvailableProperties]\n  ); */\n\n  const filteredAvailableEmbeddings = React.useMemo(\n    () =>\n      enabledEmbeddings.length === 0 || !selected\n        ? []\n        : enabledEmbeddings\n            .map((e) => [e, selected.nearest_neighbors?.[e]!] as [string, INearestNeighbors])\n            .filter(([key, value]) => key && value),\n    [enabledEmbeddings, selected]\n  );\n\n  const getRankingBuilders = React.useCallback(() => {\n    // For each available embedding, create a ranking\n    return filteredAvailableEmbeddings.map(([key, value], i) => {\n      const rankingBuilder = buildRanking();\n      // rankingBuilder.column('_rank');\n      rankingBuilder.column(\"structure\");\n      if (i === 0) {\n        rankingBuilder.column(\"Occurances\");\n      }\n      rankingBuilder.column(`Distance_${key}`);\n      rankingBuilder.sortBy(`Distance_${key}`);\n      // rankingBuilder.allColumns();\n      return rankingBuilder;\n    });\n  }, [filteredAvailableEmbeddings]);\n\n  const adjustRankings = React.useCallback((lineup: Taggle, rankings: Ranking[]) => {\n    rankings.forEach((ranking) => {\n      const distanceColumn = ranking.flatColumns.find(\n        (col) => col instanceof NumberColumn && col.desc.label.toLowerCase().startsWith(\"distance\")\n      ) as NumberColumn | undefined;\n      // distanceColumn\n      distanceColumn?.setFilter({\n        filterMissing: true,\n        min: -Infinity,\n        max: Infinity,\n      });\n      // distanceColumn?.on(\"filterChanged\", (prev, current) => console.log(current));\n    });\n  }, []);\n\n  // Compute the \"histogram\" of index occurances --> the more often it occurs, the \"better\" the neighbor is\n  const indexOccurances = React.useMemo(\n    () =>\n      filteredAvailableEmbeddings.reduce<{ [index: number]: number }>((acc, [key, value]) => {\n        value.knn_ind.forEach((v) => {\n          acc[v] = (acc[v] || 0) + 1;\n        });\n        return acc;\n      }, {}),\n    [filteredAvailableEmbeddings]\n  );\n\n  const selectionCollections = React.useMemo(\n    () => [\n      {\n        name: \"Selection\",\n        data: (selection.size > 0\n          ? Array.from(selection)\n          : Array.from(new Set(filteredAvailableEmbeddings.map(([key, value]) => value.knn_particles).flat()))\n        ).map((p) => ({\n          ...p,\n          // Additionally store the original particle as reference for selection synchronization\n          originalParticle: p,\n          properties: {\n            Occurances: filteredAvailableEmbeddings\n              .filter(([key, value]) => value.knn_particles.includes(p))\n              .map(([key, value]) => key!) as any,\n            ...p.properties,\n            ...filteredAvailableEmbeddings.reduce<{ [key: string]: number | null }>((acc, [key, value]) => {\n              const index = value.knn_particles.indexOf(p);\n              acc[`Distance_${key}`] = index >= 0 ? value.knn_dist[index] : null;\n              return acc;\n            }, {}),\n          },\n        })),\n      },\n    ],\n    [selection, filteredAvailableEmbeddings]\n  );\n\n  const setSelectedFromLineup = React.useCallback(\n    (selection: IParticleSelection) =>\n      setHover(\n        // @ts-ignore\n        Object.values(selection || {}).flat()?.[0]?.originalParticle\n      ),\n    []\n  );\n\n  const normalizedDistances = React.useMemo(\n    () =>\n      Object.fromEntries(\n        filteredAvailableEmbeddings.map(([key, value]) => [key, normalizeArray(value.knn_dist, [0, 1])])\n      ),\n    [filteredAvailableEmbeddings]\n  );\n  const referenceIndexToDist = React.useMemo(() => {\n    const referenceNN = selected?.nearest_neighbors?.[referenceEmbedding];\n    return referenceNN && normalizedDistances[referenceEmbedding]\n      ? Object.fromEntries(referenceNN.knn_ind.map((cur, i) => [cur, normalizedDistances[referenceEmbedding][i]]))\n      : null;\n  }, [selected, referenceEmbedding, normalizedDistances]);\n\n  const plotDataLines = React.useMemo(() => {\n    const data: Partial<Plotly.PlotData>[] = [];\n    // For all embedding pairs (y-values)\n    filteredAvailableEmbeddings.forEach(([key, value], i) => {\n      if (i < 1) {\n        return;\n      }\n      const [previousKey, previousValue] = filteredAvailableEmbeddings[i - 1];\n      const previousInd = new Set(previousValue.knn_ind);\n      // console.log(selection.size > 0\n      //   ? value.knn_particles.map((v, i) => (selection.has(v) ? i : null)).filter((i) => i != null)\n      //   : undefined);\n      // Go through all nearest neighbors\n      value.knn_ind.forEach((ind, i) => {\n        // Check if the nearest neighbor is also in the previous track\n        if (previousInd.has(ind) && (selection.size === 0 || selection.has(value.knn_particles[i]))) {\n          // Retrieve the x values for the current and previous track\n          const x = normalizedDistances[key][i];\n          const previousX = normalizedDistances[previousKey][previousValue.knn_ind.indexOf(ind)];\n          // Add a line to the plot for exactly this pair\n          data.push({\n            x: [previousX, x],\n            y: [previousKey, key],\n            type: \"scatter\",\n            mode: \"lines\",\n            showlegend: false,\n            legendgroup: \"Pairwise Connections\",\n            opacity: Math.abs(previousX - x) / (value.knn_ind.length / 5),\n            line: {\n              color: \"gray\",\n            },\n          });\n        }\n      });\n    });\n    return data;\n  }, [filteredAvailableEmbeddings, normalizedDistances, selection]);\n\n  const plotDataSelection = React.useMemo<Partial<Plotly.PlotData>[]>(() => {\n    const selectedXValues = hover\n      ? filteredAvailableEmbeddings.map(([key, value], i) => {\n          const index = value.knn_particles.indexOf(hover);\n\n          console.log(\n            hover.index,\n            value.knn_particles,\n            value.knn_particles.find((p) => p.index === hover.index)\n          );\n          return index >= 0 ? normalizedDistances[key][index] : NaN;\n        })\n      : null;\n\n    if (selectedXValues) {\n      return [\n        {\n          x: selectedXValues.map((v) => (isNaN(v) ? 1 : v)),\n          y: filteredAvailableEmbeddings.map(([key, value]) => key),\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          showlegend: false,\n          line: {\n            color: \"gold\",\n          },\n          marker: {\n            color: selectedXValues.map((v) => (isNaN(v) ? \"red\" : \"gold\")),\n            // size: selectedXValues.map((v) => isNaN(v) ? 0 : 10)\n          },\n        },\n      ];\n    }\n    return [];\n  }, [filteredAvailableEmbeddings, hover, normalizedDistances]);\n\n  const plotDataScatter = React.useMemo(() => {\n    return filteredAvailableEmbeddings.map(([key, value], i) => {\n      // By default, color each point by the number of occurances in the different embeddings\n      let color: Plotly.Color = value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length);\n      //   If we have a reference, color each point by the position in the reference embedding\n      if (referenceIndexToDist) {\n        color = value.knn_ind.map((ind) => referenceIndexToDist[ind] || NaN);\n      } else if (referenceEmbedding && referenceEmbedding.startsWith(\"property=\")) {\n        color = value.knn_particles.map((p) => toNumber(p.properties[referenceEmbedding.slice(\"property=\".length)]));\n      }\n\n      return {\n        x: normalizedDistances[key],\n        y: value.knn_dist.map(() => key),\n        text: value.knn_dist.map((dist) => `${dist} (${value.distance_metric})`),\n        hoverinfo: \"none\" as const,\n        name: key,\n        type: \"scatter\" as const,\n        mode: \"markers\" as const,\n        customdata: value.knn_particles.map((p) => p.index!),\n        selectedpoints:\n          selection.size > 0\n            ? value.knn_particles.map((v, i) => (selection.has(v) ? i : null)).filter((i) => i != null)\n            : undefined,\n        showlegend: false,\n        showscale: true,\n        // line: {\n        //   width: 0\n        // },\n        marker: {\n          //   opacity: value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length),\n          opacity: 0.4,\n          //   color: value.knn_ind.map((ind) => indexOccurances[ind] / filteredAvailableEmbeddings.length),\n          color,\n          coloraxis: \"coloraxis\",\n        },\n      };\n    });\n  }, [\n    filteredAvailableEmbeddings,\n    indexOccurances,\n    normalizedDistances,\n    referenceEmbedding,\n    referenceIndexToDist,\n    selection,\n  ]);\n\n  const data: Partial<Plotly.PlotData>[] = [...plotDataLines, ...plotDataSelection, ...plotDataScatter];\n\n  const getPointsFromEvent = (e: Pick<Plotly.PlotMouseEvent, \"points\">): IParticle[] => {\n    return collection\n      ? Array.from(\n          new Set(\n            e?.points\n              ?.sort((a, b) => +a.x! - +b.x!)\n              // TODO: This should be an collection.data[p.customdata] but it gives wrong indices after adding a property embedding.\n              ?.map((p) => collection.data.find((d) => d.index === (p.customdata as number))!)\n          )\n        ).filter(Boolean)\n      : [];\n  };\n\n  return (\n    <div\n      className=\"d-flex flex-column\"\n      style={{\n        position: \"relative\",\n        // overflowY: 'scroll',\n        // minHeight: 500\n      }}\n    >\n      <p className=\"text-muted\">\n        Inspect the nearest neighbors in the embedding spaces of the selected or hovered structure. Each embedding shows\n        the top-N nearest neighbors according to its distance metric. Generally, the color encodes in how many\n        embeddings a specific neighbor is also listed as neighbor, or if a reference embedding is given, it shows the\n        color of the position in the reference embedding (or black if it is no common neighbor).\n      </p>\n      {selected && collection ? (\n        <>\n          <div className=\"row\">\n            <div className=\"col d-flex flex-column align-items-center justify-content-center\">\n              <strong>Selected</strong>\n              {selected?.structure ? (\n                <StructureImage\n                  style={{ width: \"100%\" }}\n                  structure={selected.structure}\n                  align={undefined /* selected?.structure */}\n                />\n              ) : null}\n            </div>\n            <div className=\"col d-flex flex-column align-items-center\">\n              <strong>Hovered</strong>\n              {hover?.structure ? (\n                <StructureImage\n                  style={{ width: \"100%\" }}\n                  structure={hover.structure}\n                  align={undefined /* selected?.structure */}\n                />\n              ) : null}\n            </div>\n            <div className=\"col d-flex flex-column align-items-center\">\n              <strong>Similarity Map</strong>\n              {selected?.structure && hover?.structure ? (\n                <StructureImage\n                  style={{ width: \"100%\" }}\n                  structure={[selected.structure, hover.structure]}\n                  align={selected?.structure}\n                />\n              ) : null}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-8 mb-3\">\n              <label>Enabled embeddings</label>\n              <Select<{ label: string; value: string }, true>\n                menuPosition=\"fixed\"\n                isMulti\n                value={enabledEmbeddings.map((p) => ({\n                  label: p,\n                  value: p,\n                }))}\n                onChange={(e) => {\n                  setEnabledEmbeddings(e.map((p) => p.value));\n                }}\n                options={[\n                  ...Object.entries(selected?.nearest_neighbors || {}).map(([key, value]) => ({\n                    label: `${key} (${value.distance_metric})`,\n                    value: key,\n                  })),\n                  ...allAvailableProperties.map((property) => ({\n                    label: `Property: ${property}`,\n                    value: `property=${property}`,\n                  })),\n                ]}\n                closeMenuOnSelect={false}\n              />\n            </div>\n            <div className=\"col-md-4 mb-3\">\n              <label>Color by</label>\n              <Select<{ label: string; value: string }, false>\n                menuPosition=\"fixed\"\n                value={\n                  referenceEmbedding\n                    ? {\n                        label: referenceEmbedding,\n                        value: referenceEmbedding,\n                      }\n                    : null\n                }\n                isClearable={true}\n                onChange={(e) => {\n                  setReferenceEmbedding(e?.value || \"\");\n                }}\n                options={[\n                  ...Object.entries(selected?.nearest_neighbors || {})\n                    .map(([key, value]) => key)\n                    .map((key) => ({\n                      label: key,\n                      value: key,\n                    })),\n                  ...allAvailableProperties.map((property) => ({\n                    label: `Property: ${property}`,\n                    value: `property=${property}`,\n                  })),\n                ]}\n              />\n            </div>\n          </div>\n          {data.length > 0 ? (\n            <>\n              <PlotComponent\n                className=\"mt-3 mb-5\"\n                style={{ width: \"100%\", height: filteredAvailableEmbeddings.length * 40 + 50 }}\n                data={data}\n                layout={{\n                  dragmode: \"lasso\",\n                  hovermode: \"closest\",\n                  autosize: true,\n                  legend: {\n                    // x: 1,\n                    // xanchor: \"right\",\n                    // y: 1,\n                    orientation: \"h\",\n                  },\n                  // @ts-ignore\n                  coloraxis: {\n                    // cmin: referenceIndexToDist ? undefined : 0,\n                    // cmax: referenceIndexToDist ? undefined : 1,\n                    // cmin: 0,\n                    // cmax: 1,\n                    ...DEFAULT_PLOTLY_COLORSCALE,\n                    colorbar: {\n                      title: \"Distance\",\n                      titleside: \"top\",\n                      thickness: 10,\n                      outlinewidth: 0,\n                      lenmode: \"fraction\",\n                      len: 0.75,\n                      yanchor: \"center\",\n                    },\n                  },\n                  scene: {\n                    aspectmode: \"data\",\n                  },\n                  margin: {\n                    // l: 250,\n                    r: 0,\n                    b: 0,\n                    t: 50,\n                    // pad: 4,\n                  },\n                  yaxis: {\n                    categoryorder: \"array\",\n                    categoryarray: filteredAvailableEmbeddings.map(([key, value]) => key).reverse(),\n                  },\n                }}\n                config={PLOTLY_CONFIG}\n                onSelected={(e) => {\n                  setSelection(new Set(getPointsFromEvent(e)));\n                }}\n                onHover={(e) => {\n                  setHover(getPointsFromEvent(e)?.[0]);\n                }}\n                onUnhover={() => {\n                  setHover(null);\n                }}\n              />\n              <div style={{ flex: \"1 1 500px\", display: \"flex\", overflow: \"auto\" }}>\n                {selectionCollections ? (\n                  <LineupWrapper\n                    collections={selectionCollections}\n                    setSelected={setSelectedFromLineup}\n                    // align={hover?.structure}\n                    getRankingBuilders={enabledEmbeddings.length <= 1 ? undefined : getRankingBuilders}\n                    adjustRankings={enabledEmbeddings.length === 0 ? undefined : adjustRankings}\n                  />\n                ) : null}\n              </div>\n            </>\n          ) : null}\n        </>\n      ) : null}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport Select from \"react-select/creatable\";\nimport { ICollection, IParticle, IParticleSelection } from \"../interfaces\";\nimport { Tooltip } from \"../utils/hooks\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport { LineupWrapper } from \"./ranking/LineupWrapper\";\nimport { StructureImage } from \"./StructureImage\";\n\nconst LAYOUT: Partial<Plotly.Layout> = {\n  dragmode: \"lasso\",\n  hovermode: \"closest\",\n  autosize: true,\n  margin: {\n    // l: 250,\n    r: 0,\n    b: 0,\n    t: 50,\n    // pad: 4,\n  },\n};\n\nexport const GroupFlowSankeyPlot = React.memo(({\n  collections,\n  selection,\n}: //   setHover,\n//   hover,\n{\n  selection: IParticleSelection;\n  collections: ICollection[];\n}) => {\n  const [collection, setCollection] = React.useState<ICollection | null>(null);\n  const [enabledProperties, setEnabledProperties] = React.useState<string[]>([]);\n  const [selectionCollections, setSelectionCollections] = React.useState<ICollection[]>([]);\n  const allAvailableProperties = React.useMemo(() => Object.keys(collection?.data?.[0]?.properties || {}), [collection]);\n  const [hover, setHover] = React.useState<IParticle[] | null>(null);\n\n  const data = React.useMemo<Partial<Plotly.PlotData>[][]>(() => {\n    \n    if (!collection || enabledProperties.length < 2) {\n      return [];\n    }\n\n    const map = new Map<IParticle, number[]>();\n    // Each unique value has to have a unique id, i.e. running index in this case. Otherwise, one could not distinguish the same labels of different properties.\n    let valueIndex = 0;\n    const labels: string[] = [];\n    enabledProperties.forEach((property, i) => {\n      const valueLookup = new Map<string, number>();\n      collection.data.forEach((d) => {\n        const value = `${d.properties[property]}`;\n        if (!valueLookup.has(value)) {\n          valueLookup.set(value, valueIndex++);\n          labels.push(`${value}`);\n        }\n\n        if (!map.has(d)) {\n          map.set(d, []);\n        }\n        map.get(d)![i] = valueLookup.get(value)!;\n      });\n\n      valueLookup.clear();\n    });\n\n    // Add selection (if any)\n    const selected = selection?.[collection.name];\n    if(selected) {\n      selected.forEach((particle) => {\n        map.get(particle)?.push(valueIndex);\n      });\n\n      // Add to labels, increase value index\n      labels.push(\"Selection\");\n      valueIndex++;\n    }\n\n    const matrix: IParticle[][][] = new Array(valueIndex).fill(null).map(() => []);\n    map.forEach((assignments, particle) => {\n      assignments.slice(1).forEach((next, currentIndex) => {\n        const current = assignments[currentIndex];\n        matrix[current][next] = matrix[current][next] || [];\n        matrix[current][next].push(particle);\n      });\n    });\n\n    const link = {\n      source: [] as number[],\n      target: [] as number[],\n      value: [] as number[],\n      customdata: [] as IParticle[][]\n    };\n    matrix.forEach((toValues, from) => {\n      toValues.forEach((particles, to) => {\n        link.source.push(from);\n        link.target.push(to);\n        link.value.push(particles.length);\n        link.customdata.push(particles);\n      });\n    });\n\n    console.log(matrix);\n\n    return [[\n      {\n        type: \"sankey\",\n        orientation: \"h\",\n        arrangement: \"fixed\",\n        // @ts-ignore\n        node: {\n          // pad: 15,\n          // thickness: 30,\n          // line: {\n          // color: \"black\",\n          // width: 0.5,\n          // },\n          label: labels,\n          // groups: [[1,2,3, 4,5,6,7,8,9]]\n          // color: [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\n          customdata: matrix.map((to, i) => (to[i] || []).flat())\n        },\n        link: {\n          ...link,\n          // color: 'rgba(200, 200, 200, 10)'\n        },\n      },\n    ]];\n  }, [selection, collection, enabledProperties]);\n\n  return (\n    <div\n      className=\"d-flex flex-column\"\n      style={{\n        position: \"relative\",\n        // overflowY: 'scroll',\n        // minHeight: 500\n      }}\n    >\n      <Tooltip>\n        {hover ? <StructureImage structure={hover.map((h) => h.structure)}\n            style={{\n              width: 180,\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }} /> : null}\n      </Tooltip>\n      <p className=\"text-muted\"></p>\n      <div className=\"row\">\n        <div className=\"col-md-3 mb-3\">\n          <label>Collection</label>\n          <Select<{ label: string; value: ICollection }>\n            menuPosition=\"fixed\"\n            value={collection ? { label: collection.name, value: collection } : null}\n            onChange={(e) => {\n              setCollection(e?.value || null);\n            }}\n            options={collections.map((c) => ({\n              label: c.name,\n              value: c,\n            }))}\n          />\n        </div>\n        <div className=\"col-md-9 mb-3\">\n          <label>Group by</label>\n          <Select<{ label: string; value: string }, true>\n            menuPosition=\"fixed\"\n            isDisabled={!collection}\n            isMulti\n            value={enabledProperties.map((p) => ({\n              label: p,\n              value: p,\n            }))}\n            onChange={(e) => {\n              setEnabledProperties(e.map((p) => p.value));\n            }}\n            options={allAvailableProperties.map((property) => ({\n              label: property,\n              value: property,\n            }))}\n            closeMenuOnSelect={false}\n          />\n        </div>\n      </div>\n      {data.length > 0 ? (\n        <> \n          {data.map((d, i) => <div><PlotComponent\n            key={i}\n            className=\"mt-3 mb-5\"\n            style={{ width: \"100%\", height: 500 }}\n            data={d}\n            layout={LAYOUT}\n            config={PLOTLY_CONFIG}\n            onClick={(e) => {\n              setSelectionCollections(e.points.map((p) => ({data: p.customdata as unknown as IParticle[], name: 'Selection' })));\n            }}\n            onHover={(e) => {\n              const hoveredPoints = (e.points?.map((p) => (p.customdata as unknown as  IParticle[]) || []).flat() || []);\n              setHover(hoveredPoints.length > 0 ? hoveredPoints : null);\n            }}\n            onUnhover={() => {\n              setHover(null);\n            }}\n          /></div>)}\n          <div style={{ flex: \"1 1 500px\", display: \"flex\", overflow: \"auto\" }}>\n            {selectionCollections ? (\n                  <LineupWrapper\n                    collections={selectionCollections}\n                    // setSelected={setSelectedFromLineup}\n                    // getRankingBuilders={enabledEmbeddings.length === 0 ? undefined : getRankingBuilders}\n                    // adjustRankings={enabledEmbeddings.length === 0 ? undefined : adjustRankings}\n                  />\n                ) : null}\n          </div>\n        </>\n      ) : null}\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { StructureCard } from \"./components/StructureCard\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { StructureImage } from \"./components/StructureImage\";\nimport { ICollection, IParticle, IParticleSelection, IServerCollection } from \"./interfaces\";\nimport groupByLodash from \"lodash.groupby\";\nimport { embedStructures, getTanimotoSimilarity } from \"./utils/api\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./components/PlotComponent\";\nimport { useNameInput } from \"./utils/hooks\";\nimport { FormWrapper } from \"./components/form\";\nimport { ButtonWithUpload } from \"./components/ButtonWithUpload\";\nimport cloneDeepWith from \"lodash.clonedeepwith\";\nimport { ParallelCoordinatesPlot } from \"./components/ParallelCoordinatesPlot\";\nimport { downloadCSVFile, normalizeArray } from \"./utils\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport { extent } from \"d3-array\";\nimport { LocalNeighborhoodPlot } from \"./components/LocalNeighborhoodPlot\";\nimport Select from \"react-select/src/Select\";\nimport { GroupFlowSankeyPlot } from \"./components/GroupFlowSankeyPlot\";\n\nexport const ClusterSidePanel = React.memo(\n  ({\n    collections,\n    setCollections,\n    selection,\n    setSelection,\n    hover,\n    setHover,\n    setVisibleNeighborhoodSamplings,\n  }: {\n    collections: ICollection[];\n    setCollections(collections: ICollection[]): void;\n    selection: IParticleSelection;\n    setSelection(selected: IParticleSelection): void;\n    hover: IParticle | null;\n    setHover(hover: IParticle | null): void;\n    setVisibleNeighborhoodSamplings(collection: IParticle[] | null): void;\n  }) => {\n    const selectedParticles = React.useMemo<IParticle[]>(\n      () => (selection ? ([] as IParticle[]).concat(...Object.values(selection)) : []),\n      [selection]\n    );\n\n    const hoverOrSelected = hover || (selectedParticles.length === 1 ? selectedParticles[0] : null);\n    const selectedOrHover = (selectedParticles.length === 1 ? selectedParticles[0] : null) || hover;\n\n    const [lastHoverOrSelected, setHoverOrLastSelected] = React.useState<IParticle | null>(hoverOrSelected);\n\n    React.useEffect(() => {\n      if (hoverOrSelected) {\n        setHoverOrLastSelected(hoverOrSelected);\n      }\n    }, [hoverOrSelected]);\n\n    const selectionCollection =\n      selection && Object.entries(selection).length === 1\n        ? collections.find((c) => c.name === Object.keys(selection)[0])\n        : null;\n    const [visibleProjectionModels, setVisibleProjectionModels] = React.useState<\n      IServerCollection[\"projections\"] | null\n    >(null);\n\n    const [name, setName, nameInput] = useNameInput(\"newCollectionNameInput\", \"\");\n    const [recomputeEmbeddings, setRecomputeEmbeddings] = React.useState<boolean>(false);\n    const [knnEmbeddingKey, setKnnEmbeddingKey] = React.useState<string>(\"\");\n    const [removeFromOriginal, setRemoveFromOriginal] = React.useState<boolean>(false);\n    const [includeNeighbors, setIncludeNeighbors] = React.useState<{ [key: string]: number } | null>(null);\n    const [newCollectionLoading, setNewCollectionLoading] = React.useState<boolean>(false);\n    const [showStructures, setShowStructures] = React.useState<\n      | {\n          type: \"selection\";\n        }\n      | {\n          type: \"collection\";\n          collection: ICollection;\n        }\n      | null\n    >(null);\n    const [rankingSelection, setRankingSelection] = React.useState<IParticleSelection>(null);\n    const [heatmapData, setHeatmapData] = React.useState<\n      { data: Partial<Plotly.PlotData>; layout: Partial<Plotly.Layout> }[] | null\n    >(null);\n    const [heatmapLoading, setHeatmapLoading] = React.useState<boolean>(false);\n    const [heatmapHover, setHeatmapHover] = React.useState<string[] | null>(null);\n    const [heatmapHoverIndices, setHeatmapHoverIndices] = React.useState<number[] | null>(null);\n\n    const [parallelCoordinatesCollections, setParallelCoordinatesCollections] = React.useState<ICollection[] | null>(\n      null\n    );\n\n    const structuresToShow = React.useMemo<ICollection[] | null>(() => {\n      if (showStructures) {\n        if (showStructures.type === \"collection\") {\n          return [showStructures.collection];\n        }\n        const filteredParticles = showStructures.type === \"selection\" ? selectedParticles : null;\n        return filteredParticles\n          ? Object.entries(groupByLodash(filteredParticles, \"collection\")).map(([name, data]) => ({ name, data }))\n          : null;\n      }\n      return null;\n    }, [showStructures, selectedParticles]);\n\n    return (\n      <>\n        <Modal show={Boolean(visibleProjectionModels)} onHide={() => setVisibleProjectionModels(null)} size=\"xl\">\n          <Modal.Header closeButton>\n            <Modal.Title>Available projection models</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {visibleProjectionModels ? (\n              <ul>\n                {Object.entries(visibleProjectionModels)\n                  .filter(([name, value]) => value.model)\n                  .map(([name, value]) => (\n                    <li key={name} className=\"text-truncate\">\n                      {name}: <span title={value.model || \"\"}>{value.model}</span>\n                    </li>\n                  ))}\n              </ul>\n            ) : null}\n          </Modal.Body>\n        </Modal>\n        <Modal\n          show={Boolean(showStructures && structuresToShow)}\n          onHide={() => setShowStructures(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {showStructures && structuresToShow ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>View {structuresToShow.reduce((a, b) => a + b.data.length, 0)} entries</Modal.Title>\n              </Modal.Header>\n              <Modal.Body\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <StructureCardGrid collections={structuresToShow} setSelected={(s) => setRankingSelection(s)} />\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => {\n                    setShowStructures(null);\n                    setSelection(rankingSelection);\n                  }}\n                  disabled={!rankingSelection}\n                >\n                  Save as new selection\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setShowStructures(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Modal\n          show={Boolean(heatmapData)}\n          onHide={() => setHeatmapData(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {heatmapData ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>View correlation</Modal.Title>\n              </Modal.Header>\n              <Modal.Body\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div style={{ height: 210, visibility: heatmapHover ? \"visible\" : \"hidden\", margin: \"0px auto\" }}>\n                  {heatmapHover ? (\n                    <div className=\"d-flex flex-row align-items-center\" style={{ gap: 50 }}>\n                      {heatmapHover.map((structure) => (\n                        <StructureImage\n                          structure={structure}\n                          style={{\n                            width: 210,\n                          }}\n                        />\n                      ))}\n                      {heatmapHover.length > 1 ? (\n                        <StructureImage\n                          structure={heatmapHover}\n                          style={{\n                            width: 210,\n                          }}\n                        />\n                      ) : null}\n                    </div>\n                  ) : null}\n                </div>\n                <div className=\"d-flex flex-row\">\n                  {heatmapData.map(({ data, layout }, i) => (\n                    <PlotComponent\n                      style={{ height: \"100%\", flex: 1 }}\n                      onHover={(e) => {\n                        if (e.points[0]) {\n                          setHeatmapHover(Array.from(new Set([e.points[0].x as string, e.points[0].y as string])));\n                          setHeatmapHoverIndices(e.points[0].pointIndex as any as number[]);\n                        }\n                      }}\n                      onUnhover={() => {\n                        setHeatmapHover(null);\n                        setHeatmapHoverIndices(null);\n                      }}\n                      data={\n                        heatmapHoverIndices\n                          ? [\n                              { ...data, opacity: 0.5 },\n                              {\n                                ...data,\n                                showlegend: false,\n                                showscale: false,\n                                z: (() => {\n                                  try {\n                                    const originalZ = data.z! as number[][];\n                                    // Copy the rows and cols only of the selected range\n                                    if (\n                                      heatmapHoverIndices &&\n                                      heatmapHoverIndices.length === 2 &&\n                                      originalZ.length > 0\n                                    ) {\n                                      const emptyZ = Array(originalZ.length)\n                                        .fill(null)\n                                        .map(() => Array(originalZ[0].length).fill(null));\n\n                                      const x = heatmapHoverIndices[0],\n                                        y = heatmapHoverIndices[1];\n                                      emptyZ[x] = originalZ[x];\n                                      emptyZ.forEach((row, i) => {\n                                        row[y] = originalZ[i][y];\n                                      });\n                                      return emptyZ;\n                                    }\n                                  } catch {\n                                    return data.z;\n                                  }\n                                })(),\n                                opacity: 1,\n                              },\n                            ]\n                          : [data]\n                      }\n                      layout={{\n                        dragmode: \"lasso\",\n                        hovermode: \"closest\",\n                        autosize: true,\n                        legend: {\n                          x: 1,\n                          xanchor: \"right\",\n                          y: 1,\n                        },\n                        scene: {\n                          aspectmode: \"data\",\n                        },\n                        margin: {\n                          l: 250,\n                          r: 0,\n                          b: 0,\n                          t: 25,\n                          pad: 4,\n                        },\n                        xaxis: {\n                          // automargin: true,\n                        },\n                        yaxis: {\n                          scaleanchor: \"x\",\n                          visible: i === 0,\n                          autorange: \"reversed\",\n                          // automargin: true,\n                        },\n                        ...layout,\n                      }}\n                      config={{ ...PLOTLY_CONFIG, displayModeBar: false }}\n                    />\n                  ))}\n                </div>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setHeatmapData(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Modal\n          show={Boolean(parallelCoordinatesCollections)}\n          onHide={() => setParallelCoordinatesCollections(null)}\n          size=\"xl\"\n          dialogClassName=\"modal-full-width\"\n        >\n          {parallelCoordinatesCollections ? (\n            <>\n              <Modal.Header closeButton>\n                <Modal.Title>\n                  View parallel coordinates of {parallelCoordinatesCollections.map((c) => c.name).join(\", \")}\n                </Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <ParallelCoordinatesPlot\n                  collections={parallelCoordinatesCollections}\n                  selection={selection}\n                  setSelection={setSelection}\n                />\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setParallelCoordinatesCollections(null)}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </>\n          ) : null}\n        </Modal>\n        <Tabs defaultActiveKey=\"collections\" className=\"mt-3 mb-3\" unmountOnExit={true}>\n          <Tab eventKey=\"collections\" title=\"Collections\">\n            {collections.length > 0 ? (\n              <>\n                {collections.map((c) => {\n                  return (\n                    <div key={c.name} className=\"d-flex align-items-center mb-1\">\n                      <span className=\"text-truncate me-auto\" title={c.name}>\n                        {c.name} <small>{c.data.length}</small>\n                      </span>\n                      <div className=\"btn-group btn-group-sm ms-2 me-2\" role=\"group\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Show parallel coordinates\"\n                          onClick={() => {\n                            setParallelCoordinatesCollections([c]);\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-arrows-alt-h\" />\n                        </button>\n                        {Object.entries(c.projections || {}).some(([key, value]) => value.model) ? (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light\"\n                            title=\"Show attached projection models\"\n                            onClick={() => {\n                              setVisibleProjectionModels(c.projections);\n                            }}\n                          >\n                            <i className=\"fas fa-fw fa-server\" />\n                          </button>\n                        ) : null}\n                        {c.type === \"neighborhoodSampling\" ? (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light\"\n                            title=\"Show neighborhood grid\"\n                            onClick={() => {\n                              setVisibleNeighborhoodSamplings(c.data);\n                            }}\n                          >\n                            <i className=\"fas fa-fw fa-th\" />\n                          </button>\n                        ) : null}\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Download SMILES as CSV\"\n                          onClick={() => {\n                            downloadCSVFile(c.data.map((d) => d.structure).join(\"\\n\"), \"export\");\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-cloud-download-alt\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title=\"Show collection in table view\"\n                          onClick={() => {\n                            setShowStructures({\n                              type: \"collection\",\n                              collection: c,\n                            });\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-table\" />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-light\"\n                          title={c.hidden ? \"Enable collection\" : \"Disable collection\"}\n                          onClick={() => {\n                            setCollections(\n                              collections.map((collection) =>\n                                c === collection ? { ...c, hidden: !c.hidden } : collection\n                              )\n                            );\n                          }}\n                        >\n                          <i className={`fas fa-fw ${c.hidden ? \"fa-eye-slash\" : \"fa-eye\"}`} />\n                        </button>\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-danger\"\n                          title=\"Delete collection\"\n                          onClick={() => {\n                            setCollections(collections.filter((collection) => c !== collection));\n                          }}\n                        >\n                          <i className=\"fas fa-fw fa-times\" />\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </>\n            ) : (\n              <p className=\"lead\">No collections found</p>\n            )}\n          </Tab>\n          <Tab eventKey=\"selection\" title=\"Selection\">\n            {selection ? (\n              <>\n                <p>\n                  {selectedParticles.length} Selected{\" \"}\n                  <div className=\"btn-group btn-group-sm ms-2 me-2 float-end\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-sm btn-light\"\n                      title=\"Show in table view\"\n                      onClick={() => setShowStructures({ type: \"selection\" })}\n                    >\n                      <i className=\"fas fa-fw fa-table\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-sm btn-light\"\n                      disabled={heatmapLoading || selectedParticles.length > 50}\n                      title=\"Compute distances\"\n                      onClick={async () => {\n                        setHeatmapLoading(true);\n                        const selectedWithEmbeddings = (\n                          await embedStructures({\n                            structures: selectedParticles.map((p) => ({smiles: p.structure})),\n                            include_embedding: true,\n                          })\n                        ).data;\n\n                        if (selectedWithEmbeddings.length > 0) {\n                          const cdddSimilarities = selectedWithEmbeddings.map((a) =>\n                            selectedWithEmbeddings.map((b) =>\n                              a.embedding![\"cddd\"].reduce((acc, x, i) => {\n                                const y = b.embedding![\"cddd\"][i];\n                                return acc + Math.pow(x - y, 2);\n                              }, 0)\n                            )\n                          );\n\n                          const selectedStructures = selectedWithEmbeddings.map((p) => p.structure);\n                          const tanimotoSimilaritiesRaw = await Promise.all(\n                            selectedStructures.map((structure) =>\n                              getTanimotoSimilarity(selectedStructures, structure, \"ecfp4\").then(\n                                ({ tanimoto }) => tanimoto\n                              )\n                            )\n                          );\n\n                          const tanimotoSimilarities = selectedStructures.map((x, i) =>\n                            selectedStructures.map((y) => tanimotoSimilaritiesRaw[i][y] || 0)\n                          );\n\n                          setHeatmapData(\n                            [\n                              {\n                                data: { z: cdddSimilarities, reversescale: true, zmin: 0 },\n                                layout: { title: \"CDDD Distance\" },\n                              },\n                              {\n                                data: { z: tanimotoSimilarities, zmin: 0, zmax: 1 },\n                                layout: { title: \"Morgan Similarities\" },\n                              },\n                            ].map(({ data, layout }) => ({\n                              data: {\n                                x: selectedStructures,\n                                y: selectedStructures,\n                                hoverinfo: \"z\",\n                                colorscale: \"YlGnBu\",\n                                type: \"heatmap\",\n                                ...data,\n                              },\n                              layout,\n                            }))\n                          );\n                        }\n                        setHeatmapLoading(false);\n                      }}\n                    >\n                      <i className={`fas fa-fw ${heatmapLoading ? \"fa-circle-notch fa-spin\" : \"fa-chess-board\"}`} />\n                    </button>\n                  </div>\n                </p>\n              </>\n            ) : null}\n            {selectedParticles.length > 0 ? (\n              <FormWrapper\n                title=\"Create new collection from selection\"\n                open={true}\n                loading={newCollectionLoading}\n                setLoading={setNewCollectionLoading}\n                onSubmit={async () => {\n                  if (selection) {\n                    let data = Object.values(selection).flat();\n\n                    if (includeNeighbors && data.length === 1) {\n                      const neighbors = Object.entries(includeNeighbors)\n                        .filter(([key, value]) => value)\n                        .map(([key, value]) => data[0].nearest_neighbors?.[key]?.knn_particles?.slice(0, value)!)\n                        .flat()\n                        .filter(Boolean);\n                      data.push(...neighbors);\n                      data = Array.from(new Set(data));\n                    }\n\n                    const newCollection = recomputeEmbeddings\n                      ? {\n                          name,\n                          ...(await embedStructures({\n                            structures: data.map((d) => ({smiles: d.structure})),\n                            include_embedding: true,\n                          })),\n                        }\n                      : {\n                          name,\n                          data: data.map((d) => ({\n                            ...cloneDeepWith(d, (value, key, object, stack) =>\n                              key === \"knn_particles\" ? undefined : value\n                            ),\n                            nearest_neighbors: undefined,\n                          })),\n                          // Add the projection model if only a single collection was selected\n                          projections: selectionCollection?.projections,\n                        };\n                    const oldCollections = removeFromOriginal\n                      ? collections.map((c) =>\n                          selection[c.name]\n                            ? {\n                                ...c,\n                                data: c.data.filter((d) => !selection[c.name].includes(d)),\n                              }\n                            : c\n                        )\n                      : collections;\n                    setCollections([...oldCollections, newCollection]);\n                    setSelection(null);\n                    setName(\"\");\n                  }\n                }}\n              >\n                <div className=\"d-flex justify-content-center\">\n                  {selectedParticles.length === 1 ? (\n                    <StructureCard structure={selectedParticles[0]} showProperties={false} />\n                  ) : (\n                    <StructureImage\n                      style={{ maxWidth: \"100%\" }}\n                      structure={selectedParticles.map((s) => s.structure)}\n                    />\n                  )}\n                </div>\n                {nameInput}\n                <div className=\"form-check form-switch me-sm-2\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"collectionsRecomputeEmbeddingsInput\"\n                    checked={recomputeEmbeddings}\n                    onChange={(e) => setRecomputeEmbeddings(e.currentTarget.checked)}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"collectionsRecomputeEmbeddingsInput\">\n                    Recompute embeddings, projections, ...\n                  </label>\n                </div>\n                <div className=\"form-check form-switch me-sm-2\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    id=\"collectionsRemoveOldInput\"\n                    checked={removeFromOriginal}\n                    onChange={(e) => setRemoveFromOriginal(e.currentTarget.checked)}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"collectionsRemoveOldInput\">\n                    Remove from original collection\n                  </label>\n                </div>\n                {selectedParticles.length === 1 && selectedParticles[0].nearest_neighbors ? (\n                  <div>\n                    <div className=\"form-check form-switch me-sm-2\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"form-check-input\"\n                        id=\"collectionsEnableKNN\"\n                        checked={Boolean(includeNeighbors)}\n                        onChange={(e) => setIncludeNeighbors(e.currentTarget.checked ? {} : null)}\n                      />\n                      <label className=\"form-check-label\" htmlFor=\"collectionsEnableKNN\">\n                        Enable KNN\n                      </label>\n                    </div>\n                    {includeNeighbors &&\n                      Object.entries(selectedParticles[0].nearest_neighbors || {}).map(([key, value]) => (\n                        <div className=\"mb-3\">\n                          <label htmlFor=\"neighborhoodSamplesInput\" className=\"form-label\">\n                            {key} {includeNeighbors?.[key]}\n                          </label>\n                          <input\n                            type=\"range\"\n                            className=\"form-range\"\n                            id=\"neighborhoodSamplesInput\"\n                            value={includeNeighbors?.[key] || 0}\n                            onChange={(e) =>\n                              setIncludeNeighbors({ ...(includeNeighbors || {}), [key]: e.currentTarget.valueAsNumber })\n                            }\n                            min={0}\n                            max={value.knn_ind.length}\n                            step={1}\n                          />\n                        </div>\n                      ))}\n                  </div>\n                ) : null}\n                <div className=\"text-end\">\n                  <ButtonWithUpload loading={newCollectionLoading} disabled={!selection || !name} text=\"Create\" />\n                </div>\n              </FormWrapper>\n            ) : (\n              <p className=\"lead\">Select to create a new collection</p>\n            )}\n          </Tab>\n          <Tab eventKey=\"knn\" title=\"KNN\">\n            {true || hoverOrSelected ? (\n              <>\n                <LocalNeighborhoodPlot selected={lastHoverOrSelected} collection={collections.find((c) => c.name === hoverOrSelected?.collection)} setHover={setHover} hover={hover} />\n                {/*<select\n                  value={knnEmbeddingKey}\n                  onChange={(e) => setKnnEmbeddingKey(e.currentTarget.value)}\n                  className=\"custom-select custom-select-sm mb-1\"\n                >\n                  <option value=\"\">Choose embedding...</option>\n                  {Object.entries(hoverOrSelected.nearest_neighbors || {}).map(([key, value]) => (\n                    <option value={key}>{key}</option>\n                  ))}\n                </select>\n                {knnEmbeddingKey ? (<>\n                  <div\n                    style={{\n                      display: \"grid\",\n                      gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\n                      gridColumnGap: 3,\n                      gridRowGap: 3,\n                    }}\n                  >\n                    {hoverOrSelected.nearest_neighbors?.[knnEmbeddingKey]?.knn_particles.map((p) => (\n                      <div className=\"d-flex overflow-auto\">\n                        <StructureImage style={{ width: \"100%\" }} structure={p.structure} />\n                      </div>\n                    ))}\n                  </div>\n                </>) : null} */}\n              </>\n            ) : null}\n          </Tab>\n          <Tab eventKey=\"sankey\" title=\"Group Flow\">\n            <GroupFlowSankeyPlot selection={selection} collections={collections} />\n          </Tab>\n          <Tab eventKey=\"details\" title=\"Details\">\n            {hoverOrSelected ? (\n              <StructureCard structure={hoverOrSelected} />\n            ) : (\n              <p className=\"lead\">Hover over a structure to see details</p>\n            )}\n          </Tab>\n        </Tabs>\n      </>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { Figure } from \"react-plotly.js\";\nimport { ICollection, IParticle, IParticleSelection, IPlotOptions } from \"../interfaces\";\nimport { PlotComponent, PLOTLY_CONFIG } from \"./PlotComponent\";\nimport lodashGet from \"lodash.get\";\nimport { extent } from \"d3-array\";\nimport { normalizeArray, toExtent, toNumber } from \"../utils\";\nimport groupBy from \"lodash.groupby\";\nimport { scaleLinear, scaleSymlog } from \"d3-scale\";\nimport { color } from \"d3-color\";\nimport { useSyncedRef } from \"../utils/hooks\";\nimport { DEFAULT_COLORWAY, DEFAULT_PLOTLY_COLORSCALE } from \"../utils/constants\";\n\nconst TRAJECTORY_TRACE_NAME = \"Trajectories\";\n\nexport interface IProjectionPlotProps {\n  title: string;\n  collections: ICollection[];\n  xAccessor: string | (string | number)[];\n  yAccessor: string;\n  options: Partial<IPlotOptions>;\n  hover: IParticle | null;\n  setHover(particle: IParticle | null): void;\n  selected: IParticleSelection;\n  setSelected(selected: IParticleSelection): void;\n  children?: React.ReactNode;\n}\n\nexport const ScatterPlot = React.memo(\n  ({\n    title,\n    collections,\n    xAccessor,\n    yAccessor,\n    options,\n    hover: debouncedHover,\n    setHover,\n    selected,\n    setSelected,\n    children,\n  }: IProjectionPlotProps) => {\n    const [figureState, setFigureState] = React.useState<Figure | null>(null);\n    const [innerHover, setInnerHover] = React.useState<IParticle | null>(null);\n\n    // Use the most up-to-date hover if possible.\n    const hover = innerHover || debouncedHover;\n    const setHoverRef = useSyncedRef(setHover);\n\n    React.useEffect(() => {\n      const traces: Partial<Plotly.PlotData>[] = ((() => {\n        // return null;\n        const connectBy = options.connectBy;\n        if (!connectBy || connectBy.length === 0 || (hover == null && !selected)) {\n          return null;\n        }\n\n        const filteredCollections: Map<ICollection | undefined, IParticle[]> = new Map();\n        if (selected) {\n          Object.entries(selected).forEach(([name, selection]) => {\n            const collection = collections.find((c) => c.name === name);\n            filteredCollections.set(collection, selection);\n          });\n        }\n\n        filteredCollections.delete(undefined);\n        if (!hover && filteredCollections.size === 0) {\n          return null;\n        }\n\n        return [\n          (hover ? [collections.find((c) => c.name === hover.collection), [hover]] : [undefined, undefined]) as [\n            ICollection | undefined,\n            IParticle[] | undefined\n          ],\n          ...Array.from(filteredCollections.entries()),\n        ].map(([c, selection], i) => {\n          if (!c || !selection) {\n            return null;\n          }\n          const particles = c!.data;\n          const isHover = i === 0;\n\n          const knnHoverFields = connectBy.filter((v) => v.startsWith(\"knn=\")).map((v) => v.split(\"=\"));\n          const isKNNHover = knnHoverFields.length > 0;\n\n          let filteredParticles: IParticle[] | null = null;\n          if (isKNNHover) {\n            filteredParticles = particles;\n          } else {\n            const selectedInstancesByConnectBy = connectBy.map(\n              (c) => new Set(selection.map((p) => p?.properties?.[c]?.toString()).filter((id) => id != null))\n            );\n\n            filteredParticles = particles.filter((p) =>\n              connectBy.every((connectBy, i) =>\n                selectedInstancesByConnectBy[i].has(p.properties?.[connectBy]?.toString())\n              )\n            );\n          }\n\n          if (filteredParticles.length === 0) {\n            return null;\n          }\n\n          const allInstances: (IParticle | null)[] = [];\n          const allSizes: (number | null)[] = [];\n          const allColors: (string | null)[] = [];\n\n          const lineOpacityScaling = scaleSymlog().range([0.1, 0.8]).domain([particles.length, 0]);\n          const hoverColor = color(/* hover?.plotData?.color || */ \"rgb(0,0,0)\")?.darker()!;\n\n          const lineColor = hoverColor.copy();\n          lineColor.opacity = lineOpacityScaling(filteredParticles.length);\n          // const markerBorderColor = \"gray\";\n          hoverColor.opacity = 0.5;\n          const sizeScaling = scaleLinear().range([6, 12]);\n\n          // TOOD: This could be memoized.\n          let groups: [string, IParticle[]][] | null = null;\n          if (isKNNHover) {\n            groups = knnHoverFields.map((key) => [\n              key[1],\n              [\n                hover!,\n                ...(hover?.nearest_neighbors?.[key[1]]?.knn_particles.slice(0, +key[2]).reverse().filter(Boolean) ||\n                  []),\n              ],\n            ]);\n          } else {\n            groups = Object.entries(\n              groupBy(filteredParticles, (p) =>\n                connectBy.map((connectBy) => `${connectBy}:${p.properties?.[connectBy]}`).join(\", \")\n              )\n            );\n          }\n\n          // Cool plotly optimization: instead of creating many traces for lines, create a single trace with NaN separators.\n          // See https://www.somesolvedproblems.com/2019/05/how-to-make-plotly-faster-with-many.html\n          for (let [key, instances] of groups) {\n            instances = instances.filter((p) => lodashGet(p, xAccessor) != null && lodashGet(p, yAccessor) != null);\n            const instanceScaler = sizeScaling.domain([0, instances.length]);\n            allInstances.push(...instances);\n            allInstances.push(null);\n            allSizes.push(...instances.map((_, i) => instanceScaler(i)));\n            allSizes.push(null);\n            allColors.push(...instances.map((p, i) => (p === hover || p.selected ? \"gold\" : \"lightgray\")));\n            allColors.push(\"darkblue\");\n          }\n          const allBorderColors = allColors.map((c) => color(c!)!.darker().toString());\n          // @ts-ignore\n          return {\n            type: isHover ? \"scatter\" : \"scattergl\",\n            mode: \"lines+markers\",\n            x: allInstances.map((p) => lodashGet(p, xAccessor) ?? NaN),\n            y: allInstances.map((p) => lodashGet(p, yAccessor) ?? NaN),\n            name: TRAJECTORY_TRACE_NAME,\n            hoverinfo: \"skip\",\n            // opacity: hover ? (isHover ? 1.0 : 0.05) : 0.2,\n            marker: {\n              color: allColors,\n              size: allSizes,\n              line: {\n                color: allBorderColors,\n                width: 2,\n              },\n              opacity: 1,\n            },\n            colorscale: [\n              [0, \"##a2d4d5\"],\n              [1, \"#127273\"],\n            ],\n            line: {\n              color: lineColor.toString(),\n              width: isKNNHover ? 0 : 2,\n              shape: \"spline\",\n              // opacity: 0.5\n              // @ts-ignore\n            },\n            showlegend: false,\n          } as Partial<Plotly.PlotData>;\n        });\n      })()?.filter(Boolean) || []) as Partial<Plotly.PlotData>[];\n\n      setFigureState((figureState) => {\n        if (!figureState) {\n          return figureState;\n        }\n        const existing = figureState.data.find((d) => d.name === TRAJECTORY_TRACE_NAME);\n        if (traces.length === 0 && !existing) {\n          return figureState;\n        }\n        const data = [\n          ...figureState.data\n            .filter((d) => d.name !== TRAJECTORY_TRACE_NAME)\n            .map((d) => ({ ...d, opacity: traces.length > 0 ? 0.4 : undefined })),\n          ...traces,\n        ];\n        return { ...figureState, data };\n      });\n      // const result: Plotly.Data[] = [];\n      // groups.forEach(([group, instances]) => {\n      //   // const c = color(\n      //   //   instances.find((i) => i.plotData?.color)?.plotData?.color || \"#000000\"\n      //   // )!;\n      //   const c = color(hover?.plotData?.color || \"#000000\")!;\n      //   const sizeScaling = scaleLinear()\n      //     .domain([0, instances.length])\n      //     .range([8, 16]);\n      //   c.opacity = hover && instances.includes(hover) ? 0.5 : 0.3;\n      //   if (true || instances.length > 20 || groups.length > 20) {\n      //     result.push({\n      //       type: \"scattergl\",\n      //       mode: \"lines+markers\",\n      //       x: instances.map((p) => get(p, \"x\")),\n      //       y: instances.map((p) => get(p, \"y\")),\n      //       name: group,\n      //       hoverinfo: \"all\",\n      //       marker: {\n      //         color: \"lightblue\",\n      //         // @ts-ignore\n      //         size: instances.map((p, i) => sizeScaling(i)),\n      //         line: {\n      //           color: c.toString(),\n      //           width: 2,\n      //         },\n      //         opacity: 1,\n      //         // line: 'green'\n      //       },\n      //       line: {\n      //         color: c.toString(),\n      //         // shape: \"spline\",\n      //       },\n      //       showlegend: false,\n      //     });\n      //   } else {\n      //     // const widthScaling = scaleLinear()\n      //     //   .domain([0, instances.length])\n      //     //   .range([1, 6]);\n      //     // instances.slice(1).forEach((instance, i) => {\n      //     //   const instancePair = [instances[i], instance];\n      //     //   result.push({\n      //     //     type: \"scattergl\",\n      //     //     mode: \"lines+markers\",\n      //     //     x: instancePair.map((p) => get(p, \"x\")),\n      //     //     y: instancePair.map((p) => get(p, \"y\")),\n      //     //     name: group,\n      //     //     hoverinfo: \"all\",\n      //     //     marker: {\n      //     //       color: 'red',\n      //     //       size: 10\n      //     //     },\n      //     //     line: {\n      //     //       width: widthScaling(i),\n      //     //       color: c.toString(),\n      //     //       shape: \"spline\",\n      //     //       // dash: 'dot',\n      //     //     },\n      //     //     // legendgroup: `${group}`,\n      //     //     // showlegend: i === 0,\n      //     //     showlegend: false,\n      //     //   });\n      //     // });\n      //   }\n      // });\n\n      // return result;\n    }, [collections, xAccessor, yAccessor, options.connectBy, hover, selected]);\n\n    React.useEffect(() => {\n      const timeout = setTimeout(() => {\n        setFigureState((figureState) => {\n          const annotatedCollections = collections.map(({ data, hidden, name, plotOptions }) => {\n            const colorBy = plotOptions?.colorBy || options.colorBy;\n            const opacityBy = plotOptions?.opacityBy || options.opacityBy;\n            const sizeBy = plotOptions?.sizeBy || options.sizeBy;\n\n            const color = colorBy ? data.map((p) => toNumber(p.properties?.[colorBy])) : undefined;\n            const constantOpacity = typeof opacityBy === \"number\" ? opacityBy : undefined;\n            const opacity = opacityBy\n              ? data.map((p) => constantOpacity || toNumber(p.properties?.[opacityBy]))\n              : undefined;\n            // opacity: opacityBy\n            // ? normalizeArray(\n            //     points.map((p) => p.properties?.[opacityBy] as number),\n            //     0.3,\n            //     0.7\n            //   )\n            // : defaultOpacity,\n            const size = sizeBy ? data.map((p) => toNumber(p.properties?.[sizeBy], 5)) : undefined;\n            // @ts-ignore\n            const colorExtent: [number, number] = color ? extent(color) : undefined;\n            // @ts-ignore\n            const opacityExtent: [number, number] = opacity ? extent(opacity) : undefined;\n            // @ts-ignore\n            const sizeExtent: [number, number] = size ? extent(size) : undefined;\n\n            return {\n              data,\n              hidden,\n              name,\n              plotOptions,\n              colorExtent,\n              color,\n              opacity,\n              opacityExtent,\n              size,\n              sizeExtent,\n            };\n          });\n\n          const colorExtent = toExtent(annotatedCollections, (d) => d.colorExtent);\n          const opacityExtent = toExtent(annotatedCollections, (d) => d.opacityExtent);\n          const sizeref = options.sizeBy\n            ? (2.0 * Math.max(...annotatedCollections.map(({ sizeExtent }) => sizeExtent?.[1] || 0))) / 5 ** 2\n            : undefined;\n\n          const newFigureState: Figure = {\n            frames: [],\n            layout: {\n              ...(figureState?.layout || {}),\n              colorway: DEFAULT_COLORWAY,\n              dragmode: \"lasso\",\n              hovermode: \"closest\",\n              autosize: true,\n              legend: {\n                x: 1,\n                xanchor: \"right\",\n                y: 1.5,\n                bgcolor: \"rgba(255, 255, 255, 0.5)\",\n              },\n              title,\n              margin: {\n                // l: 0,\n                r: 0,\n                // b: 0,\n                // t: 25,\n                pad: 4,\n              },\n            },\n            // @ts-ignore\n            data: annotatedCollections.map(({ data, name, hidden, color, opacity, size, plotOptions }, i) => {\n              const existingData = (figureState?.data.find((d) => d.name === name) as Partial<Plotly.PlotData>) || {};\n\n              const groupBy = plotOptions?.groupBy || options.groupBy;\n              const colorBy = plotOptions?.colorBy || options.colorBy;\n              let groups = groupBy ? data.map((p) => p.properties?.[groupBy]?.toString() || \"N/A\") : undefined;\n\n              let x = data.map((p) => lodashGet(p, xAccessor));\n              let y = data.map((p) => lodashGet(p, yAccessor));\n              let indices = data.map((data, i) => [i, data.index!]);\n\n              if (y?.[0] && Array.isArray(y[0])) {\n                const extendedParticles = y.map((ys, i) => ({\n                  x: Array.from(new Array(ys.length).keys()),\n                  y: ys,\n                  indices: new Array(ys.length).fill(null).map(() => [i, data[i].index!]),\n                  color: Array.isArray(color) ? new Array(ys.length).fill(color[i]) : color,\n                  opacity: Array.isArray(opacity) ? new Array(ys.length).fill(opacity[i]) : opacity,\n                  size: Array.isArray(size) ? new Array(ys.length).fill(size[i]) : size,\n                  groups: Array.isArray(groups) ? new Array(ys.length).fill(groups[i]) : groups,\n                }));\n\n                x = extendedParticles.map((p) => p.x).flat();\n                y = extendedParticles.map((p) => p.y).flat();\n                indices = extendedParticles.map((p) => p.indices).flat();\n                color = Array.isArray(color) ? extendedParticles.map((p) => p.color).flat() : color;\n                opacity = Array.isArray(opacity) ? extendedParticles.map((p) => p.opacity).flat() : opacity;\n                size = Array.isArray(size) ? extendedParticles.map((p) => p.size).flat() : size;\n                groups = Array.isArray(groups) ? extendedParticles.map((p) => p.groups).flat() : groups;\n              }\n              console.log(color)\n              return {\n                ...existingData,\n                x,\n                y,\n                text: data.map((p) => p.structure),\n                hoverinfo: \"none\",\n                name,\n                type: \"scattergl\",\n                mode: \"markers\",\n                // Custom data has the [index of particle in filtered collection, index of particle in global collection] mapping\n                customdata: indices,\n                visible: !hidden ? true : \"legendonly\",\n                showlegend: false,\n                marker: {\n                  ...(existingData.marker || {}),\n                  color,\n                  cmin: colorExtent?.[0],\n                  cmax: colorExtent?.[1],\n                  opacity: opacity\n                    ? normalizeArray(opacity, [0.1, 0.9] /* , opacityExtent */)\n                    : data.length >= 5000\n                    ? 0.5\n                    : 0.5,\n                  // opacity: opacity || 0.5,\n                  symbol: i,\n                  size: size ?? (data.length >= 5000 ? 3.5 : 5),\n                  sizeref,\n                  sizemin: 2,\n                  sizemax: 5,\n                  colorbar: colorBy\n                    ? {\n                        title: colorBy.length > 10 ? colorBy.slice(0, 7) + \"...\" : colorBy,\n                        titleside: \"top\",\n                        thickness: 10,\n                        outlinewidth: 0,\n                        lenmode: \"fraction\",\n                        len: 0.75,\n                        yanchor: \"middle\",\n                      }\n                    : undefined,\n                    ...DEFAULT_PLOTLY_COLORSCALE,\n                    // colorscale: \"Portland\",\n                    // reversescale: true\n                },\n                transforms: (groupBy\n                  ? [\n                      {\n                        type: \"groupby\",\n                        groups,\n                        styles: Array.from(new Set(groups))\n                          .sort((a, b) => a.localeCompare(b))\n                          .map((target, i) => ({\n                            target,\n                            value: { marker: { symbol: i } },\n                          })),\n                      },\n                    ]\n                  : []) as Plotly.Transform[],\n              };\n            }),\n          };\n          return newFigureState;\n        });\n      }, 300);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [title, collections, xAccessor, yAccessor, JSON.stringify(options)]);\n\n    React.useEffect(() => {\n      setFigureState((figureState) =>\n        figureState\n          ? {\n              ...figureState,\n              data: figureState.data.map((data) => {\n                const selectedIndices = new Set(selected?.[data.name!]?.map((s) => s.index!) || []);\n                let selectedpoints: undefined | number[] = undefined;\n                if (selectedIndices.size > 0) {\n                  selectedpoints = [];\n                  ((data as Partial<Plotly.PlotData>).customdata as [number, number][]).forEach(\n                    ([_, particleIndex], pointIndex) => {\n                      if (selectedIndices.has(particleIndex)) {\n                        selectedpoints!.push(pointIndex);\n                      }\n                    }\n                  );\n                }\n                return {\n                  ...data,\n                  selectedpoints,\n                };\n              }),\n            }\n          : null\n      );\n    }, [selected]);\n\n    React.useEffect(() => {\n      const timeout = setTimeout(() => setHoverRef.current?.(innerHover), 50);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [innerHover, setHoverRef]);\n\n    const getPointsFromEvent = (e: Readonly<Plotly.PlotSelectionEvent> | null): IParticleSelection => {\n      const points = e?.points || [];\n      const handledIndices = new Set<number>();\n      return points.length > 0\n        ? points.reduce<{ [key: string]: IParticle[] }>((acc, p) => {\n            // @ts-ignore\n            const collection = collections?.[p.curveNumber];\n            const [pointIndex, particleIndex] = p.customdata as any as [number, number];\n            const particle: IParticle | null = collection?.data?.[pointIndex];\n            if (particle && !handledIndices.has(pointIndex)) {\n              handledIndices.add(pointIndex);\n              if (!acc[collection.name]) {\n                acc[collection.name] = [];\n              }\n              acc[collection.name].push(particle);\n            }\n            return acc;\n          }, {})\n        : null;\n    };\n\n    return (\n      <>\n        {figureState ? (\n          <PlotComponent\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            data={figureState.data}\n            layout={figureState.layout}\n            config={PLOTLY_CONFIG}\n            onSelected={(e) => {\n              setSelected(getPointsFromEvent(e));\n            }}\n            onDeselect={() => {\n              setSelected(null);\n            }}\n            onClick={(e) => {\n              setSelected(getPointsFromEvent(e));\n              setInnerHover(null);\n            }}\n            onHover={(e) => {\n              setInnerHover(Object.values(getPointsFromEvent(e)!).flat()?.[0]);\n            }}\n            onUnhover={() => {\n              setInnerHover(null);\n            }}\n            onUpdate={(figure) => {\n              // Inline save the figure to save the zoom\n              figureState.data = figure.data;\n              figureState.frames = figure.frames;\n              figureState.layout = figure.layout;\n            }}\n          />\n        ) : null}\n        {children}\n      </>\n    );\n  }\n);\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getMatchedMolecularPairs, embedStructures } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const MatchedMolecularPairsForm = ({\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [structure, setStructure] = React.useState<string>(\"\");\n  const [name, setName, nameInput] = useNameInput(\"mmpNameInput\", `MMP ${structure}`);\n  const [substructure, setSubstructure] = React.useState<string>(\"\");\n  const [minVariableSize, setMinVariableSize] = React.useState<number>(0);\n  const [maxVariableSize, setMaxVariableSize] = React.useState<number>(1);\n  const [minConstantSize, setMinConstantSize] = React.useState<number>(0);\n  const [minRadius, setMinRadius] = React.useState<number>(0);\n  const [minPairs, setMinPairs] = React.useState<number>(0);\n\n  return (\n    <FormWrapper\n      title={\n        <>\n          Matched Molecular Pairs &nbsp;\n          <a\n            style={{ fontSize: \"smaller\" }}\n            href=\"https://github.com/rdkit/mmpdb#4-identify-possible-transforms\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <i className=\"fas fa-fw fa-info-circle\" />\n          </a>\n        </>\n      }\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const {structures} = await getMatchedMolecularPairs({\n          structure,\n          substructure: substructure,\n          min_variable_size: minVariableSize,\n          max_variable_size: maxVariableSize,\n          min_constant_size: minConstantSize,\n          min_radius: minRadius,\n          min_pairs: minPairs,\n        });\n        if(structures.length === 0) {\n          throw Error('No matching pairs found');\n        }\n        const embeddedCollection = await embedStructures({structures: structures.map((smiles) => ({smiles})), include_embedding: true});\n        addCollection({\n          name,\n          ...embeddedCollection\n        });\n        setName('');\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"mmpStructureInput\">Structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={structure} selection={selection} setValue={setStructure} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"mmpStructureInput\"\n            aria-describedby=\"mmpStructureInput\"\n            value={structure}\n            onChange={(e) => setStructure(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <details>\n        <summary>Advanced Settings</summary>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minVariableSizeInput\">Min Variable Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minVariableSizeInput\"\n            value={minVariableSize}\n            required\n            min={0}\n            onChange={(e) => setMinVariableSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"maxVariableSizeInput\">Max Variable Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"maxVariableSizeInput\"\n            value={maxVariableSize}\n            required\n            min={0}\n            onChange={(e) => setMaxVariableSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minConstantSizeInput\">Min Constant Size</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minConstantSizeInput\"\n            value={minConstantSize}\n            required\n            min={0}\n            onChange={(e) => setMinConstantSize(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minRadiusInput\">Min Radius</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minRadiusInput\"\n            value={minRadius}\n            min={0}\n            required\n            onChange={(e) => setMinRadius(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"minPairsInput\">Min Pairs</label>\n          <input\n            type=\"number\"\n            className=\"form-control form-control-sm\"\n            id=\"minPairsInput\"\n            value={minPairs}\n            min={0}\n            required\n            onChange={(e) => setMinPairs(e.currentTarget.valueAsNumber)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"mmpSmartsStructureInput\">SMARTS Substructure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={substructure} selection={selection} setValue={setSubstructure} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"mmpSmartsStructureInput\"\n              aria-describedby=\"mmpSmartsStructureInput\"\n              value={substructure}\n              onChange={(e) => setSubstructure(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n      </details>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!structure} text=\"Compute MMP\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticle, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getNeighborSamples, getTanimotoSimilarity } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { Modal } from \"react-bootstrap\";\nimport { StructureImage } from \"../StructureImage\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const NeighborSamplingForm = ({\n  visible,\n  setVisible,\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  visible: IParticle[] | null;\n  setVisible(collection: IParticle[] | null): void;\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [smiles, setSmiles] = React.useState<string>(\"\");\n  const [method, setMethod] = React.useState<string>(\"chembl_pca\");\n  const [nr, setNr] = React.useState<number>(5);\n  const [scale, setScale] = React.useState<number>(1);\n  const [name, setName, nameInput] = useNameInput(\"neighborhoodNameInput\", `${method} ${nr}*${scale} Neighborhood of ${smiles}`);\n\n  const computeNeighborSamples = async () => {\n    const serverCollection = await getNeighborSamples(smiles, nr, method, scale);\n    const similarity = await getTanimotoSimilarity(\n      serverCollection.data.map((p) => p.structure),\n      smiles,\n      \"ecfp4\"\n    );\n\n    const data = serverCollection.data.map((p) => ({\n      ...p,\n      properties: { ...(p.properties || {}), neighborhoodSimilarity: similarity.tanimoto[p.structure] },\n    }));\n    setCollections([\n      ...collections,\n      {\n        ...serverCollection,\n        name,\n        data,\n        type: \"neighborhoodSampling\",\n      },\n    ]);\n    setName(\"\");\n    setVisible(data);\n  };\n\n  return (\n    <>\n      <Modal show={Boolean(visible)} onHide={() => setVisible(null)} size=\"xl\">\n        <Modal.Header closeButton>\n          <Modal.Title>Neighborhood Sampling</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {visible ? (\n            <>\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${Math.sqrt(visible.length)}, 1fr)`,\n                }}\n              >\n                {visible.map((sample, i) => (\n                  <StructureImage\n                    key={i}\n                    structure={sample.structure}\n                    align={visible[Math.floor(visible.length / 2)].structure}\n                    title={`Similarity to reference: ${sample.properties?.[\"neighborhoodSimilarity\"]}`}\n                    style={{\n                      width: \"100%\",\n                      opacity: sample.properties?.[\"neighborhoodSimilarity\"] as number,\n                      border: `1px solid ${Math.floor(visible.length / 2) === i ? \"gold\" : \"rgba(0, 0, 0, 0.05)\"}`,\n                    }}\n                  />\n                ))}\n              </div>\n            </>\n          ) : null}\n        </Modal.Body>\n      </Modal>\n      <FormWrapper\n        title=\"Neighborhood Sampling\"\n        loading={loading}\n        setLoading={setLoading}\n        onSubmit={computeNeighborSamples}\n      >\n        {nameInput}\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodStructureInput\">Reference structure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={smiles} selection={selection} setValue={setSmiles} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"neighborhoodStructureInput\"\n              aria-describedby=\"neighborhoodStructureInput\"\n              value={smiles}\n              onChange={(e) => setSmiles(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodSamplesInput\" className=\"form-label\">Nr. of Samples: {nr}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"neighborhoodSamplesInput\"\n            value={nr}\n            onChange={(e) => setNr(e.currentTarget.valueAsNumber)}\n            min={3}\n            max={15}\n            step={2}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodScaleInput\" className=\"form-label\">Scale: {scale}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"neighborhoodScaleInput\"\n            value={scale}\n            onChange={(e) => setScale(e.currentTarget.valueAsNumber)}\n            min={0.1}\n            max={5}\n            step={0.1}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"neighborhoodSamplesMethod\">Method</label>\n          <div className=\"input-group input-group-sm\">\n            <select\n              className=\"form-control\"\n              id=\"neighborhoodSamplesMethod\"\n              value={method}\n              onChange={(e) => {\n                setMethod(e.currentTarget.value);\n              }}\n            >\n              <option value=\"chembl_pca\">PCA of ChEMBL</option>\n              <option value=\"random_orthogonal\">Random Orthogonal</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"text-end\">\n          <ButtonWithUpload loading={loading} disabled={!smiles} text=\"Compute Neighbors\" />\n        </div>\n      </FormWrapper>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { computeProjectionsWithModels } from \"../../utils/api\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { FormWrapper } from \"./FormWrapper\";\n\nexport const RecomputeEmbeddingsForm = ({\n  collections,\n  setCollections,\n  selection,\n  loading,\n  setLoading,\n}: {\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  selection: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [from, setFrom] = React.useState<ICollection | null>(null);\n  const [projection, setProjection] = React.useState<string | null>(\"all\");\n  const [to, setTo] = React.useState<ICollection | null>(null);\n\n  const recomputeProjections = async () => {\n    if (from?.projections && to && projection) {\n      const recomputedParticles = await computeProjectionsWithModels(\n        to.data,\n        projection === \"all\" ? Object.entries(from.projections).reduce((acc, [key, value]) => ({...acc, [key]: value.model}), {}) : { [projection]: from.projections[projection].model }\n      );\n\n      const toName = (projection: string): string => `${from.name}_${projection}_base`;\n\n      const newTo = {\n        ...to,\n        data: to.data.map((d, i) => ({\n          ...d,\n          projection: {\n            ...d.projection,\n            ...Object.entries(recomputedParticles.projection).reduce(\n              (acc, [projection, data]) => ({\n                ...acc,\n                [toName(projection)]: data[i],\n              }),\n              {}\n            ),\n          },\n        })),\n        projections: {\n          ...(to.projections || {}),\n          ...Object.entries(recomputedParticles.projections || {}).reduce((acc, [projection, data]) => ({\n            ...acc,\n            [toName(projection)]: data\n          }), {})\n        }\n      };\n\n      const newFrom = {\n        ...from,\n        data: from.data.map((d) => ({\n          ...d,\n          projection: {\n            ...d.projection,\n            ...Object.keys(recomputedParticles.projection).reduce(\n              (acc, projection) => ({\n                ...acc,\n                [toName(projection)]: d.projection[projection],\n              }),\n              {}\n            ),\n          },\n        })),\n      };\n      // throw Error('TEST');\n\n      setCollections(collections.map((c) => (c === to ? newTo : c === from ? newFrom : c)));\n\n      setTo(newTo);\n      setFrom(newFrom);\n    }\n  };\n\n  const collectionsWithProjections = collections.filter(\n    (c) => c.projections && Object.entries(c.projections).some(([key, value]) => value.model)\n  );\n\n  const collectionsWithEmbeddings = collections.filter(\n    (c) => c.data?.[0].embedding && Object.entries(c.data?.[0].embedding).length > 0\n  );\n\n  return (\n    <FormWrapper\n      title=\"Recompute Projections\"\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={recomputeProjections}\n    >\n      {collectionsWithProjections.length > 0 ? (\n        <>\n          <div className=\"mb-3\">\n            <label htmlFor=\"recomputeProjectionFrom\">Reference collection</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"recomputeProjectionFrom\"\n                value={from?.name}\n                onChange={(e) => {\n                  const from = e.currentTarget.value;\n                  setFrom(from ? collections.find((c) => c.name === from)! : null);\n                }}\n              >\n                <option value=\"\">Select...</option>\n                {collectionsWithProjections.map((c) => (\n                  <option key={c.name} value={c.name}>{c.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          {from ? (\n            <div className=\"mb-3\">\n              <label htmlFor=\"recomputeProjectionProjection\">Projection</label>\n              <div className=\"input-group input-group-sm\">\n                <select\n                  className=\"form-control\"\n                  id=\"recomputeProjectionProjection\"\n                  value={projection || undefined}\n                  onChange={(e) => {\n                    setProjection(e.currentTarget.value);\n                  }}\n                >\n                  <option value=\"all\">All</option>\n                  {Object.entries(from?.projections || {})\n                    .filter(([key, value]) => value.model)\n                    .map(([key, value]) => (\n                      <option value={key}>{key}</option>\n                    ))}\n                </select>\n              </div>\n            </div>\n          ) : null}\n          <div className=\"mb-3\">\n            <label htmlFor=\"recomputeProjectionTo\">Subset collection</label>\n            <div className=\"input-group input-group-sm\">\n              <select\n                className=\"form-control\"\n                id=\"recomputeProjectionTo\"\n                value={to?.name}\n                onChange={(e) => {\n                  const to = e.currentTarget.value;\n                  setTo(to ? collections.find((c) => c.name === to)! : null);\n                }}\n              >\n                <option value=\"\">Select...</option>\n                {collectionsWithEmbeddings.map((c) => (\n                  <option value={c.name}>{c.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"text-end\">\n            <ButtonWithUpload\n              loading={loading}\n              disabled={Boolean(!from || !to || from === to)}\n              text=\"Compute Projections\"\n            />\n          </div>\n        </>\n      ) : (\n        <p>At least 2 collections must be available.</p>\n      )}\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { ICollection, IParticleSelection } from \"../../interfaces\";\nimport { ButtonWithUpload } from \"../ButtonWithUpload\";\nimport { getMatchedMolecularPairs, embedStructures, getStonedSelfies } from \"../../utils/api\";\nimport { FormWrapper } from \"./FormWrapper\";\nimport { UseStructureInputAddon } from \"../UseStructureInputAddon\";\nimport { useNameInput } from \"../../utils/hooks\";\n\nexport const StonedSelfiesForm = ({\n  addCollection,\n  selection,\n  loading,\n  setLoading,\n}: {\n  addCollection(collection: ICollection): void;\n  selection?: IParticleSelection;\n  loading: boolean;\n  setLoading(loading: boolean): void;\n}) => {\n  const [structure, setStructure] = React.useState<string>(\"\");\n  const [name, setName, nameInput] = useNameInput(\"stonedSelfiesNameInput\", `SELFIES ${structure}`);\n  const [substructure, setSubstructure] = React.useState<string>(\"\");\n  const [randomSamples, setRandomSamples] = React.useState<number>(1000);\n  const [maxMutations, setMaxMutations] = React.useState<number>(5);\n\n  return (\n    <FormWrapper\n      title={\n        <>\n          Stoned Selfies &nbsp;\n          <a\n            style={{ fontSize: \"smaller\" }}\n            href=\"https://github.com/aspuru-guzik-group/stoned-selfies\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <i className=\"fas fa-fw fa-info-circle\" />\n          </a>\n        </>}\n      loading={loading}\n      setLoading={setLoading}\n      onSubmit={async () => {\n        const { structures } = await getStonedSelfies({\n          structure,\n          substructure,\n          random_samples: randomSamples,\n          max_mutations: maxMutations,\n        });\n        if (structures.length === 0) {\n          throw Error(\"No stoned selfies found\");\n        }\n        const embeddedCollection = await embedStructures({ structures: structures.map((smiles) => ({smiles})), include_embedding: true });\n        addCollection({\n          name,\n          ...embeddedCollection,\n        });\n        setName(\"\");\n      }}\n    >\n      {nameInput}\n      <div className=\"mb-3\">\n        <label htmlFor=\"stonedSelfiesStructureInput\">Structure</label>\n        <div className=\"input-group input-group-sm\">\n          <UseStructureInputAddon value={structure} selection={selection} setValue={setStructure} />\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm\"\n            id=\"stonedSelfiesStructureInput\"\n            aria-describedby=\"stonedSelfiesStructureInput\"\n            value={structure}\n            onChange={(e) => setStructure(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n      <details>\n        <summary>Advanced Settings</summary>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesSubstructureInput\">Substructure</label>\n          <div className=\"input-group input-group-sm\">\n            <UseStructureInputAddon value={substructure} selection={selection} setValue={setSubstructure} />\n            <input\n              type=\"text\"\n              className=\"form-control form-control-sm\"\n              id=\"stonedSelfiesSubstructureInput\"\n              aria-describedby=\"stonedSelfiesSubstructureInput\"\n              value={substructure}\n              onChange={(e) => setSubstructure(e.currentTarget.value)}\n            />\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesRandomSamplesInput\" className=\"form-label\">Nr. of Random Samples: {randomSamples}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"stonedSelfiesRandomSamplesInput\"\n            value={randomSamples}\n            onChange={(e) => setRandomSamples(e.currentTarget.valueAsNumber)}\n            min={500}\n            max={50000}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"stonedSelfiesMaxPermutationsInput\" className=\"form-label\">Maximum Permutations: {maxMutations}</label>\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            id=\"stonedSelfiesMaxPermutationsInput\"\n            value={maxMutations}\n            onChange={(e) => setMaxMutations(e.currentTarget.valueAsNumber)}\n            min={1}\n            max={20}\n          />\n        </div>\n      </details>\n      <div className=\"text-end\">\n        <ButtonWithUpload loading={loading} disabled={!structure} text=\"Compute\" />\n      </div>\n    </FormWrapper>\n  );\n};\n","import * as React from \"react\";\nimport castArray from \"lodash.castarray\";\nimport Select from \"react-select/creatable\";\n\nexport interface GenericPlotSelectOption<T> {\n  option: T | null | undefined;\n  setOption(option: T | null): void;\n}\n\nexport interface IPlotSelectExtension {\n  component: React.FunctionComponent<{\n    availableNearestNeighbors: string[];\n    availableClusters: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>>;\n  additionalOptions: {label: string, value: string}[];\n}\n\nexport function PlotSelect<IsMulti extends boolean = false>({\n  inline = true,\n  multi,\n  option,\n  setOption,\n  label,\n  options,\n  id,\n  disabled,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  extensions,\n}: {\n  inline?: boolean;\n  options: string[];\n  disabled?: boolean;\n  id: string;\n  label?: string;\n  multi: IsMulti;\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  extensions?: IPlotSelectExtension[];\n} & (IsMulti extends true ? GenericPlotSelectOption<string[]> : GenericPlotSelectOption<string>)) {\n  const values: string[] = React.useMemo(() => castArray(option).filter(Boolean) as string[], [option]);\n\n  return (\n    <div className={`d-flex position-relative ${inline ? 'col-sm-3' : 'col-12'}`}>\n      {label ? (\n        <label\n          className={`my-1 me-2 align-self-center ${inline ? \"\" : \"col-sm-2 d-flex\"}`}\n          style={{ whiteSpace: \"nowrap\" }}\n          htmlFor={id}\n        >\n          {label}\n        </label>\n      ) : null}\n      <div className={`my-1 me-sm-2 flex-fill ${inline ? \"\" : \"col-sm-10\"}`} style={{ minWidth: 100 }}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Select<{ label: string; value: string }, IsMulti>\n              menuPosition=\"fixed\"\n              isMulti={multi}\n              isClearable\n              styles={{ menu: (base) => ({ ...base, zIndex: 999 }) }}\n              onCreateOption={(value) => {\n                setOption(value as any);\n              }}\n              value={values.map((p) => ({\n                label: p,\n                value: p,\n              }))}\n              onChange={(e) => {\n                if (!e) {\n                  setOption(null);\n                  return;\n                }\n                // @ts-ignore\n                const values: { label: string; value: string }[] = castArray(e);\n                if (multi) {\n                  setOption(values.map((p) => p.value) as any);\n                } else {\n                  setOption(values?.[0]?.value as any);\n                }\n              }}\n              options={[\n                ...(extensions || []).map((e) => e.additionalOptions || []).flat(),\n                ...options.map((option) => ({\n                  label: option,\n                  value: option,\n                })),\n              ]}\n            />\n          </div>\n          {extensions?.map((e) => (\n            <e.component\n              setOption={(e) => {\n                if(!e) {\n                  return null;\n                }\n                const values: string[] = castArray(e);\n                if (multi) {\n                  setOption(values.map((p) => p) as any);\n                } else {\n                  setOption(values?.[0] as any);\n                }\n              }}\n              availableNearestNeighbors={availableNearestNeighbors}\n              availableClusters={availableClusters}\n              availableProperties={availableProperties}\n              option={values?.[0]}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectJaccardExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n  }: {\n    availableNearestNeighbors: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, jaccardEmb1, jaccardEmb2, jaccardNN] = option?.split(\"=\") || [];\n    const isJaccard = key === \"jaccard\";\n\n    return isJaccard ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={jaccardEmb1 || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${e.currentTarget.value}=${jaccardEmb2 || \"\"}=${jaccardNN || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={jaccardEmb2 || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${jaccardEmb1 || \"\"}=${e.currentTarget.value}=${jaccardNN || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+jaccardNN || \"\"}\n            onChange={(e) =>\n              setOption(`jaccard=${jaccardEmb1 || \"\"}=${jaccardEmb2 || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Ratio of matching nearest neighbors\",\n      value: \"jaccard=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { ARRAY_DISTANCE_METRICS } from \"../utils/constants\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectNNDiffExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n    availableProperties,\n  }: {\n    availableNearestNeighbors: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb, property, method, nn] = option?.split(\"=\") || [];\n    const isNNDiff = key === \"nn_diff\";\n\n    return isNNDiff ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${e.currentTarget.value}=${property || \"\"}=${method || \"\"}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={property || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${e.currentTarget.value}=${method || \"\"}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableProperties.map((prop) => (\n              <option value={prop}>{prop}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={method || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${property || \"\"}=${e.currentTarget.value}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {Object.keys(ARRAY_DISTANCE_METRICS).map((prop) => (\n              <option value={prop}>{prop}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+nn || \"\"}\n            onChange={(e) =>\n              setOption(`nn_diff=${emb || \"\"}=${property || \"\"}=${method || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Properties of nearest neighbors\",\n      value: \"nn_diff=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectKNNExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n  }: {\n    availableNearestNeighbors: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb, nn] = option?.split(\"=\") || [];\n    const isKNN = key === \"knn\";\n\n    return isKNN ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`knn=${e.currentTarget.value}=${nn || \"\"}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableNearestNeighbors.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col\">\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            min={1}\n            max={50}\n            value={+nn || \"\"}\n            onChange={(e) =>\n              setOption(`knn=${emb || \"\"}=${e.currentTarget.value}` as any)\n            }\n          />\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"K-Nearest Neighbors\",\n      value: \"knn=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectClusterExtension: IPlotSelectExtension = {\n  component: ({\n    option,\n    setOption,\n    availableNearestNeighbors,\n    availableClusters,\n    availableProperties,\n  }: {\n    availableNearestNeighbors: string[];\n    availableClusters: string[];\n    availableProperties: string[];\n  } & GenericPlotSelectOption<string>) => {\n    const [key, emb] = option?.split(\"=\") || [];\n    const isNNDiff = key === \"cluster\";\n\n    return isNNDiff ? (\n      <>\n        <div className=\"col\">\n          <select\n            className=\"form-control\"\n            value={emb || \"\"}\n            onChange={(e) =>\n              setOption(`cluster=${e.currentTarget.value}` as any)\n            }\n          >\n            <option value=\"\">Select...</option>\n            {availableClusters.map((nn) => (\n              <option value={nn}>{nn}</option>\n            ))}\n          </select>\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Clusters\",\n      value: \"cluster=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { GenericPlotSelectOption, IPlotSelectExtension } from \"./PlotSelect\";\n\nexport const PlotSelectEvalExtension: IPlotSelectExtension = {\n  component: ({ option, setOption }: {} & GenericPlotSelectOption<string>) => {\n    const [key, func] = option?.split(\"=\") || [];\n    const isEval = key === \"eval\";\n\n    return isEval ? (\n      <>\n        <div className=\"col-8\">\n          <div className=\"input-group\">\n            <span className=\"input-group-text\">\n              <code>(p) ={\">\"} </code>\n            </span>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={func || \"\"}\n              onChange={(e) => setOption(`eval=${e.currentTarget.value || \"\"}` as any)}\n            />\n          </div>\n        </div>\n      </>\n    ) : null;\n  },\n  additionalOptions: [\n    {\n      label: \"Custom function\",\n      value: \"eval=\",\n    },\n  ],\n};\n","import * as React from \"react\";\nimport { IEnabledProjection } from \"../../interfaces\";\nimport { PlotSelect } from \"../PlotSelect\";\nimport uniqueId from \"lodash.uniqueid\";\nimport { PlotSelectJaccardExtension } from \"../PlotSelectJaccardExtension\";\nimport { PlotSelectNNDiffExtension } from \"../PlotSelectNNDiffExtension\";\nimport { PlotSelectKNNExtension } from \"../PlotSelectKNNExtension\";\nimport { PlotSelectClusterExtension } from \"../PlotSelectClusterExtension\";\nimport { PlotSelectEvalExtension } from \"../PlotSelectEvalExtension\";\n\nexport const ProjectionSettingsForm = ({\n  inline,\n  config,\n  setConfig,\n  availableProjections,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  availableOpacityProperties,\n  availableConnectByProperties,\n}: {\n  inline: boolean;\n  config: IEnabledProjection;\n  setConfig(value: IEnabledProjection): void;\n  availableProjections?: string[];\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  availableOpacityProperties: string[];\n  availableConnectByProperties: string[];\n}) => {\n  const [id, setId] = React.useState<string>(uniqueId());\n  return (\n    <form className=\"row\">\n      {availableProjections ? (\n        <PlotSelect\n          multi={false}\n          inline={inline}\n          id={`projection${id}Select`}\n          label=\"Projection\"\n          option={config.projection}\n          options={availableProjections}\n          setOption={(projection: string) => {\n            setConfig({ ...config, projection });\n          }}\n          availableNearestNeighbors={availableNearestNeighbors}\n          availableClusters={availableClusters}\n          availableProperties={availableProperties}\n        />\n      ) : null}\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`colorEncoding${id}Select`}\n        label=\"Color Encoding\"\n        // disabled={groupBy !== null}\n        option={config.plotOptions.colorBy}\n        options={availableProperties}\n        setOption={(colorCoding: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, colorBy: colorCoding } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`opacity${id}Select`}\n        label=\"Opacity By\"\n        // disabled={colorCoding !== null}\n        option={typeof config.plotOptions.opacityBy === \"number\" ? \"constant\" : config.plotOptions.opacityBy}\n        options={availableOpacityProperties}\n        setOption={(opacityBy: string) => {\n          setConfig({\n            ...config,\n            plotOptions: { ...config.plotOptions, opacityBy: opacityBy === \"constant\" ? 0.5 : opacityBy },\n          });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      {typeof config.plotOptions.opacityBy === \"number\" ? (\n        <div className=\"mb-3 me-sm-2\">\n          {/* <label for=\"formControlRange\" className=\"form-label\">Example Range input</label> */}\n          <input\n            type=\"range\"\n            className=\"form-range\"\n            min={0}\n            max={1}\n            step={0.01}\n            value={config.plotOptions.opacityBy}\n            onChange={(e) => {\n              setConfig({\n                ...config,\n                plotOptions: { ...config.plotOptions, opacityBy: e.currentTarget.valueAsNumber },\n              });\n            }}\n          />\n        </div>\n      ) : null}\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`grouping${id}Select`}\n        label=\"Group By\"\n        // disabled={colorCoding !== null}\n        option={config.plotOptions.groupBy}\n        options={availableProperties}\n        setOption={(groupBy: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, groupBy } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        multi={false}\n        inline={inline}\n        id={`sizeBy${id}Select`}\n        label=\"Size by\"\n        option={config.plotOptions.sizeBy}\n        options={availableProperties}\n        setOption={(sizeBy: string) => {\n          setConfig({ ...config, plotOptions: { ...config.plotOptions, sizeBy } });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectEvalExtension]}\n      />\n      <PlotSelect\n        inline={inline}\n        id={`connectBy${id}Select`}\n        label=\"Connect by\"\n        multi={true}\n        option={config.plotOptions.connectBy}\n        options={availableConnectByProperties}\n        setOption={(option: string[]) => {\n          setConfig({\n            ...config,\n            plotOptions: { ...config.plotOptions, connectBy: option.length === 0 ? null : option },\n          });\n        }}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProperties={availableProperties}\n        extensions={[PlotSelectJaccardExtension, PlotSelectNNDiffExtension, PlotSelectKNNExtension, PlotSelectClusterExtension, PlotSelectEvalExtension]}\n      />\n    </form>\n  );\n};\n","import * as React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { IEnabledProjection } from \"../interfaces\";\nimport { ProjectionSettingsForm } from \"./form/ProjectionSettingsForm\";\n\nexport function ProjectionSettingsModal({\n  config: oldConfig,\n  availableProjections,\n  availableNearestNeighbors,\n  availableClusters,\n  availableProperties,\n  availableOpacityProperties,\n  availableConnectByProperties,\n  onHide,\n  onSave,\n}: {\n  config: IEnabledProjection | undefined;\n  availableProjections?: string[];\n  availableNearestNeighbors: string[];\n  availableClusters: string[];\n  availableProperties: string[];\n  availableOpacityProperties: string[];\n  availableConnectByProperties: string[];\n  onHide?(): void;\n  onSave?(value: IEnabledProjection): void;\n}) {\n  const [config, setConfig] = React.useState<IEnabledProjection | undefined>(oldConfig);\n\n  React.useEffect(() => {\n    setConfig(oldConfig);\n  }, [oldConfig]);\n\n  return (\n    <>\n      <Modal show={Boolean(config)} onHide={onHide} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Configure {config?.value}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {config ? (\n            <>\n              <div className=\"d-flex position-relative\">\n                <label\n                  className={`my-1 me-2 col-sm-2 d-flex align-items-center`}\n                  style={{ whiteSpace: \"nowrap\" }}\n                  htmlFor=\"projectionNameInput\"\n                >\n                  Name\n                </label>\n                <div className={`my-1 me-sm-2 flex-fill col-sm-10`}>\n                  <input\n                    type=\"text\"\n                    id=\"projectionNameInput\"\n                    className=\"form-control\"\n                    value={config.label}\n                    onChange={(e) =>\n                      setConfig({ ...config, value: e.currentTarget.value, label: e.currentTarget.value })\n                    }\n                  />\n                </div>\n              </div>\n              <ProjectionSettingsForm\n                inline={false}\n                availableProjections={availableProjections}\n                availableNearestNeighbors={availableNearestNeighbors}\n                availableClusters={availableClusters}\n                availableConnectByProperties={availableConnectByProperties}\n                availableProperties={availableProperties}\n                availableOpacityProperties={availableOpacityProperties}\n                setConfig={setConfig}\n                config={config}\n              />\n            </>\n          ) : null}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={onHide}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={() => (config ? onSave?.(config) : null)}>\n            Save\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { LoadingPage } from \"./components/LoadingPage\";\nimport {\n  DEFAULT_CHEMBL_COLLECTION,\n  EActiveTabs,\n  ICollection,\n  IEnabledProjection,\n  IParticle,\n  IParticleSelection,\n  IPlotOptions,\n  IRegistry,\n} from \"./interfaces\";\nimport { StructureCardGrid } from \"./components/StructureCardGrid\";\nimport { HorizontalCollapse } from \"./components/HorizontalCollapse\";\nimport { ClusterSidePanel } from \"./ClusterSidePanel\";\nimport { Tooltip } from \"./utils/hooks\";\nimport { GridItemOptions } from \"./components/GridItemOptions\";\nimport { Grid } from \"./components/Grid\";\nimport { ComputeEmbeddingsForm, MSOForm, TanimotoForm, SubstructureMatchingForm } from \"./components/form\";\nimport { getChemblUMAPEmbedding } from \"./utils/api\";\nimport { ScatterPlot } from \"./components/ScatterPlot\";\nimport { InterpolationForm } from \"./components/form/InterpolationForm\";\nimport { MatchedMolecularPairsForm } from \"./components/form/MatchedMolecularPairsForm\";\nimport { NeighborSamplingForm } from \"./components/form/NeighborSamplingForm\";\nimport { RecomputeEmbeddingsForm } from \"./components/form/RecomputeEmbeddingsForm\";\nimport CreatableSelect from \"react-select/creatable\";\nimport { ParallelCoordinatesPlot } from \"./components/ParallelCoordinatesPlot\";\nimport { StonedSelfiesForm } from \"./components/form/StonedSelfiesForm\";\nimport { StructureImage } from \"./components/StructureImage\";\nimport { ProjectionSettingsModal } from \"./components/ProjectionSettingsModal\";\nimport { ProjectionSettingsForm } from \"./components/form/ProjectionSettingsForm\";\nimport pickBy from \"lodash.pickby\";\n// @ts-ignore Typings?\nimport Split from \"react-split\";\nimport ReactResizeDetector from \"react-resize-detector\";\n\nconst NR_OF_LATENT_SPACE_PARTICLES = 10;\n\nexport function EmbeddingPage({\n  registry,\n  collections,\n  setCollections,\n  interpolationStructures,\n  setInterpolationStructures,\n  setActiveTab,\n}: {\n  registry: IRegistry | null;\n  collections: ICollection[];\n  setCollections(collections: ICollection[]): void;\n  interpolationStructures: string[];\n  setInterpolationStructures(structures: string[]): void;\n  setActiveTab(tab: EActiveTabs): void;\n}) {\n  const allParticles = React.useMemo(\n    () => collections.reduce<IParticle[]>((acc, cur) => [...acc, ...cur.data], []),\n    [collections]\n  );\n\n  const [visibleNeighborhoodSamplings, setVisibleNeighborhoodSamplings] = React.useState<IParticle[] | null>(null);\n  const [loading, setLoading] = React.useState<boolean>(false);\n  const [clusterCollapsed, setClusterCollapsed] = React.useState<boolean>(false);\n  const [optionsCollapsed, setOptionsCollapsed] = React.useState<boolean>(false);\n  const [enabledProjections, setEnabledProjections] = React.useState<IEnabledProjection[]>([\n    {\n      label: \"ecfp4_umap\",\n      value: \"ecfp4_umap\",\n      projection: \"ecfp4_umap\",\n      plotOptions: {},\n    },\n  ]);\n  const [editProjection, setEditProjection] = React.useState<IEnabledProjection | undefined>(undefined);\n\n  const [hover, setHover] = React.useState<IParticle | null>(null);\n  const [filtered, setFiltered] = React.useState<IParticleSelection>(null);\n  // Wrap the setSelected into a shallow list compare to avoid rerenders\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // const selected = React.useMemo(() => mainParticles.filter((p) => p.selected), [mainParticles, _selectedChanged]);\n  // const selected = React.useMemo<{ [key: string]: IParticle[] } | undefined>(() => undefined, []);\n  const [selection, _setSelection] = React.useState<IParticleSelection>(null);\n  const setSelection = React.useCallback(\n    (s: IParticleSelection) => {\n      collections.forEach((c) => c.data.forEach((p) => (p.selected = false)));\n      if (s) {\n        const _setParticleSelected = (particle: IParticle) => (particle.selected = true);\n        if (Array.isArray(s)) {\n          s.forEach(_setParticleSelected);\n        } else {\n          Object.values(s).forEach((particles) => particles.forEach(_setParticleSelected));\n        }\n      }\n      _setSelection(s);\n    },\n    [collections]\n  );\n\n  // Plot options\n  const [plotOptions, setPlotOptions] = React.useState<IPlotOptions>({\n    colorBy: null,\n    opacityBy: null,\n    groupBy: null,\n    connectBy: null,\n    sizeBy: null,\n  });\n\n  const [customX, setCustomX] = React.useState<string | null>(null);\n  const [customY, setCustomY] = React.useState<string | null>(null);\n  const [customPlotSettings, setCustomPlotSettings] = React.useState<IEnabledProjection | undefined>(undefined);\n\n  // Ranking options\n  const [showSelectedOnly, setShowSelectedOnly] = React.useState<boolean>(false);\n\n  const [availableProperties, availableProjections, availableEmbeddings, availableNearestNeighbors, availableClusters] =\n    React.useMemo(() => {\n      const keys: (keyof IParticle)[] = [\"properties\", \"projection\", \"embedding\", \"nearest_neighbors\", \"clusters\"];\n      return keys.map((field) =>\n        Array.from(\n          allParticles\n            .reduce<Set<string>>((acc, cur) => {\n              Object.keys(cur[field] || {}).forEach((key) => acc.add(key));\n              return acc;\n            }, new Set())\n            .keys()\n        )\n      );\n    }, [allParticles]);\n\n  const availableOpacityProperties = React.useMemo(() => [...availableProperties, \"constant\"], [availableProperties]);\n  const availableConnectByProperties = React.useMemo(() => availableProperties, [availableProperties]);\n\n  React.useEffect(() => {\n    if (plotOptions.colorBy && !availableProperties.includes(plotOptions.colorBy)) {\n      // setPlotOptions({ ...plotOptions, colorBy: null });\n    }\n    if (\n      plotOptions.opacityBy &&\n      typeof plotOptions.opacityBy !== \"number\" &&\n      !availableOpacityProperties.includes(plotOptions.opacityBy)\n    ) {\n      setPlotOptions({ ...plotOptions, opacityBy: null });\n    }\n    if (plotOptions.groupBy && !availableProperties.includes(plotOptions.groupBy)) {\n      setPlotOptions({ ...plotOptions, groupBy: null });\n    }\n    if (\n      plotOptions.connectBy &&\n      plotOptions.connectBy.some((option) => !availableConnectByProperties.includes(option))\n    ) {\n      // setPlotOptions({ ...plotOptions, connectBy: null });\n    }\n    if (plotOptions.sizeBy && !availableProperties.includes(plotOptions.sizeBy)) {\n      setPlotOptions({ ...plotOptions, sizeBy: null });\n    }\n  }, [availableProperties, availableOpacityProperties, availableConnectByProperties, plotOptions]);\n\n  React.useEffect(\n    () => {\n      if (false && !collections.find((c) => c.name === DEFAULT_CHEMBL_COLLECTION)) {\n        getChemblUMAPEmbedding()\n          .then((data) => setCollections([...collections, { data, name: DEFAULT_CHEMBL_COLLECTION }]))\n          .catch((e) => console.error(\"Error loading chembl umap\", e));\n      }\n    },\n    [\n      /* collections, setCollections */\n    ]\n  );\n\n  const filteredCollections = React.useMemo<ICollection[]>(() => {\n    return filtered ? Object.entries(filtered).map(([name, data]) => ({ name, data })) : collections;\n  }, [filtered, collections]);\n\n  const visibleCollections = React.useMemo<ICollection[]>(() => {\n    return showSelectedOnly && selection\n      ? Object.entries(selection).map(([name, data]) => ({ name, data }))\n      : collections;\n  }, [collections, showSelectedOnly, selection]);\n\n  const latentSpaceCollections = React.useMemo<{ [key: string]: ICollection[] } | null>(() => {\n    return true\n      ? availableEmbeddings.reduce<{ [key: string]: any }>(\n          (acc, cur) => ({\n            ...acc,\n            [cur]: filteredCollections.map((c) => {\n              // Restrict to the first n particles\n              const data = c.data\n                .slice(0, NR_OF_LATENT_SPACE_PARTICLES)\n                .filter((d) => d.embedding?.[cur])\n                .map((d) => {\n                  return d.embedding![cur].map((y, x) => ({\n                    ...d,\n                    properties: {\n                      ...(d.properties || {}),\n                      latentX: x,\n                      latentY: y,\n                    },\n                  }));\n                })\n                .flat();\n              return {\n                ...c,\n                data,\n              };\n            }),\n          }),\n          {}\n        )\n      : null;\n  }, [filteredCollections, availableEmbeddings]);\n\n  return (\n    <>\n      <Tooltip>\n        {hover ? (\n          // <StructureCard\n          //   structure={hover}\n          //   showProperties={false}\n          //   style={{\n          //     width: 180,\n          //     backgroundColor: 'rgba(255, 255, 255, 0.2)'\n          //   }}\n          // />\n          <StructureImage\n            structure={hover.structure}\n            style={{\n              width: 180,\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }}\n          />\n        ) : null}\n      </Tooltip>\n      <ProjectionSettingsModal\n        config={editProjection}\n        availableNearestNeighbors={availableNearestNeighbors}\n        availableClusters={availableClusters}\n        availableProjections={availableProjections}\n        availableProperties={availableProperties}\n        availableOpacityProperties={availableOpacityProperties}\n        availableConnectByProperties={availableConnectByProperties}\n        onHide={() => setEditProjection(undefined)}\n        onSave={(value) => {\n          setEditProjection(undefined);\n          // TODO: Hacky way to distinguish if the custom plot or one of the added plots was edited.\n          if(enabledProjections.includes(editProjection!)) {\n            setEnabledProjections((projections) => projections.map((p) => (p === editProjection ? value : p)));\n          } else if(!customPlotSettings || customPlotSettings === editProjection) {\n            setCustomPlotSettings(value);\n          }\n        }}\n      />\n      <HorizontalCollapse\n        label=\"Options\"\n        position=\"left\"\n        size=\"col-3\"\n        collapsed={optionsCollapsed}\n        setCollapsed={setOptionsCollapsed}\n      >\n        <ComputeEmbeddingsForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <MSOForm\n          availableObjectives={registry?.objectives}\n          addCollection={(collection) => setCollections([...collections, collection])}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <InterpolationForm\n          open={false}\n          setCollection={(collection) => {\n            setCollections([...collections.filter((c) => c.name !== collection.name), collection]);\n          }}\n          loading={loading}\n          setLoading={setLoading}\n          setStructures={setInterpolationStructures}\n          structures={interpolationStructures}\n        />\n        <MatchedMolecularPairsForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          loading={loading}\n          setLoading={setLoading}\n          selection={selection}\n        />\n        <SubstructureMatchingForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <TanimotoForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <NeighborSamplingForm\n          visible={visibleNeighborhoodSamplings}\n          setVisible={setVisibleNeighborhoodSamplings}\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <RecomputeEmbeddingsForm\n          collections={collections}\n          setCollections={setCollections}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n        <StonedSelfiesForm\n          addCollection={(collection) => setCollections([...collections, collection])}\n          selection={selection}\n          loading={loading}\n          setLoading={setLoading}\n        />\n      </HorizontalCollapse>\n      {/*<div className=\"mt-5\" style={{ position: \"relative\", width: 0 }}>\n        <div className=\"sticky-top\" style={{ top: \"20%\", width: 100 }}>\n          {hover ? (\n            <StructureCard\n              structure={hover}\n              style={{\n                left: 5,\n                width: \"100%\",\n              }}\n            />\n          ) : null}\n        </div>\n      </div>*/}\n      <Split\n        // minSize={250}\n        gutterSize={5}\n        sizes={[75, 25]}\n        className={`split col-${optionsCollapsed ? \"12\" : \"9\"}`}\n        style={{\n          height: \"100%\",\n          paddingLeft: optionsCollapsed ? 40 : 0,\n          // marginRight: 40,\n        }}\n        onDragEnd={() => {\n          window.dispatchEvent(new Event('resize'));\n        }}\n      >\n        <div\n          // className=\"col-md-10\"\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n            overflow: \"auto\",\n            paddingRight: 15,\n          }}\n        >\n          <LoadingPage\n            loading={loading && collections.length === 0}\n            fallback=\"Please select structures for embedding\"\n            loadingText=\"Computing embedding of structures...\"\n          >\n            {collections.length > 0 ? (\n              <>\n                <details>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Plot Options <small className=\"text-muted\">to customize the projection plots</small>\n                    </h6>\n                  </summary>\n                  <div className=\"ms-3\">\n                    {[\n                      {\n                        name: \"General\",\n                        plotOptions,\n                        setter: (options: Partial<IPlotOptions>) => setPlotOptions({ ...plotOptions, ...options }),\n                      },\n                      ...collections.map((collection) => ({\n                        name: collection.name,\n                        plotOptions: collection.plotOptions || {},\n                        setter: (options: Partial<IPlotOptions>) =>\n                          setCollections(\n                            collections.map((c) =>\n                              c === collection\n                                ? {\n                                    ...c,\n                                    plotOptions: {\n                                      ...(c.plotOptions || {}),\n                                      ...options,\n                                    },\n                                  }\n                                : c\n                            )\n                          ),\n                      })),\n                    ].map(({ name, setter, plotOptions }, i) => (\n                      <details open={i === 0}>\n                        <summary>\n                          {name} Options{\" \"}\n                          <small className=\"text-muted\">{Object.values(plotOptions).filter(Boolean).length}</small>\n                        </summary>\n                        <ProjectionSettingsForm\n                          inline={true}\n                          availableNearestNeighbors={availableNearestNeighbors}\n                          availableClusters={availableClusters}\n                          availableConnectByProperties={availableConnectByProperties}\n                          availableProperties={availableProperties}\n                          availableOpacityProperties={availableOpacityProperties}\n                          setConfig={(newConfig) => setter(newConfig.plotOptions)}\n                          config={{\n                            label: \"General\",\n                            value: \"\",\n                            projection: \"\",\n                            plotOptions,\n                          }}\n                        />\n                      </details>\n                    ))}\n                  </div>\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Parallel Coordinates <small className=\"text-muted\">to compare multiple numeric properties</small>\n                    </h6>\n                  </summary>\n                  <ParallelCoordinatesPlot\n                    collections={filteredCollections}\n                    selection={selection}\n                    setSelection={setSelection}\n                  />\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Custom Plot <small className=\"text-muted\">to compare two arbitrary properties</small>\n                    </h6>\n                  </summary>\n                  <Grid>\n                    <GridItemOptions\n                      key=\"Custom\"\n                      gridOptions={{\n                        w: 12,\n                        h: 25,\n                        y: 0,\n                        x: 0,\n                      }}\n                      onSettings={() => setEditProjection(customPlotSettings || {\n                        label: 'Custom',\n                        value: 'Custom',\n                        projection: null,\n                        plotOptions: {}\n                      })}\n                    >\n                      <ScatterPlot\n                        title={customX && customY ? `${customX} vs. ${customY}` : \"Please select two axis properties\"}\n                        collections={filteredCollections}\n                        options={{ ...plotOptions, ...pickBy(customPlotSettings?.plotOptions || {}, (v) => v) }}\n                        hover={hover}\n                        setHover={setHover}\n                        selected={selection}\n                        setSelected={setSelection}\n                        xAccessor={`properties.${customX}`}\n                        yAccessor={`properties.${customY}`}\n                      >\n                        <div\n                          style={{\n                            width: 150,\n                            position: \"absolute\",\n                            left: -45,\n                            top: \"50%\",\n                            transform: \"rotate(-90deg)\",\n                          }}\n                        >\n                          <select\n                            className=\"form-control form-control-sm\"\n                            value={customY || \"\"}\n                            onChange={(e) => setCustomY(e.currentTarget.value || null)}\n                          >\n                            <option value=\"\">Select...</option>\n                            {availableProperties.map((p) => (\n                              <option key={p}>{p}</option>\n                            ))}\n                          </select>\n                        </div>\n                        <div\n                          style={{\n                            width: 150,\n                            position: \"absolute\",\n                            left: \"40%\",\n                            bottom: 0,\n                          }}\n                        >\n                          <select\n                            className=\"form-control form-control-sm\"\n                            value={customX || \"\"}\n                            onChange={(e) => setCustomX(e.currentTarget.value || null)}\n                          >\n                            <option value=\"\">Select...</option>\n                            {availableProperties.map((p) => (\n                              <option key={p}>{p}</option>\n                            ))}\n                          </select>\n                        </div>\n                      </ScatterPlot>\n                    </GridItemOptions>\n                  </Grid>\n                </details>\n\n                <details className=\"row\" style={{ position: \"relative\" }} open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Latent Space Visualization <small className=\"text-muted\"></small>\n                    </h6>\n                  </summary>\n                  <Grid>\n                    {Object.keys(latentSpaceCollections || []).map((embedding) => (\n                      <GridItemOptions\n                        key={embedding}\n                        gridOptions={{\n                          w: 12,\n                          h: 25,\n                          y: 0,\n                          x: 0,\n                        }}\n                      >\n                        <ScatterPlot\n                          title={`Top ${NR_OF_LATENT_SPACE_PARTICLES} in ${embedding.toUpperCase()} Latent Space`}\n                          collections={latentSpaceCollections![embedding]}\n                          options={plotOptions}\n                          hover={hover}\n                          setHover={(hover) => {\n                            setHover(\n                              hover\n                                ? collections\n                                    .find((c) => c.name === hover.collection)\n                                    ?.data.find((d) => d.index === hover.index) || null\n                                : null\n                            );\n                          }}\n                          selected={selection}\n                          setSelected={(selected) => {\n                            setSelection(selected);\n                          }}\n                          xAccessor={`properties[latentX]`}\n                          yAccessor={`properties[latentY]`}\n                        />\n                      </GridItemOptions>\n                    ))}\n                  </Grid>\n                </details>\n\n                <details open={true}>\n                  <summary>\n                    <h6 className=\"d-inline-block\">\n                      Projections{\" \"}\n                      <small className=\"text-muted\">\n                        {enabledProjections.length} out of {availableProjections.length}\n                      </small>\n                    </h6>\n                  </summary>\n                  <CreatableSelect<IEnabledProjection, true>\n                    isMulti\n                    name=\"projections\"\n                    value={enabledProjections}\n                    onChange={(e) => {\n                      setEnabledProjections(e.map((v) => v));\n                    }}\n                    onCreateOption={(label) => {\n                      const newOption: IEnabledProjection = {\n                        label: label,\n                        value: label,\n                        projection: \"\",\n                        plotOptions: {},\n                      };\n                      setEnabledProjections([...enabledProjections, newOption]);\n                      setEditProjection(newOption);\n                    }}\n                    options={availableProjections.map((p) => ({\n                      label: p,\n                      value: p,\n                      projection: p,\n                      plotOptions: {},\n                    }))}\n                    closeMenuOnSelect={false}\n                  />\n                  <div className=\"row\" style={{ position: \"relative\" }}>\n                    <Grid>\n                      {\n                        enabledProjections\n                          // .filter((p) => availableProjections.includes(p.projection))\n                          .map((config, i) => (\n                            <GridItemOptions\n                              key={config.value}\n                              onClose={() => {\n                                setEnabledProjections(enabledProjections.filter((p) => p !== config));\n                              }}\n                              onSettings={() => setEditProjection(config)}\n                              gridOptions={{\n                                w: 6,\n                                h: 25,\n                                y: 0 + Math.floor(i / 2) * 25,\n                                x: i % 2 === 0 ? 0 : 6,\n                              }}\n                              renderInfo={() => (\n                                <>\n                                  {filteredCollections.map((c) => (\n                                    <div className=\"d-flex flex-column\">\n                                      <strong className=\"text-nowrap text-truncate\">{c.name}</strong>\n                                      {Object.entries(c.projections?.[config.projection!] || {})\n                                        .filter(([key, value]) => typeof value === \"number\")\n                                        .map(([key, value]) => (\n                                          <div className=\"text-nowrap d-flex\">\n                                            <span className=\"text-truncate\">{key}</span>\n                                            <span className=\"flex-fill\">\n                                              : {(value as number).toFixed(3) || \"Not available\"}\n                                            </span>\n                                          </div>\n                                        ))}\n                                    </div>\n                                  ))}\n                                </>\n                              )}\n                            >\n                              <ScatterPlot\n                                title={config.value}\n                                collections={filteredCollections}\n                                // Pick only \"valid\" values, as otherwise null would override the previous value\n                                options={{ ...plotOptions, ...pickBy(config.plotOptions, (v) => v) }}\n                                hover={hover}\n                                setHover={setHover}\n                                selected={selection}\n                                setSelected={setSelection}\n                                xAccessor={`projection[${config.projection}][0]`}\n                                yAccessor={`projection[${config.projection}][1]`}\n                              />\n                            </GridItemOptions>\n                          )) as any\n                      }\n                    </Grid>\n                  </div>\n                </details>\n\n                <StructureCardGrid\n                  collections={visibleCollections}\n                  selected={selection}\n                  setSelected={setSelection}\n                  setFiltered={setFiltered}\n                  tableClass=\"main-ranking\"\n                  structureCardProps={(structure) => ({\n                    className: structure === hover ? \"border-primary\" : structure.selected ? \"border-secondary\" : \"\",\n                  })}\n                  renderTopForm={\n                    <>\n                      <div className=\"form-check form-switch me-sm-2\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"form-check-input\"\n                          id=\"customSwitch1\"\n                          checked={showSelectedOnly}\n                          onChange={(e) => setShowSelectedOnly(e.currentTarget.checked)}\n                        />\n                        <label className=\"form-check-label\" htmlFor=\"customSwitch1\">\n                          Show selected only\n                        </label>\n                      </div>\n                      <button\n                        className=\"btn btn-sm btn-primary\"\n                        disabled={!selection}\n                        onClick={() => {\n                          setInterpolationStructures(\n                            Object.values(selection!)\n                              .flat()\n                              .map(({ structure }) => structure)\n                          );\n                          setActiveTab(EActiveTabs.INTERPOLATION);\n                        }}\n                      >\n                        Use for interpolation\n                      </button>\n                    </>\n                  }\n                />\n              </>\n            ) : null}\n          </LoadingPage>\n        </div>\n        <div>\n          {/* <HorizontalCollapse\n        label=\"Collections\"\n        position=\"right\"\n        size=\"col-md-4\"\n        collapsed={clusterCollapsed}\n        setCollapsed={setClusterCollapsed}\n      > */}\n          <ReactResizeDetector handleWidth>\n            {({ width, height }) => (\n              <div\n                style={{\n                  height: \"100%\",\n                  overflow: \"auto\",\n                  paddingRight: 15,\n                }}\n              >\n                {width! > 200 ? (\n                  <ClusterSidePanel\n                    collections={collections}\n                    setCollections={setCollections}\n                    selection={selection}\n                    setSelection={setSelection}\n                    setVisibleNeighborhoodSamplings={setVisibleNeighborhoodSamplings}\n                    hover={hover}\n                    setHover={setHover}\n                  />\n                ) : (\n                  <span style={{ transform: \"rotate(90deg)\", position: \"absolute\", top: \"50%\", whiteSpace: \"nowrap\" }}>\n                    Additional Options\n                  </span>\n                )}\n              </div>\n            )}\n          </ReactResizeDetector>\n          {/* </HorizontalCollapse> */}\n        </div>\n      </Split>\n    </>\n  );\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"lineupjs/build/LineUpJS.css\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport \"./scss/main.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { stringifyWithoutCycles } from \".\";\nimport { IInterpolatedParticle, IParticle, IRegistry, IServerCollection } from \"../interfaces\";\n\nfunction fetchRaw({ url, data, method = \"POST\" }: { url: string; data?: any; method?: string }): Promise<Response> {\n  return fetch(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    // @ts-ignore\n    // mode: '*cors', // no-cors, *cors, same-origin\n    method,\n    redirect: \"follow\",\n    body: stringifyWithoutCycles(data),\n  }).then(async (res) => {\n    if (!res.ok) {\n      throw Error((await res.json().catch(() => null))?.message || res.statusText);\n    }\n    return res;\n  });\n}\n\nfunction fetchJSON<T>(url: string, data: any): Promise<T> {\n  return fetchRaw({ url, data }).then((res) => res.json());\n}\n\nfunction fetchText(url: string, data: any): Promise<string> {\n  return fetchRaw({ url, data }).then((res) => res.text());\n}\n\nexport function runMSO(options: {\n  structure: string;\n  iterations?: number;\n  num_swarms?: number;\n  num_part?: number;\n  v_min?: number;\n  v_max?: number;\n  inertia_weight?: number;\n  phi1?: number;\n  phi2?: number;\n  phi3?: number;\n  objectives: any[];\n}): Promise<IServerCollection<IParticle>> {\n  return fetchJSON(\"/api/pso/\", options);\n}\n\nexport function embedStructures(data: {\n  structures: {\n    smiles: string;\n    embeddings?: {[key: string]: number[]};\n  }[];\n  include_embedding?: boolean;\n}): Promise<IServerCollection<IParticle>> {\n  return fetchJSON<IServerCollection<IParticle>>(\"/api/embedding/\", data);\n}\n\nexport function getChemblUMAPEmbedding(): Promise<IParticle[]> {\n  return fetchRaw({\n    url: \"/api/embedding/\",\n    method: \"GET\",\n  }).then((res) => res.json());\n}\n\nexport function interpolateStructures(\n  structures: string[],\n  maxSamples?: number\n): Promise<IServerCollection<IInterpolatedParticle>> {\n  return fetchJSON(\"/api/interpolation/\", {\n    structures,\n    maxSamples,\n  });\n}\n\nexport function getImageURL(\n  structure: string,\n  substructure: string | null = null,\n  align: string | null = null\n): string {\n  return `/api/image/?structure=${encodeURIComponent(structure)}${\n    substructure ? `&substructure=${encodeURIComponent(substructure)}` : \"\"\n  }${align ? `&align=${encodeURIComponent(align)}` : \"\"}`;\n}\n\nexport function getReducedImages(\n  structures: string[],\n  method: \"single\" | \"murcko\" | \"mcs\" | \"similarity\" | \"auto\" = \"auto\"\n): Promise<string | null> {\n  return fetchText(\"/api/image/\", {\n    structures,\n    method,\n  }).catch(() => null);\n}\n\nexport function computeProjectionsWithModels(\n  particles: Pick<IParticle, 'structure' | 'embedding'>[],\n  models: { [key: string]: string }\n): Promise<{\n  projections: IServerCollection[\"projections\"];\n  projection: { [key: string]: number[][] };\n  additional?: { [key: string]: number[][] | null };\n}> {\n  return fetchJSON(\"/api/projection/models\", {\n    particles: particles.map((p) => ({structure: p.structure, embedding: p.embedding})),\n    models,\n  });\n}\n\nexport function hasSubstructureMatch(\n  structures: string[],\n  smarts: string\n): Promise<{\n  validity: { [key: string]: boolean };\n  counts: { [key: string]: number };\n}> {\n  return fetchJSON(\"/api/mol/substructures/\", {\n    structures,\n    smarts,\n  });\n}\n\nexport function getTanimotoSimilarity(\n  structures: string[],\n  reference: string,\n  fingerprint: string\n): Promise<{\n  tanimoto: { [key: string]: number };\n}> {\n  return fetchJSON(\"/api/mol/tanimoto/\", {\n    structures,\n    reference,\n    fingerprint,\n  });\n}\n\nexport function getNeighborSamples(\n  structure: string,\n  samples: number,\n  method: string,\n  scale: number\n): Promise<IServerCollection<IInterpolatedParticle>> {\n  return fetchJSON(\"/api/sampling/\", {\n    structure,\n    samples,\n    method,\n    scale,\n  });\n}\n\nexport function getMatchedMolecularPairs(options: {\n  structure: string;\n  min_variable_size?: number;\n  max_variable_size?: number;\n  min_constant_size?: number;\n  min_radius?: number;\n  min_pairs?: number;\n  substructure?: string;\n}): Promise<{\n  structures: string[];\n}> {\n  return fetchJSON(\"/api/mmp/\", options);\n}\n\nexport function getStonedSelfies(options: {\n  structure: string;\n  substructure: string;\n  random_samples?: number;\n  max_mutations?: number;\n}): Promise<{\n  structures: string[];\n}> {\n  return fetchJSON(\"/api/stoned_selfies/\", options);\n}\n\nexport function getRegistry(): Promise<IRegistry> {\n  return fetchRaw({\n    url: \"/api/registry/\",\n    method: \"GET\",\n  }).then((res) => res.json());\n}\n","import throttle from \"lodash.throttle\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {CollectionContext} from '../CollectionContext';\n\nexport function useSyncedRef<T>(value: T): React.MutableRefObject<T> {\n  const valueRef = React.useRef<T>(value);\n  valueRef.current = value;\n  return valueRef;\n}\n\nexport const useMousePosition = (active: boolean): { x: number; y: number } | null => {\n  const [position, setPosition] = React.useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n\n  React.useEffect(() => {\n    if (active) {\n      const setFromEvent = throttle((e: MouseEvent) => setPosition({ x: e.clientX, y: e.clientY }), 5);\n      window.addEventListener(\"mousemove\", setFromEvent);\n\n      return () => {\n        window.removeEventListener(\"mousemove\", setFromEvent);\n      };\n    } else {\n      setPosition(null);\n    }\n  }, [active]);\n\n  return position;\n};\n\nexport const Tooltip = ({ children, anchor = 'right' }: { children: React.ReactNode, anchor?: 'top' | 'right' }) => {\n  const [node, setNode] = React.useState<HTMLDivElement | null>(null);\n  const position = useMousePosition(Boolean(node && children));\n\n  React.useEffect(() => {\n    const container = document.createElement(\"div\");\n    container.style.position = \"absolute\";\n    container.style.pointerEvents = \"none\";\n    container.style.transform = anchor === 'right' ? \"translate(10%, -50%)\" : \"translate(-50%, 5%)\";\n    container.style.zIndex = \"10000\";\n    document.body.appendChild(container);\n    setNode(container);\n\n    return () => {\n      document.body.removeChild(container);\n    };\n  }, [anchor]);\n\n  React.useEffect(() => {\n    if (node) {\n      if (position) {\n        node.style.left = `${position.x}px`;\n        node.style.top = `${position.y}px`;\n        node.style.display = \"block\";\n      } else {\n        node.style.display = \"none\";\n      }\n    }\n  }, [node, position]);\n\n  return node && children && position ? ReactDOM.createPortal(children, node) : null;\n};\n\nexport function usePrevious<T>(value: T | null): T | null {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T | null>(null);\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\n\nexport function useNameInput(id: string, initialValue: string): [string, React.Dispatch<React.SetStateAction<string>>, React.ReactNode] {\n  const [name, setName] = React.useState<string>(\"\");\n  const uniqueRef = React.useRef(id);\n  const collections = React.useContext(CollectionContext);\n\n  // Remove any [ ] . characters as they are matched with lodash.get and break lineup for example.\n  const currentName = (name || initialValue).replaceAll(/\\[|\\]|\\./g, '_');\n\n  const nameAlreadyTaken = collections.some((c) => c.name === currentName);\n\n  return [currentName, setName, <div className=\"mb-3\">\n    <label htmlFor={uniqueRef.current}>Name</label>\n    <input\n      type=\"text\"\n      className={`form-control form-control-sm ${nameAlreadyTaken ? \"is-invalid\" : \"\"}`}\n      id={uniqueRef.current}\n      required={nameAlreadyTaken ? true : !initialValue} // Required depends if we have a valid placeholder\n      pattern={nameAlreadyTaken ? '^$' : undefined} // Add a regex matching only the empty string if the name is already taken\n      value={name}\n      placeholder={initialValue}\n      onChange={(e) => setName(e.currentTarget.value)}\n    />\n    {nameAlreadyTaken ? (\n      <div className=\"invalid-feedback\">Collection with this name already exists.</div>\n    ) : null}\n  </div>];\n}\n\nexport function timeIt<T>(name: string, f: () => T): T {\n  console.time(name);\n  const result = f();\n  console.timeEnd(name);\n  return result;\n}","import * as React from \"react\";\n\nexport const DetailsSummaryWrapper = ({\n  open = false,\n  lead = true,\n  title,\n  children,\n}: {\n  open?: boolean;\n  lead?: boolean;\n  title: React.ReactNode;\n  children: React.ReactNode;\n}) => {\n\n  return (\n    <details open={open}>\n      <summary className={`d-flex ${lead ? 'lead' : ''}`} style={{alignItems: 'center'}}>{title}</summary>\n      {children}\n    </details>\n  );\n};\n","import * as React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { DetailsSummaryWrapper } from \"./DetailsSummaryWrapper\";\n\nexport const FormWrapper = ({\n  open = false,\n  title,\n  loading = false,\n  setLoading = () => null,\n  onSubmit,\n  children,\n}: {\n  open?: boolean;\n  title: React.ReactNode;\n  loading?: boolean;\n  setLoading?(loading: boolean): void;\n  onSubmit(): void | Promise<any>;\n  children: React.ReactNode;\n}) => {\n  const [error, setError] = React.useState<string | null>(null);\n\n  return (\n    <DetailsSummaryWrapper open={open} title={title}>\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (e.currentTarget.reportValidity()) {\n            setLoading(true);\n\n            try {\n              setError(null);\n              await onSubmit();\n            } catch (e) {\n              console.error(e);\n              setError(e.toString());\n            }\n\n            setLoading(false);\n          }\n        }}\n      >\n        {error ? (\n          <Alert variant=\"danger\" onClose={() => setError(null)} dismissible>\n            <p>{error}</p>\n          </Alert>\n        ) : null}\n        {children}\n      </form>\n\n    </DetailsSummaryWrapper>\n  );\n};\n","import { extent } from \"d3-array\";\nimport { scaleLinear } from \"d3-scale\";\n\nexport function normalizeArray<T extends number | number[]>(\n  list: T,\n  range: [number, number],\n  domain?: [number | undefined, number | undefined]\n): T {\n  if (typeof list === \"number\" || !Array.isArray(list)) {\n    return list;\n  }\n  if (!domain) {\n    domain = extent(list);\n  }\n  if (typeof domain[0] !== \"number\" || typeof domain[1] !== \"number\") {\n    return list;\n  }\n  if (domain[0] === domain[1] && domain[0] >= range[0] && domain[0] <= range[1]) {\n    return list;\n  }\n  var scale = scaleLinear()\n    .domain(domain as [number, number])\n    .range(range);\n  return list.map((n) => scale(n)) as any;\n}\n\nexport function toNumber(n: number | string | null | boolean | undefined, def: number = 0): number {\n  if (n == null) {\n    return def;\n  }\n  if (n === true) {\n    return 1;\n  } else if (n === false) {\n    return 0;\n  }\n  const v = parseFloat(n.toString());\n  return isNaN(v) ? def : v;\n}\n\nexport function toExtent<T>(\n  data: T[],\n  getter: (d: T) => [number, number] | [undefined, undefined] | undefined\n): [number, number] | [undefined, undefined] {\n  return data.reduce<[number, number] | [undefined, undefined]>(\n    (acc, d) => {\n      const current = getter(d);\n      if (current) {\n        if (acc[0] == null || (current[0] != null && current[0]! < acc[0]!)) {\n          acc[0] = current[0];\n        }\n        if (acc[1] == null || (current[1] != null && current[1]! > acc[1]!)) {\n          acc[1] = current[1];\n        }\n      }\n      return acc;\n    },\n    [undefined, undefined]\n  );\n}\n\nexport function stringifyWithoutCycles(data: any): string {\n  return JSON.stringify(data, (key, value) => {\n    if (key === \"knn_particles\") {\n      return null;\n    }\n    return value;\n  });\n}\n\nexport async function downloadFile(blob: Blob, name: string) {\n  const href = await URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = href;\n  link.download = name;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nexport async function downloadJSONFile(data: any, name: string) {\n  const json = stringifyWithoutCycles(data);\n  const blob = new Blob([json], { type: \"application/json\" });\n  downloadFile(blob, name + \".json\");\n}\n\nexport async function downloadCSVFile(data: string, name: string) {\n  const blob = new Blob([data], { type: \"text/csv\" });\n  downloadFile(blob, name + \".csv\");\n}\n\n/**\n * Injects a cached getter function into an object.\n * @param object Object to be inejected into.\n * @param key Key of the newly injected getter.\n * @param valueCreator Function returning the value of the injected getter.\n * @param options Options.\n */\nexport function injectGetter<T>(object: object, key: PropertyKey, valueCreator: () => T, {\n  cache = true\n}: {\n  cache?: boolean;\n} = {}): void {\n  Object.defineProperty(object, key, {\n    get: function () {\n      const value = valueCreator();\n      if(cache) {\n        // Remove the getter function.\n        delete (object as any)[key];\n        // Assign the actual value and return it.\n        // return ((object as any)[key] = value);\n        // Inject the getter again instead, now without the \"replace\" logic.\n        injectGetter(object, key, () => value, { cache: false });\n      }\n      return value;\n    },\n    configurable: true,\n    enumerable: true,\n  });\n}\n","import * as React from \"react\";\nimport { getImageURL, getReducedImages } from \"../utils/api\";\nimport { svgToImageSrc } from \"./ranking/StructureImageRenderer\";\n\nexport const StructureImage = React.memo(\n  ({\n    structure,\n    align,\n    image,\n    ...innerProps\n  }: {\n    structure: string | string[];\n    align?: string;\n    image?: string;\n  } & React.ImgHTMLAttributes<HTMLImageElement>) => {\n    const [src, setSrc] = React.useState<string | undefined | null>(undefined);\n\n    const text = /* Array.isArray(structure)\n      ? `Common structure of ${structure.length} structure`\n      : `Structure of ${structure}` */ '';\n\n    React.useEffect(() => {\n      if(image) {\n        setSrc(svgToImageSrc(image));\n      } else if (Array.isArray(structure)) {\n        getReducedImages(structure).then((res) => {\n          setSrc(res ? svgToImageSrc(res) : null);\n        });\n      } else {\n        setSrc(getImageURL(structure, null, align));\n      }\n    }, [structure, image, align]);\n\n    return src ? (\n      <img\n        src={src}\n        alt={text}\n        title={text}\n        loading={\"lazy\"}\n        onLoad={(e) => (e.currentTarget.style.visibility = \"visible\")}\n        onError={(e) => (e.currentTarget.style.visibility = \"hidden\")}\n        {...(innerProps || {})}\n      />\n    ) : (src === undefined ? (\n      <div style={{ ...(innerProps?.style || {}), display: \"flex\", justifyContent: \"center\" }}>\n        <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\" />\n      </div>\n    ) : null);\n  }\n);\n","export const DEFAULT_COLORWAY = [\n  \"#4e79a7\",\n  \"#f28e2c\",\n  \"#e15759\",\n  \"#76b7b2\",\n  \"#59a14f\",\n  \"#edc949\",\n  \"#af7aa1\",\n  \"#ff9da7\",\n  \"#9c755f\",\n  \"#bab0ab\",\n];\n\nexport const ARRAY_DISTANCE_METRICS: { [key: string]: (value: number, values: number[]) => number } = {\n  euclidean_difference: (value, values) => Math.sqrt(values.reduce((acc, cur) => acc + Math.pow(cur - value, 2), 0)),\n  mean: (value, values) => values.reduce((acc, cur) => acc + Math.abs(cur), 0) / values.length,\n  mean_rel_diff: (value, values) => values.reduce((acc, cur) => acc + Math.abs(cur), 0) / values.length / value,\n  mean_rel_diff_log10: (value, values) =>\n    values.reduce((acc, cur) => acc + Math.log10(Math.abs(cur)), 0) / values.length / Math.log10(value),\n  max: (value, values) => Math.max(...values),\n  max_difference: (value, values) => Math.abs(Math.abs(value) - Math.abs(Math.max(...values))),\n  min: (value, values) => Math.min(...values),\n  min_difference: (value, values) => Math.abs(Math.abs(value) - Math.abs(Math.min(...values))),\n};\n\nexport const isProxySymbol = Symbol(\"isProxy\");\n\nexport const DEFAULT_PLOTLY_COLORSCALE = {\n  colorscale: [\n    [\"0\", \"#D0EBFF\"],\n    [\"0.5\", \"#49a7bd\"],\n    [\"1.0\", \"#31347a\"],\n  ],\n  reversescale: false,\n};\n","export interface INearestNeighbors {\n  distance_metric: string;\n  knn_dist: number[];\n  knn_ind: number[];\n  knn_particles: IParticle[];\n}\n\nexport interface IParticle {\n  selected?: boolean;\n  collection: string;\n  index?: number;\n  structure: string;\n  original_structure?: string;\n  images?: string[];\n  embedding?: { [key: string]: number[] };\n  nearest_neighbors?: {\n    [key: string | symbol]: INearestNeighbors;\n  };\n  clusters?: {\n    [key: string | symbol]: {\n      distance_metric: string;\n      label: number;\n    };\n  };\n  properties: {\n    [key: string | symbol]: string | number | boolean | null | undefined;\n  };\n  projection: { [key: string]: number[] };\n}\n\nexport function isParticle(p: any): p is IParticle {\n  return p.structure && p.projection;\n}\n\nexport const DEFAULT_COLLECTION = \"Particles\";\nexport const DEFAULT_CHEMBL_COLLECTION = \"ChEMBL\";\n\nexport interface IPlotOptions {\n  colorBy: string | null;\n  opacityBy: number | string | null;\n  groupBy: string | null;\n  connectBy: string[] | null;\n  sizeBy: string | null;\n}\n\nexport interface IEnabledProjection {\n  label: string;\n  value: string;\n  projection: string | null;\n  plotOptions: Partial<IPlotOptions>;\n}\n\nexport interface IServerCollection<T extends IParticle = IParticle> {\n  data: T[];\n  projections?: {\n    [key: string]: {\n      trustworthiness?: number;\n      trustworthiness_additional?: number;\n      explained_variance?: number;\n      model?: string;\n    };\n  };\n}\n\nexport interface ICollection<T extends IParticle = IParticle> extends IServerCollection<T> {\n  name: string;\n  type?: \"neighborhoodSampling\";\n  hidden?: boolean;\n  plotOptions?: Partial<IPlotOptions>;\n}\n\nexport interface IInterpolatedParticle extends IParticle {\n  scaffold: boolean;\n}\n\nexport interface IObjective {\n  description: string;\n  name: string;\n  weight: number;\n  desirability: { x: number; y: number }[];\n  additional_args?: { [key: string]: string };\n}\nexport interface IRegistry {\n  objectives: IObjective[];\n}\n\nexport declare type IParticleSelection = { [key: string]: IParticle[] } | null;\n\nexport enum EActiveTabs {\n  EMBEDDING,\n  INTERPOLATION,\n}\n"],"sourceRoot":""}